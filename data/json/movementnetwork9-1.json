[
  {
    "title": "Estimate gas price | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/estimate-gas-price",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsEstimate gas price\nEstimate gas price\nGET\n/estimate_gas_price\n\nGives an estimate of the gas unit price required to get a transaction on chain in a reasonable amount of time. The gas unit price is the amount that each transaction commits to pay for each unit of gas consumed in executing the transaction. The estimate is based on recent history: it gives the minimum gas that would have been required to get into recent blocks, for blocks that were full. (When blocks are not full, the estimate will match the minimum gas unit price.)\n\nThe estimation is given in three values: de-prioritized (low), regular, and prioritized (aggressive). Using a more aggressive value increases the likelihood that the transaction will make it into the next block; more aggressive values are computed with a larger history and higher percentile statistics. More details are in AIP-34.\n\nResponses​\n200\n400\n403\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\ndeprioritized_gas_estimate\nuint64\n\nThe deprioritized estimate for the gas unit price\n\ngas_estimate\nuint64\nREQUIRED\n\nThe current estimate for the gas unit price\n\nprioritized_gas_estimate\nuint64\n\nThe prioritized estimate for the gas unit price\n\nLoading...\nPrevious\nEncode submission\nNext\nView\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/Introduction/faucet",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nPage Not Found\n\nWe could not find what you were looking for.\n\nPlease contact the owner of the site that linked you to the original URL and let them know their link is broken.\n\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Encode submission | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/encode-submission",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsEncode submission\nEncode submission\nPOST\n/transactions/encode_submission\n\nThis endpoint accepts an EncodeSubmissionRequest, which internally is a UserTransactionRequestInner (and optionally secondary signers) encoded as JSON, validates the request format, and then returns that request encoded in BCS. The client can then use this to create a transaction signature to be used in a SubmitTransactionRequest, which it then passes to the /transactions POST endpoint.\n\nTo be clear, this endpoint makes it possible to submit transaction requests to the API from languages that do not have library support for BCS. If you are using an SDK that has BCS support, such as the official Rust, TypeScript, or Python SDKs, you do not need to use this endpoint.\n\nTo sign a message using the response from this endpoint:\n\nDecode the hex encoded string in the response to bytes.\nSign the bytes to create the signature.\nUse that as the signature field in something like Ed25519Signature, which you then use to build a TransactionSignature.\nRequest​\nAPPLICATION/JSON\n\nBODY\n\nREQUIRED\n\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsecondary_signers\nhex[]\n\nSecondary signer accounts of the request for Multi-agent\n\nResponses​\n200\n400\n403\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\n\nSCHEMA\n\nstring\n\nLoading...\nPrevious\nSimulate transaction\nNext\nEstimate gas price\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Get account transactions | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-account-transactions",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nK\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsGet account transactions\nGet account transactions\nGET\nhttps://aptos.testnet.suzuka.movementlabs.xyz/v1/accounts/:address/transactions\n\nRetrieves on-chain committed transactions from an account. If the start version is too far in the past, a 410 will be returned.\n\nIf no start version is given, it will start at version 0.\n\nTo retrieve a pending transaction, use /transactions/by_hash.\n\nRequest​\n\nPATH PARAMETERS\n\naddress\nhex\nREQUIRED\n\nAddress of account with or without a 0x prefix\n\nQUERY PARAMETERS\n\nstart\nuint64\n\nAccount sequence number to start list of transactions\n\nIf not provided, defaults to showing the latest transactions\n\nlimit\nuint16\n\nMax number of transactions to retrieve.\n\nIf not provided, defaults to default page size\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nArray [\n\noneOf\n\nTransaction_PendingTransaction\nTransaction_UserTransaction\nTransaction_GenesisTransaction\nTransaction_BlockMetadataTransaction\nTransaction_StateCheckpointTransaction\nTransaction_BlockEpilogueTransaction\nTransaction_ValidatorTransaction\ntype\nstring\nREQUIRED\n\nPossible values: [pending_transaction]\n\nhash\nHashValue (string)\nREQUIRED\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\n]\n\nCURL\nPYTHON\nGO\nNODEJS\nRUBY\nCSHARP\nPHP\nJAVA\nPOWERSHELL\nCURL\n\tcurl -L 'https://aptos.testnet.suzuka.movementlabs.xyz/v1/accounts/:address/transactions' \\\n\n\t-H 'Accept: application/json'\n\nREQUEST\nCOLLAPSE ALL\nBase URL\nhttps://aptos.testnet.suzuka.movementlabs.xyz/v1\nParameters\naddress — pathREQUIRED\nShow optional parameters\nSEND API REQUEST\nRESPONSE\nCLEAR\n\nClick the Send API Request button above and see the response here!\n\nPrevious\nGet transaction by version\nNext\nSubmit batch transactions\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Submit batch transactions | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/submit-batch-transactions",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nK\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsSubmit batch transactions\nSubmit batch transactions\nPOST\nhttps://aptos.testnet.suzuka.movementlabs.xyz/v1/transactions/batch\n\nThis allows you to submit multiple transactions. The response has three outcomes:\n\nAll transactions succeed, and it will return a 202\nSome transactions succeed, and it will return the failed transactions and a 206\nNo transactions succeed, and it will also return the failed transactions and a 206\n\nTo submit a transaction as JSON, you must submit a SubmitTransactionRequest. To build this request, do the following:\n\nEncode the transaction as BCS. If you are using a language that has native BCS support, make sure to use that library. If not, you may take advantage of /transactions/encode_submission. When using this endpoint, make sure you trust the node you're talking to, as it is possible they could manipulate your request.\nSign the encoded transaction and use it to create a TransactionSignature.\nSubmit the request. Make sure to use the \"application/json\" Content-Type.\n\nTo submit a transaction as BCS, you must submit a SignedTransaction encoded as BCS. See SignedTransaction in types/src/transaction/mod.rs. Make sure to use the application/x.aptos.signed_transaction+bcs Content-Type.\n\nRequest​\nAPPLICATION/JSON\nAPPLICATION/X.APTOS.SIGNED_TRANSACTION+BCS\n\nBODY\n\nREQUIRED\n\nArray [\n\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\nREQUIRED\n\n]\n\nResponses​\n202\n206\n400\n403\n404\n413\n500\n503\n507\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\ntransaction_failures\n\nobject[]\n\nREQUIRED\n\nCURL\nPYTHON\nGO\nNODEJS\nRUBY\nCSHARP\nPHP\nJAVA\nPOWERSHELL\nCURL\n\tcurl -L 'https://aptos.testnet.suzuka.movementlabs.xyz/v1/transactions/batch' \\\n\n\t-H 'Content-Type: application/json' \\\n\n\t-H 'Accept: application/json' \\\n\n\t-d '[\n\n\t  {\n\n\t    \"sender\": \"0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1 \",\n\n\t    \"sequence_number\": \"32425224034\",\n\n\t    \"max_gas_amount\": \"32425224034\",\n\n\t    \"gas_unit_price\": \"32425224034\",\n\n\t    \"expiration_timestamp_secs\": \"32425224034\",\n\n\t    \"payload\": {\n\n\t      \"type\": \"entry_function_payload\",\n\n\t      \"function\": \"0x1::aptos_coin::transfer\",\n\n\t      \"type_arguments\": [\n\n\t        \"string\"\n\n\t      ],\n\n\t      \"arguments\": [\n\n\t        null\n\n\t      ]\n\n\t    },\n\n\t    \"signature\": {\n\n\t      \"type\": \"ed25519_signature\",\n\n\t      \"public_key\": \"0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1 \",\n\n\t      \"signature\": \"0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1 \"\n\n\t    }\n\n\t  }\n\n\t]'\n\nREQUEST\nCOLLAPSE ALL\nBase URL\nhttps://aptos.testnet.suzuka.movementlabs.xyz/v1\nBody\n REQUIRED\nContent-Type\napplication/json\napplication/x.aptos.signed_transaction+bcs\n[\n  {\n    \"sender\": \"0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1 \",\n    \"sequence_number\": \"32425224034\",\n    \"max_gas_amount\": \"32425224034\",\n    \"gas_unit_price\": \"32425224034\",\n    \"expiration_timestamp_secs\": \"32425224034\",\n    \"payload\": {\n      \"type\": \"entry_function_payload\",\n      \"function\": \"0x1::aptos_coin::transfer\",\n      \"type_arguments\": [\n        \"string\"\n      ],\n      \"arguments\": [\n        null\n      ]\n    },\n    \"signature\": {\n      \"type\": \"ed25519_signature\",\n      \"public_key\": \"0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1 \",\n      \"signature\": \"0x88fbd33f54e1126269769780feb24480428179f552e2313fbe571b72e62a1ca1 \"\n    }\n  }\n]\n\nSEND API REQUEST\nRESPONSE\nCLEAR\n\nClick the Send API Request button above and see the response here!\n\nPrevious\nGet account transactions\nNext\nSimulate transaction\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/simulate-transaction",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsSimulate transaction\nSimulate transaction\nPOST\n/transactions/simulate\n\nThe output of the transaction will have the exact transaction outputs and events that running an actual signed transaction would have. However, it will not have the associated state hashes, as they are not updated in storage. This can be used to estimate the maximum gas units for a submitted transaction.\n\nTo use this, you must:\n\nCreate a SignedTransaction with a zero-padded signature.\nSubmit a SubmitTransactionRequest containing a UserTransactionRequest containing that signature.\n\nTo use this endpoint with BCS, you must submit a SignedTransaction encoded as BCS. See SignedTransaction in types/src/transaction/mod.rs.\n\nRequest​\n\nQUERY PARAMETERS\n\nestimate_max_gas_amount\nboolean\n\nIf set to true, the max gas value in the transaction will be ignored and the maximum possible gas will be used\n\nestimate_gas_unit_price\nboolean\n\nIf set to true, the gas unit price in the transaction will be ignored and the estimated value will be used\n\nestimate_prioritized_gas_unit_price\nboolean\n\nIf set to true, the transaction will use a higher price than the original estimate.\n\nAPPLICATION/JSON\nAPPLICATION/X.APTOS.SIGNED_TRANSACTION+BCS\n\nBODY\n\nREQUIRED\n\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\nREQUIRED\n\nResponses​\n200\n400\n403\n404\n413\n500\n503\n507\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nArray [\n\nversion\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nhash\nHashValue (string)\nREQUIRED\nstate_change_hash\nHashValue (string)\nREQUIRED\nevent_root_hash\nHashValue (string)\nREQUIRED\nstate_checkpoint_hash\nHashValue (string)\ngas_used\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nsuccess\nboolean\nREQUIRED\n\nWhether the transaction was successful\n\nvm_status\nstring\nREQUIRED\n\nThe VM status of the transaction, can tell useful information in a failure\n\naccumulator_root_hash\nHashValue (string)\nREQUIRED\n\nchanges\n\nobject[]\n\nREQUIRED\n\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\nevents\n\nobject[]\n\nREQUIRED\n\ntimestamp\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\n]\n\nLoading...\nPrevious\nSubmit batch transactions\nNext\nEncode submission\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-transaction-by-version",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsGet transaction by version\nGet transaction by version\nGET\n/transactions/by_version/:txn_version\n\nRetrieves a transaction by a given version. If the version has been pruned, a 410 will be returned.\n\nRequest​\n\nPATH PARAMETERS\n\ntxn_version\nuint64\nREQUIRED\n\nVersion of transaction to retrieve\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\n\nSCHEMA\n\noneOf\n\nTransaction_PendingTransaction\nTransaction_UserTransaction\nTransaction_GenesisTransaction\nTransaction_BlockMetadataTransaction\nTransaction_StateCheckpointTransaction\nTransaction_BlockEpilogueTransaction\nTransaction_ValidatorTransaction\ntype\nstring\nREQUIRED\n\nPossible values: [pending_transaction]\n\nhash\nHashValue (string)\nREQUIRED\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\nLoading...\nPrevious\nWait for transaction by hash\nNext\nGet account transactions\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/wait-transaction-by-hash",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsWait for transaction by hash\nWait for transaction by hash\nGET\n/transactions/wait_by_hash/:txn_hash\n\nSame as /transactions/by_hash, but will wait for a pending transaction to be committed. To be used as a long poll optimization by clients, to reduce latency caused by polling. The \"long\" poll is generally a second or less but dictated by the server; the client must deal with the result as if the request was a normal /transactions/by_hash request, e.g., by retrying if the transaction is pending.\n\nRequest​\n\nPATH PARAMETERS\n\ntxn_hash\nHashValue\nREQUIRED\n\nHash of transaction to retrieve\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\n\nSCHEMA\n\noneOf\n\nTransaction_PendingTransaction\nTransaction_UserTransaction\nTransaction_GenesisTransaction\nTransaction_BlockMetadataTransaction\nTransaction_StateCheckpointTransaction\nTransaction_BlockEpilogueTransaction\nTransaction_ValidatorTransaction\ntype\nstring\nREQUIRED\n\nPossible values: [pending_transaction]\n\nhash\nHashValue (string)\nREQUIRED\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\nLoading...\nPrevious\nGet transaction by hash\nNext\nGet transaction by version\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-transaction-by-hash",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsGet transaction by hash\nGet transaction by hash\nGET\n/transactions/by_hash/:txn_hash\n\nLook up a transaction by its hash. This is the same hash that is returned by the API when submitting a transaction (see PendingTransaction).\n\nWhen given a transaction hash, the server first looks for the transaction in storage (on-chain, committed). If no on-chain transaction is found, it looks the transaction up by hash in the mempool (pending, not yet committed).\n\nTo create a transaction hash by yourself, do the following:\n\nHash message bytes: \"RawTransaction\" bytes + BCS bytes of Transaction.\nApply hash algorithm SHA3-256 to the hash message bytes.\nHex-encode the hash bytes with 0x prefix.\nRequest​\n\nPATH PARAMETERS\n\ntxn_hash\nHashValue\nREQUIRED\n\nHash of transaction to retrieve\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\n\nSCHEMA\n\noneOf\n\nTransaction_PendingTransaction\nTransaction_UserTransaction\nTransaction_GenesisTransaction\nTransaction_BlockMetadataTransaction\nTransaction_StateCheckpointTransaction\nTransaction_BlockEpilogueTransaction\nTransaction_ValidatorTransaction\ntype\nstring\nREQUIRED\n\nPossible values: [pending_transaction]\n\nhash\nHashValue (string)\nREQUIRED\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\nLoading...\nPrevious\nSubmit transaction\nNext\nWait for transaction by hash\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Submit transaction | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/submit-transaction",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsSubmit transaction\nSubmit transaction\nPOST\n/transactions\n\nThis endpoint accepts transaction submissions in two formats.\n\nTo submit a transaction as JSON, you must submit a SubmitTransactionRequest. To build this request, do the following:\n\nEncode the transaction as BCS. If you are using a language that has native BCS support, make sure of that library. If not, you may take advantage of /transactions/encode_submission. When using this endpoint, make sure you trust the node you're talking to, as it is possible they could manipulate your request.\nSign the encoded transaction and use it to create a TransactionSignature.\nSubmit the request. Make sure to use the \"application/json\" Content-Type.\n\nTo submit a transaction as BCS, you must submit a SignedTransaction encoded as BCS. See SignedTransaction in types/src/transaction/mod.rs. Make sure to use the application/x.aptos.signed_transaction+bcs Content-Type.\n\nRequest​\nAPPLICATION/JSON\nAPPLICATION/X.APTOS.SIGNED_TRANSACTION+BCS\n\nBODY\n\nREQUIRED\n\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\nREQUIRED\n\nResponses​\n202\n400\n403\n404\n413\n500\n503\n507\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nhash\nHashValue (string)\nREQUIRED\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\nLoading...\nPrevious\nGet transactions\nNext\nGet transaction by hash\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-transactions",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactionsGet transactions\nGet transactions\nGET\n/transactions\n\nRetrieve on-chain committed transactions. The page size and start ledger version can be provided to get a specific sequence of transactions.\n\nIf the version has been pruned, then a 410 will be returned.\n\nTo retrieve a pending transaction, use /transactions/by_hash.\n\nRequest​\n\nQUERY PARAMETERS\n\nstart\nuint64\n\nLedger version to start list of transactions\n\nIf not provided, defaults to showing the latest transactions\n\nlimit\nuint16\n\nMax number of transactions to retrieve.\n\nIf not provided, defaults to default page size\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nArray [\n\noneOf\n\nTransaction_PendingTransaction\nTransaction_UserTransaction\nTransaction_GenesisTransaction\nTransaction_BlockMetadataTransaction\nTransaction_StateCheckpointTransaction\nTransaction_BlockEpilogueTransaction\nTransaction_ValidatorTransaction\ntype\nstring\nREQUIRED\n\nPossible values: [pending_transaction]\n\nhash\nHashValue (string)\nREQUIRED\nsender\nhex\nREQUIRED\n\nA hex encoded 32 byte Aptos account address.\n\nThis is represented in a string as a 64 character hex string, sometimes shortened by stripping leading 0s, and adding a 0x.\n\nFor example, address 0x0000000000000000000000000000000000000000000000000000000000000001 is represented as 0x1.\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nmax_gas_amount\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngas_unit_price\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nexpiration_timestamp_secs\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\npayload\n\nobject\n\nREQUIRED\n\nsignature\n\nobject\n\n]\n\nLoading...\nPrevious\nTransactions\nNext\nSubmit transaction\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-raw-table-item",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nGet table item\nGet raw table item\nTransactions\nView\nTablesGet raw table item\nGet raw table item\nPOST\n/tables/:table_handle/raw_item\n\nGet a table item at a specific ledger version from the table identified by {table_handle} in the path and the \"key\" (RawTableItemRequest) provided in the request body.\n\nThe get_raw_table_item requires only a serialized key comparing to the full move type information comparing to the get_table_item api, and can only return the query in the bcs format.\n\nThe Aptos nodes prune account state history, via a configurable time window. If the requested ledger version has been pruned, the server responds with a 410.\n\nRequest​\n\nPATH PARAMETERS\n\ntable_handle\nhex\nREQUIRED\n\nTable handle hex encoded 32-byte string\n\nQUERY PARAMETERS\n\nledger_version\nuint64\n\nLedger version to get state of account\n\nIf not provided, it will be the latest version\n\nAPPLICATION/JSON\n\nBODY\n\nREQUIRED\n\nkey\nhex\nREQUIRED\n\nAll bytes (Vec) data is represented as hex-encoded string prefixed with 0x and fulfilled with two hex digits per byte.\n\nUnlike the Address type, HexEncodedBytes will not trim any zeros.\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\n\nSCHEMA\n\nanyOf\n\nMOD1\nMOD2\nMOD3\nU64\nU128\nU256\nMOD7\nAddress\nMOD9\nHexEncodedBytes\nMoveStructValue\nMOD12\n\ninteger\n\nLoading...\nPrevious\nGet table item\nNext\nTransactions\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Get table item | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-table-item",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nGet table item\nGet raw table item\nTransactions\nView\nTablesGet table item\nGet table item\nPOST\n/tables/:table_handle/item\n\nGet a table item at a specific ledger version from the table identified by {table_handle} in the path and the \"key\" (TableItemRequest) provided in the request body.\n\nThis is a POST endpoint because the \"key\" for requesting a specific table item (TableItemRequest) could be quite complex, as each of its fields could themselves be composed of other structs. This makes it impractical to express using query params, meaning GET isn't an option.\n\nThe Aptos nodes prune account state history, via a configurable time window. If the requested ledger version has been pruned, the server responds with a 410.\n\nRequest​\n\nPATH PARAMETERS\n\ntable_handle\nhex\nREQUIRED\n\nTable handle hex encoded 32-byte string\n\nQUERY PARAMETERS\n\nledger_version\nuint64\n\nLedger version to get state of account\n\nIf not provided, it will be the latest version\n\nAPPLICATION/JSON\n\nBODY\n\nREQUIRED\n\nkey_type\nMoveType (string)\nREQUIRED\n\nPossible values: Value must match regular expression ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$\n\nString representation of an on-chain Move type tag that is exposed in transaction payload. Values: - bool - u8 - u16 - u32 - u64 - u128 - u256 - address - signer - vector: vector<{non-reference MoveTypeId}> - struct: {address}::{module_name}::{struct_name}::<{generic types}>\n\nVector type value examples:\n  - `vector<u8>`\n  - `vector<vector<u64>>`\n  - `vector<0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>>`\n\nStruct type value examples:\n  - `0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n  - `0x1::account::Account`\n\nNote:\n  1. Empty chars should be ignored when comparing 2 struct tag ids.\n  2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\nvalue_type\nMoveType (string)\nREQUIRED\n\nPossible values: Value must match regular expression ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$\n\nString representation of an on-chain Move type tag that is exposed in transaction payload. Values: - bool - u8 - u16 - u32 - u64 - u128 - u256 - address - signer - vector: vector<{non-reference MoveTypeId}> - struct: {address}::{module_name}::{struct_name}::<{generic types}>\n\nVector type value examples:\n  - `vector<u8>`\n  - `vector<vector<u64>>`\n  - `vector<0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>>`\n\nStruct type value examples:\n  - `0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n  - `0x1::account::Account`\n\nNote:\n  1. Empty chars should be ignored when comparing 2 struct tag ids.\n  2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\nkey\nREQUIRED\n\nThe value of the table item's key\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\n\nSCHEMA\n\nanyOf\n\nMOD1\nMOD2\nMOD3\nU64\nU128\nU256\nMOD7\nAddress\nMOD9\nHexEncodedBytes\nMoveStructValue\nMOD12\n\ninteger\n\nLoading...\nPrevious\nTables\nNext\nGet raw table item\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Get ledger info | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-ledger-info",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nShow OpenAPI explorer\nCheck basic node health\nGet ledger info\nTables\nTransactions\nView\nGeneralGet ledger info\nGet ledger info\nGET\n/\n\nGet the latest ledger information, including data such as chain ID, role type, ledger versions, epoch, etc.\n\nResponses​\n200\n400\n403\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nchain_id\nuint8\nREQUIRED\n\nChain ID of the current chain\n\nepoch\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nledger_version\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\noldest_ledger_version\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nledger_timestamp\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nnode_role\nRoleType (string)\nREQUIRED\n\nPossible values: [validator, full_node]\n\noldest_block_height\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nblock_height\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ngit_hash\nstring\n\nGit hash of the build of the API endpoint. Can be used to determine the exact software version used by the API endpoint.\n\nLoading...\nPrevious\nCheck basic node health\nNext\nTables\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Check basic node health | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/healthy",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nShow OpenAPI explorer\nCheck basic node health\nGet ledger info\nTables\nTransactions\nView\nGeneralCheck basic node health\nCheck basic node health\nGET\n/-/healthy\n\nBy default this endpoint just checks that it can get the latest ledger info and then returns 200.\n\nIf the duration_secs param is provided, this endpoint will return a 200 if the following condition is true:\n\nserver_latest_ledger_info_timestamp >= server_current_time_timestamp - duration_secs\n\nRequest​\n\nQUERY PARAMETERS\n\nduration_secs\nuint32\n\nThreshold in seconds that the server can be behind to be considered healthy\n\nIf not provided, the healthcheck will always succeed\n\nResponses​\n200\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nmessage\nstring\nREQUIRED\nLoading...\nPrevious\nShow OpenAPI explorer\nNext\nGet ledger info\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-events-by-event-handle",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGet events by creation number\nGet events by event handle\nGeneral\nTables\nTransactions\nView\nEventsGet events by event handle\nGet events by event handle\nGET\n/accounts/:address/events/:event_handle/:field_name\n\nThis API uses the given account address, eventHandle, and fieldName to build a key that can globally identify an event types. It then uses this key to return events emitted to the given account matching that event type.\n\nRequest​\n\nPATH PARAMETERS\n\naddress\nhex\nREQUIRED\n\nHex-encoded 32 byte Aptos account, with or without a 0x prefix, for which events are queried. This refers to the account that events were emitted to, not the account hosting the move module that emits that event type.\n\nevent_handle\nMoveStructTag\nREQUIRED\n\nPossible values: Value must match regular expression ^0x[0-9a-zA-Z:_<>]+$\n\nName of struct to lookup event handle e.g. 0x1::account::Account\n\nfield_name\nIdentifierWrapper\nREQUIRED\n\nName of field to lookup event handle e.g. withdraw_events\n\nQUERY PARAMETERS\n\nstart\nuint64\n\nStarting sequence number of events.\n\nIf unspecified, by default will retrieve the most recent\n\nlimit\nuint16\n\nMax number of events to retrieve.\n\nIf unspecified, defaults to default page size\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nArray [\n\nversion\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nguid\n\nobject\n\nREQUIRED\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ntype\nMoveType (string)\nREQUIRED\n\nPossible values: Value must match regular expression ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$\n\nString representation of an on-chain Move type tag that is exposed in transaction payload. Values: - bool - u8 - u16 - u32 - u64 - u128 - u256 - address - signer - vector: vector<{non-reference MoveTypeId}> - struct: {address}::{module_name}::{struct_name}::<{generic types}>\n\nVector type value examples:\n  - `vector<u8>`\n  - `vector<vector<u64>>`\n  - `vector<0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>>`\n\nStruct type value examples:\n  - `0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n  - `0x1::account::Account`\n\nNote:\n  1. Empty chars should be ignored when comparing 2 struct tag ids.\n  2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\ndata\nREQUIRED\n\nThe JSON representation of the event\n\n]\n\nLoading...\nPrevious\nGet events by creation number\nNext\nGeneral\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/spec",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nShow OpenAPI explorer\nCheck basic node health\nGet ledger info\nTables\nTransactions\nView\nGeneralShow OpenAPI explorer\nShow OpenAPI explorer\nGET\n/spec\n\nProvides a UI that you can use to explore the API. You can also retrieve the API directly at /spec.yaml and /spec.json.\n\nResponses​\n200\nTEXT/HTML\nSchema\n\nSCHEMA\n\nstring\n\nLoading...\nPrevious\nGeneral\nNext\nCheck basic node health\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-events-by-creation-number",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGet events by creation number\nGet events by event handle\nGeneral\nTables\nTransactions\nView\nEventsGet events by creation number\nGet events by creation number\nGET\n/accounts/:address/events/:creation_number\n\nEvent types are globally identifiable by an account address and monotonically increasing creation_number, one per event type emitted to the given account. This API returns events corresponding to that that event type.\n\nRequest​\n\nPATH PARAMETERS\n\naddress\nhex\nREQUIRED\n\nHex-encoded 32 byte Aptos account, with or without a 0x prefix, for which events are queried. This refers to the account that events were emitted to, not the account hosting the move module that emits that event type.\n\ncreation_number\nuint64\nREQUIRED\n\nCreation number corresponding to the event stream originating from the given account.\n\nQUERY PARAMETERS\n\nstart\nuint64\n\nStarting sequence number of events.\n\nIf unspecified, by default will retrieve the most recent events\n\nlimit\nuint16\n\nMax number of events to retrieve.\n\nIf unspecified, defaults to default page size\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nArray [\n\nversion\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nguid\n\nobject\n\nREQUIRED\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ntype\nMoveType (string)\nREQUIRED\n\nPossible values: Value must match regular expression ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$\n\nString representation of an on-chain Move type tag that is exposed in transaction payload. Values: - bool - u8 - u16 - u32 - u64 - u128 - u256 - address - signer - vector: vector<{non-reference MoveTypeId}> - struct: {address}::{module_name}::{struct_name}::<{generic types}>\n\nVector type value examples:\n  - `vector<u8>`\n  - `vector<vector<u64>>`\n  - `vector<0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>>`\n\nStruct type value examples:\n  - `0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n  - `0x1::account::Account`\n\nNote:\n  1. Empty chars should be ignored when comparing 2 struct tag ids.\n  2. When used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\ndata\nREQUIRED\n\nThe JSON representation of the event\n\n]\n\nLoading...\nPrevious\nEvents\nNext\nGet events by event handle\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-block-by-version",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nGet blocks by height\nGet blocks by version\nEvents\nGeneral\nTables\nTransactions\nView\nBlocksGet blocks by version\nGet blocks by version\nGET\n/blocks/by_version/:version\n\nThis endpoint allows you to get the transactions in a block and the corresponding block information given a version in the block.\n\nTransactions are limited by max default transactions size. If not all transactions are present, the user will need to query for the rest of the transactions via the get transactions API.\n\nIf the block has been pruned, it will return a 410\n\nRequest​\n\nPATH PARAMETERS\n\nversion\nuint64\nREQUIRED\n\nLedger version to lookup block information for.\n\nQUERY PARAMETERS\n\nwith_transactions\nboolean\n\nIf set to true, include all transactions in the block\n\nIf not provided, no transactions will be retrieved\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nblock_height\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nblock_hash\nHashValue (string)\nREQUIRED\nblock_timestamp\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nfirst_version\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nlast_version\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ntransactions\n\nobject[]\n\nLoading...\nPrevious\nGet blocks by height\nNext\nEvents\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Get blocks by height | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-block-by-height",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nGet blocks by height\nGet blocks by version\nEvents\nGeneral\nTables\nTransactions\nView\nBlocksGet blocks by height\nGet blocks by height\nGET\n/blocks/by_height/:block_height\n\nThis endpoint allows you to get the transactions in a block and the corresponding block information.\n\nTransactions are limited by max default transactions size. If not all transactions are present, the user will need to query for the rest of the transactions via the get transactions API.\n\nIf the block is pruned, it will return a 410\n\nRequest​\n\nPATH PARAMETERS\n\nblock_height\nuint64\nREQUIRED\n\nBlock height to lookup. Starts at 0\n\nQUERY PARAMETERS\n\nwith_transactions\nboolean\n\nIf set to true, include all transactions in the block\n\nIf not provided, no transactions will be retrieved\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nblock_height\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nblock_hash\nHashValue (string)\nREQUIRED\nblock_timestamp\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nfirst_version\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nlast_version\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\ntransactions\n\nobject[]\n\nLoading...\nPrevious\nBlocks\nNext\nGet blocks by version\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-account-module",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nGet account\nGet account resources\nGet account modules\nGet account resource\nGet account module\nBlocks\nEvents\nGeneral\nTables\nTransactions\nView\nAccountsGet account module\nGet account module\nGET\n/accounts/:address/module/:module_name\n\nRetrieves an individual module from a given account and at a specific ledger version. If the ledger version is not specified in the request, the latest ledger version is used.\n\nThe Aptos nodes prune account state history, via a configurable time window. If the requested ledger version has been pruned, the server responds with a 410.\n\nRequest​\n\nPATH PARAMETERS\n\naddress\nhex\nREQUIRED\n\nAddress of account with or without a 0x prefix\n\nmodule_name\nIdentifierWrapper\nREQUIRED\n\nName of module to retrieve e.g. coin\n\nQUERY PARAMETERS\n\nledger_version\nuint64\n\nLedger version to get state of account\n\nIf not provided, it will be the latest version\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nbytecode\nhex\nREQUIRED\n\nAll bytes (Vec) data is represented as hex-encoded string prefixed with 0x and fulfilled with two hex digits per byte.\n\nUnlike the Address type, HexEncodedBytes will not trim any zeros.\n\nabi\n\nobject\n\nLoading...\nPrevious\nGet account resource\nNext\nBlocks\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Get account resource | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-account-resource",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nGet account\nGet account resources\nGet account modules\nGet account resource\nGet account module\nBlocks\nEvents\nGeneral\nTables\nTransactions\nView\nAccountsGet account resource\nGet account resource\nGET\n/accounts/:address/resource/:resource_type\n\nRetrieves an individual resource from a given account and at a specific ledger version. If the ledger version is not specified in the request, the latest ledger version is used.\n\nThe Aptos nodes prune account state history, via a configurable time window. If the requested ledger version has been pruned, the server responds with a 410.\n\nRequest​\n\nPATH PARAMETERS\n\naddress\nhex\nREQUIRED\n\nAddress of account with or without a 0x prefix\n\nresource_type\nMoveStructTag\nREQUIRED\n\nPossible values: Value must match regular expression ^0x[0-9a-zA-Z:_<>]+$\n\nName of struct to retrieve e.g. 0x1::account::Account\n\nQUERY PARAMETERS\n\nledger_version\nuint64\n\nLedger version to get state of account\n\nIf not provided, it will be the latest version\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\ntype\nMoveStructTag (string)\nREQUIRED\n\nPossible values: Value must match regular expression ^0x[0-9a-zA-Z:_<>]+$\n\nString representation of a MoveStructTag (on-chain Move struct type). This exists so you can specify MoveStructTags as path / query parameters, e.g. for get_events_by_event_handle.\n\nIt is a combination of:\n\nmove_module_address, module_name and struct_name, all joined by ::\nstruct generic type parameters joined by ,\n\nExamples:\n\n0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n0x1::account::Account\n\nNote:\n\nEmpty chars should be ignored when comparing 2 struct tag ids.\nWhen used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\nSee doc for more details.\n\ndata\nobject\nREQUIRED\n\nThis is a JSON representation of some data within an account resource. More specifically, it is a map of strings to arbitrary JSON values / objects, where the keys are top level fields within the given resource.\n\nTo clarify, you might query for 0x1::account::Account and see the example data.\n\nMove bool type value is serialized into boolean.\n\nMove u8, u16 and u32 type value is serialized into integer.\n\nMove u64, u128 and u256 type value is serialized into string.\n\nMove address type value (32 byte Aptos account address) is serialized into a HexEncodedBytes string. For example:\n\n0x1\n0x1668f6be25668c1a17cd8caf6b8d2f25\n\nMove vector type value is serialized into array, except vector<u8> which is serialized into a HexEncodedBytes string with 0x prefix. For example:\n\nvector<u64>{255, 255} => [\"255\", \"255\"]\nvector<u8>{255, 255} => 0xffff\n\nMove struct type value is serialized into object that looks like this (except some Move stdlib types, see the following section):\n\n{\n  field1_name: field1_value,\n  field2_name: field2_value,\n  ......\n}\n\n\nFor example: { \"created\": \"0xa550c18\", \"role_id\": \"0\" }\n\nSpecial serialization for Move stdlib types:\n\n0x1::string::String is serialized into string. For example, struct value 0x1::string::String{bytes: b\"Hello World!\"} is serialized as \"Hello World!\" in JSON.\nLoading...\nPrevious\nGet account modules\nNext\nGet account module\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-account-modules",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nGet account\nGet account resources\nGet account modules\nGet account resource\nGet account module\nBlocks\nEvents\nGeneral\nTables\nTransactions\nView\nAccountsGet account modules\nGet account modules\nGET\n/accounts/:address/modules\n\nRetrieves all account modules' bytecode for a given account at a specific ledger version. If the ledger version is not specified in the request, the latest ledger version is used.\n\nThe Aptos nodes prune account state history, via a configurable time window. If the requested ledger version has been pruned, the server responds with a 410.\n\nRequest​\n\nPATH PARAMETERS\n\naddress\nhex\nREQUIRED\n\nAddress of account with or without a 0x prefix\n\nQUERY PARAMETERS\n\nledger_version\nuint64\n\nLedger version to get state of account\n\nIf not provided, it will be the latest version\n\nstart\nStateKeyWrapper\n\nCursor specifying where to start for pagination\n\nThis cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response.\n\nlimit\nuint16\n\nMax number of account modules to retrieve\n\nIf not provided, defaults to default page size.\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nArray [\n\nbytecode\nhex\nREQUIRED\n\nAll bytes (Vec) data is represented as hex-encoded string prefixed with 0x and fulfilled with two hex digits per byte.\n\nUnlike the Address type, HexEncodedBytes will not trim any zeros.\n\nabi\n\nobject\n\n]\n\nLoading...\nPrevious\nGet account resources\nNext\nGet account resource\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Get account resources | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-account-resources",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nGet account\nGet account resources\nGet account modules\nGet account resource\nGet account module\nBlocks\nEvents\nGeneral\nTables\nTransactions\nView\nAccountsGet account resources\nGet account resources\nGET\n/accounts/:address/resources\n\nRetrieves all account resources for a given account and a specific ledger version. If the ledger version is not specified in the request, the latest ledger version is used.\n\nThe Aptos nodes prune account state history, via a configurable time window. If the requested ledger version has been pruned, the server responds with a 410.\n\nRequest​\n\nPATH PARAMETERS\n\naddress\nhex\nREQUIRED\n\nAddress of account with or without a 0x prefix\n\nQUERY PARAMETERS\n\nledger_version\nuint64\n\nLedger version to get state of account\n\nIf not provided, it will be the latest version\n\nstart\nStateKeyWrapper\n\nCursor specifying where to start for pagination\n\nThis cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response.\n\nlimit\nuint16\n\nMax number of account resources to retrieve\n\nIf not provided, defaults to default page size.\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nArray [\n\ntype\nMoveStructTag (string)\nREQUIRED\n\nPossible values: Value must match regular expression ^0x[0-9a-zA-Z:_<>]+$\n\nString representation of a MoveStructTag (on-chain Move struct type). This exists so you can specify MoveStructTags as path / query parameters, e.g. for get_events_by_event_handle.\n\nIt is a combination of:\n\nmove_module_address, module_name and struct_name, all joined by ::\nstruct generic type parameters joined by ,\n\nExamples:\n\n0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\n0x1::account::Account\n\nNote:\n\nEmpty chars should be ignored when comparing 2 struct tag ids.\nWhen used in an URL path, should be encoded by url-encoding (AKA percent-encoding).\n\nSee doc for more details.\n\ndata\nobject\nREQUIRED\n\nThis is a JSON representation of some data within an account resource. More specifically, it is a map of strings to arbitrary JSON values / objects, where the keys are top level fields within the given resource.\n\nTo clarify, you might query for 0x1::account::Account and see the example data.\n\nMove bool type value is serialized into boolean.\n\nMove u8, u16 and u32 type value is serialized into integer.\n\nMove u64, u128 and u256 type value is serialized into string.\n\nMove address type value (32 byte Aptos account address) is serialized into a HexEncodedBytes string. For example:\n\n0x1\n0x1668f6be25668c1a17cd8caf6b8d2f25\n\nMove vector type value is serialized into array, except vector<u8> which is serialized into a HexEncodedBytes string with 0x prefix. For example:\n\nvector<u64>{255, 255} => [\"255\", \"255\"]\nvector<u8>{255, 255} => 0xffff\n\nMove struct type value is serialized into object that looks like this (except some Move stdlib types, see the following section):\n\n{\n  field1_name: field1_value,\n  field2_name: field2_value,\n  ......\n}\n\n\nFor example: { \"created\": \"0xa550c18\", \"role_id\": \"0\" }\n\nSpecial serialization for Move stdlib types:\n\n0x1::string::String is serialized into string. For example, struct value 0x1::string::String{bytes: b\"Hello World!\"} is serialized as \"Hello World!\" in JSON.\n\n]\n\nLoading...\nPrevious\nGet account\nNext\nGet account modules\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/get-account",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nGet account\nGet account resources\nGet account modules\nGet account resource\nGet account module\nBlocks\nEvents\nGeneral\nTables\nTransactions\nView\nAccountsGet account\nGet account\nGET\n/accounts/:address\n\nReturn the authentication key and the sequence number for an account address. Optionally, a ledger version can be specified. If the ledger version is not specified in the request, the latest ledger version is used.\n\nRequest​\n\nPATH PARAMETERS\n\naddress\nhex\nREQUIRED\n\nAddress of account with or without a 0x prefix\n\nQUERY PARAMETERS\n\nledger_version\nuint64\n\nLedger version to get state of account\n\nIf not provided, it will be the latest version\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nsequence_number\nuint64\nREQUIRED\n\nA string containing a 64-bit unsigned integer.\n\nWe represent u64 values as a string to ensure compatibility with languages such as JavaScript that do not parse u64s in JSON natively.\n\nauthentication_key\nhex\nREQUIRED\n\nAll bytes (Vec) data is represented as hex-encoded string prefixed with 0x and fulfilled with two hex digits per byte.\n\nUnlike the Address type, HexEncodedBytes will not trim any zeros.\n\nLoading...\nPrevious\nAccounts\nNext\nGet account resources\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/tutorials/Deploy/EVM%20Contracts/hardhatandfractal",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nFoundry and Fractal\nHardhat and Fractal\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nTutorialsDeployEVM ContractsHardhat and Fractal\nDeploying Solidity Contracts on Movement using Hardhat and Fractal\n\nThis tutorial will walk you through deploying a Solidity smart contract on Movement and Hardhat.\n\nOur toolkit​\nWhat is Hardhat?​\n\nHardhat is a powerful Javascript smart contract development toolchain for Ethereum Virtual Machines.\n\nWhat is Fractal?​\n\nFractal is Movement Labs' transpiler that allows any developer to deploy any Solidity smart contract on M1 a Move language based Virtual Machine, effectively turning Solidity code into Move code, inheriting all of the security properties natively available to Move smart contracts.\n\nPrerequisites​\n\nBefore you begin this tutorial, you'll need to install Hardhat\n\nFund your wallet with MOVE tokens​\n\nFund an EVM wallet address with some MOVE tokens using our faucet. Another method to get MOVE is to bridge from M1 to your EVM wallet using our bridge. To connect to our testnet and check if you have received the MOVE tokens, you can take the following steps:\n\nAdd the move-evm network to your EVM-compatible wallet.\nProperty\tValue\nNetwork Name\tmevm\nNetwork RPC\thttps://mevm.devnet.imola.movementlabs.xyz\nNetwork ID\t30732\nNetwork Currency\tMOVE\nEnsure you have switched your Wallet network to the network added above, i.e., move-evm.\nSetup your Hardhat Project​\n\nCreate your project directory:\n\nmkdir hardhat-move-evm\n\n\nAnd access it\n\ncd hardhat-move-evm\n\n\nInitiate your Hardhat project:\n\nnpx hardhat init\n\n\nGo through the steps and choose your preferences. Here we will be going through the defaults and choosing a javascript project. We named the project hardhat-move-evm.\n\nIf you have not accepted the dependency installation, please do so. If you are doing a custom installation, make sure you are using the correct dependencies:\n\nnpm install --save-dev \"hardhat@^2.19.0\" \"@nomicfoundation/hardhat-toolbox@^3.0.0\"\n\n\nMake sure to also install dotenv:\n\nnpm install dotenv\n\n\nOpen the project in your favorite editor. Here we are using VSCode\n\ncode .\n\n\nCreate an .env file\n\ntouch .env\n\n\nAdd your private key to the .env file. You can obtain your private key from your EVM wallet that you funded with MOVE. For example, if you are using MetaMask, you can find your private key by clicking the three vertical dots next to the account you want to export. Account details > Show private key > Enter your password > Confirm > Hold to reveal Private Key. Make sure to keep your private key safe and never share it with anyone.\n\nPRIVATE_KEY=<your private key>\n\nOn the root folder you will be able to find hardhat.config.js. This is the configuration file for hardhat. Add M1 network configurations by replacing its contents with the following:\n\nrequire(\"@nomicfoundation/hardhat-toolbox\");\nrequire('dotenv').config();\n\nmodule.exports = {\n  defaultNetwork: \"m1\",\n  networks: {\n    hardhat: {\n    },\n    m1: {\n      url: \"https://mevm.devnet.imola.movementlabs.xyz\",\n      accounts: [process.env.PRIVATE_KEY],\n      chainId: 30732\n    }\n  },\n  solidity: {\n    version: \"0.8.21\",\n    settings: {\n      optimizer: {\n        enabled: true,\n        runs: 200\n      }\n    }\n  },\n  paths: {\n    sources: \"./contracts\",\n    tests: \"./test\",\n    cache: \"./cache\",\n    artifacts: \"./artifacts\"\n  }\n}\n\nWrite your Solidity Smart Contract​\n\nHere we we will be introducing minimal changes to our contracts to make your life easier. There is nothing intrinsic here that is specific to our devnet. You can write your contracts as you would normally do.\n\nUnder contracts/ open the file Lock.sol. This is the Smart Contract that you will be deploying to M1. You can replace the contents of this file with your own contract.\n\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n    event Withdrawal(uint amount, uint when);\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n        emit Withdrawal(address(this).balance, block.timestamp);\n        owner.transfer(address(this).balance);\n    }\n}\n\n\nYou have a state variable unlockTime and one function, withdraw to withdraw the funds from the contract.\n\nNow, under scripts, open the file deploy.js. This is a simple script that we will use to deploy our contract on M1. You can replace the contents of this file with your own script.\n\n// We require the Hardhat Runtime Environment explicitly here. This is optional\n// but useful for running the script in a standalone fashion through `node <script>`.\n//\n// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat\n// will compile your contracts, add the Hardhat Runtime Environment's members to the\n// global scope, and execute the script.\nconst hre = require(\"hardhat\");\n\nasync function main() {\n  const currentTimestampInSeconds = Math.round(Date.now() / 1000);\n  const unlockTime = currentTimestampInSeconds + 60;\n\n  const lockedAmount = hre.ethers.parseEther(\"0.001\");\n\n  const lock = await hre.ethers.deployContract(\"Lock\", [unlockTime], {\n    value: lockedAmount,\n  });\n\n  await lock.waitForDeployment();\n\n  console.log(\n    `Lock with ${ethers.formatEther(\n      lockedAmount\n    )}ETH and unlock timestamp ${unlockTime} deployed to ${lock.target}`\n  );\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n\n\nThis will deploy the contract available at contracts/Lock.sol. You can tinker with it and change its logic, feel free to try things out!\n\nDeploy your Solidity Smart Contract​\n\nTo deploy your contract, run the following command:\n\nnpx hardhat run scripts/deploy.js --network m1\n\n\nAfter running it, you should see a similar message in your console:\n\nLock with 0.001ETH and unlock timestamp <currentTimestamp> deployed to <lockAddress>\n\n\nSuccess! You have successfully deployed your contract using Hardhat. You should now be able to interact with the contract provided by the message above.\n\nInteract with your Solidity Smart Contract​\n\nNow that you have your contract, you can also interact with it using Hardhat. To do so, we will write another script. Under script, create a new file withdraw.js and add the following contents:\n\n\n// We require the Hardhat Runtime Environment explicitly here. This is optional\n// but useful for running the script in a standalone fashion through `node <script>`.\n//\n// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat\n// will compile your contracts, add the Hardhat Runtime Environment's members to the\n// global scope, and execute the script.\nconst hre = require(\"hardhat\");\n\nasync function main() {\n    const lockAddress = \"<lockAddress>\";\n    console.log(`Lock address: ${lockAddress}`)\n    const [deployer] = await hre.ethers.getSigners();\n    console.log(`Deployer address: ${deployer.address}`);\n    const lockedAmount = await hre.ethers.provider.getBalance(lockAddress);\n    const currentBalance = await hre.ethers.provider.getBalance(deployer.address);\n    console.log(\n        `Current balance of ${deployer.address} is ${hre.ethers.formatEther(currentBalance)}ETH`\n    );\n    const lock = await hre.ethers.getContractAt(\"Lock\", lockAddress);\n\n    const tx = await lock.withdraw();\n    await tx.wait();\n\n    console.log(\n        `Withdrawn ${hre.ethers.formatEther(lockedAmount)}ETH from ${lockAddress} to ${deployer.address}`\n    );\n\n    const posBalance = await hre.ethers.provider.getBalance(deployer.address);\n\n    console.log(\n        `Balance after withdrawal of ${deployer.address} is ${hre.ethers.formatEther(posBalance)}ETH`\n    );\n    console.log(`sum of previous balance and withdrawn value: ${currentBalance + lockedAmount}`);\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n    console.error(error);\n    process.exitCode = 1;\n});\n\nWARNING\n\nMake sure to replace <lockAddress> with the address of your deployed contract. You can find it in the message printed in your console after deploying your contract.\n\nNow, all you have to do is run the following command:\n\nnpx hardhat run scripts/withdraw.js --network m1\n\n\nIf you are succesful, you should see the following message:\n\nBalance after withdrawal of <yourAddress> is <xValue> ETH\nsum of previous balance and withdrawn value: <xValue>\n\n\nThat's it! If you are used to deploying contract to EVM networks, this should feel like being at home. If you are not, we hope this tutorial was helpful and that you are now ready to work on your contract and deploy your own contracts and continue building on our devnet.\n\nFeel free to reach out to us on Discord if you have any issues, questions or feedback. We would love to hear from you!\n\nEdit this page\nPrevious\nFoundry and Fractal\nNext\nAptos Module\nOur toolkit\nWhat is Hardhat?\nWhat is Fractal?\nPrerequisites\nFund your wallet with MOVE tokens\nSetup your Hardhat Project\nWrite your Solidity Smart Contract\nDeploy your Solidity Smart Contract\nInteract with your Solidity Smart Contract\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Foundry and Fractal | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/tutorials/Deploy/EVM%20Contracts/foundryandfractal",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nFoundry and Fractal\nHardhat and Fractal\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nTutorialsDeployEVM ContractsFoundry and Fractal\nDeploying Solidity Contracts on Movement using Foundry and Fractal\n\nThis tutorial will walk you through deploying a Solidity smart contract on M1 using Fractal and Foundry.\n\nOur toolkit​\nWhat is Foundry?​\n\nFoundry is a powerful Solidity smart contract development toolchain for Ethereum Virtual Machines.\n\nWhat is Fractal?​\n\nFractal is Movement Labs' interpreter that allows any developer to deploy any Solidity smart contract on M1 a Move language based Virtual Machine, effectively turning Solidity code into Move code, inheriting all of the security properties natively available to Move smart contracts.\n\nPrerequisites​\n\nBefore you begin this tutorial, you'll need to Install Foundry\n\nFund your wallet with MOVE tokens​\n\nFund an EVM wallet address with some MOVE tokens using our faucet. Another method to get MOVE is to bridge from M1 to your EVM wallet using our bridge. To connect to our testnet and check if you have received the MOVE tokens, you can take the following steps:\n\nAdd the move-evm network to your EVM-compatible wallet.\nProperty\tValue\nNetwork Name\tmevm\nNetwork RPC\thttps://mevm.devnet.imola.movementlabs.xyz\nNetwork ID\t30732\nNetwork Currency\tMOVE\nEnsure you have switched your Wallet network to the network added above, i.e., move-evm.\nSetup your Foundry project​\n\nIf you don't have a specific directory for your project, create one and access it:\n\nmkdir foundry-move-evm\n\ncd foundry-move-evm\n\n\nOpen it in your favorite editor. Here we are using VSCode\n\ncode .\n\n\nInitiate your Foundry project. This will create a foundry.toml, a README.md and a few folders, lib, script, src and test.\n\nforge init\n\n\nCreate an .env file\n\ntouch .env\n\n\nAdd your private key to the .env file. You can obtain your private key from your EVM wallet that you funded with MOVE. For example, if you are using MetaMask, you can find your private key by clicking the three vertical dots next to the account you want to export. Account details > Show private key > Enter your password > Confirm > Hold to reveal Private Key. Make sure to keep your private key safe and never share it with anyone.\n\nPRIVATE_KEY=<your private key>\n\nWrite your Solidity contract​\n\nHere we we will be introducing minimal changes to our contracts to make your life easier. There is nothing intrinsic here that is specific to our devnet. You can write your contracts as you would normally do.\n\nUnder src/ open the file Counter.sol. This is the Smart Contract that you will be deploying to M1. You can replace the contents of this file with your own contract.\n\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\ncontract Counter {\n    uint256 public number;\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n    }\n    function increment() public {\n        number++;\n    }\n}\n\n\nYou have a state variable number and two functions, setNumber and increment to set the value of number and increment it respectively.\n\nNow, under script, open the file Counter.s.sol. This is a simple script that we will use to deploy our contract on M1. You can replace the contents of this file with your own script.\n\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\nimport {Script} from \"forge-std/Script.sol\";\nimport {Counter} from \"../src/Counter.sol\";\ncontract CounterScript is Script {\n    Counter public counter;\n    uint256 public deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n    function run() public {\n        vm.startBroadcast(deployerPrivateKey);\n        counter = new Counter();\n        vm.stopBroadcast();\n    }\n}\n\n\nThis will deploy the contract available at src/Counter.sol. You can tinker with it and change its logic, feel free to try things out!\n\nDeploy your Solidity contract​\n\nTo deploy your contract, run the following command:\n\nforge script CounterScript --broadcast --chain-id 30732 --rpc-url https://mevm.devnet.imola.movementlabs.xyz --legacy\n\n\nAfter running it, you should see a similar message in your console:\n\n## Setting up (1) EVMs.\n\n(...)\n\n##### move-evm\n✅  [Success]Hash: <transactionHash>\nContract Address: <contractAddress>\nBlock: 27547820\nPaid: 0.002988132 ETH (106719 gas * 28 gwei)\n\n\nTransactions saved to: /home/user/test/broadcast/Counter.s.sol/30732/run-latest.json\n\nSensitive values saved to: /home/user/test/cache/Counter.s.sol/30732/run-latest.json\n\n\n\n==========================\n\nONCHAIN EXECUTION COMPLETE & SUCCESSFUL.\nTotal Paid: 0.002988132 ETH (106719 gas * avg 28 gwei)\n\nTransactions saved to: /home/user/test/broadcast/Counter.s.sol/30732/run-latest.json\n\nSensitive values saved to: /home/user/test/cache/Counter.s.sol/30732/run-latest.json\n\n\nSuccess! You have successfully deployed your contract using Foundry. You should now be able to interact with the contract provided by the message above.\n\nInteract with your Solidity contract​\n\nNow that you have your contract, you can also interact with it using Foundry. To do so, we will write another script. Under script, create a new file Interact.s.sol and add the following contents:\n\n\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\nimport {Script} from \"forge-std/Script.sol\";\nimport {Counter} from \"../src/Counter.sol\";\nimport \"forge-std/console.sol\";\ncontract InteractScript is Script {\n    Counter public counter;\n    uint256 public deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n    function run() public {\n        vm.startBroadcast(deployerPrivateKey);\n        counter = Counter(<counterAddress>);\n        counter.setNumber(1);\n        console.log(\"Number is now: \", counter.number());\n        counter.increment();\n        console.log(\"Number was incremented to: \", counter.number());\n        vm.stopBroadcast();\n    }\n}\n\n\nWARNING\n\nMake sure to replace <counterAddress> with the address of your deployed contract. You can find it in the message printed in your console after deploying your contract.\n\nNow, all you have to do is run the following command:\n\nforge script InteractScript --broadcast --chain-id 30732 --rpc-url https://mevm.devnet.imola.movementlabs.xyz\n\n\nIf you are successful, you should see the following message:\n\n(...)\n\nCompiler run successful!\nScript ran successfully.\n\n== Logs ==\n  Number is now:  1\n  Number was incremented to:  2\n\n(...)\n\n\nThat's it! If you are used to deploying contract to EVM networks, this should feel like being at home. If you are not, we hope this tutorial was helpful and that you are now ready to work on your contract and deploy your own contracts and continue building on our devnet.\n\nFeel free to reach out to us on Discord if you have any issues, questions or feedback. We would love to hear from you!\n\nEdit this page\nPrevious\nEVM Contracts\nNext\nHardhat and Fractal\nOur toolkit\nWhat is Foundry?\nWhat is Fractal?\nPrerequisites\nFund your wallet with MOVE tokens\nSetup your Foundry project\nWrite your Solidity contract\nDeploy your Solidity contract\nInteract with your Solidity contract\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "FAQ | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/faq",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nFAQ\nFAQ\n\nFrequently asked questions about working with Movement as a developer.\n\nWhat is Movement Labs?​\n\nMovement Labs makes the Move programming language accessible across the entire modular blockchain ecosystem. By bringing the Move Virtual Machine (MoveVM) to Ethereum through its innovative MEVM (Move + EVM) Layer 2, Movement Labs is creating a secure, scalable, developer-friendly blockchain infrastructure combining the best aspects of modular and monolithic architectures.\n\nIs Mainnet/Testnet/Devnet live?​\n\nCurrently we are live on testnet and the latest information on networks can be found here.\n\nWhy are there three different endpoints for each language?​\n\nThe Movement Network is a single L2 built with different environments. During our devnet and testnet phases these are currently on separate networks but as we continue building towards mainnet and beyond we plan to consolidate these into a single network.\n\nHow do I get started building?​\n\nOur getting started guide will help you through finding exactly what you need in order to start building on Movement.\n\nHow can I get help?​\n\nMake sure to join our Discord and get yourself a developer role. You can ask any questions you have in dev-chat where someone in the community or our Developer Relations team will be able to answer your questions.\n\nEdit this page\nPrevious\nSolidity dApp\nWhat is Movement Labs?\nIs Mainnet/Testnet/Devnet live?\nWhy are there three different endpoints for each language?\nHow do I get started building?\nHow can I get help?\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/tutorials/Build%20dApp/solidity",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nTutorialsBuild dAppSolidity dApp\nSolidity dApp\n\nIn this guide for Solidity developers, you'll learn how easy it is to create an Aptos dApp React frontend and configure your dApp for Movement Network.\n\nRequirements​\n\nMake sure to have Foundry installed. If using Hardhat, have in mind that you will need to add custom chains.\n\nSetup​\n\nWe will bootstrap our dApp the following with the command provided by Scaffold-ETH.\n\nnpx create-eth@latest\n\n\nOnce you have executed the npx create-eth@latest command in your terminal, follow the on-screen instructions to configure your Solidity dApp. You have the option to choose Foundry or Hardhat. We will use Foundry. Choose to install dependencies.\n\nNavigate to your dApp's directory and launch your preferred Integrated Development Environment (IDE). In this guide, we will be using Visual Studio Code (VS Code).\n\ncd your-dapp-name\ncode .\n\n\nWithin the project directory, you will encounter several folders and files. Our focus will primarily be on the following:\n\npackages/foundry\npackages/nextjs\nDeploying a Smart Contract with MEVM​\n\nFirst, it will require some configuration. Navigate to packages/foundry/foundry.toml and change its content to the following:\n\n[profile.default]\nsrc = 'contracts'\nout = 'out'\nlibs = ['lib']\nfs_permissions = [{ access = \"read-write\", path = \"./\"}]\n\n[rpc_endpoints]\nmevm = \"https://mevm.testnet.m1.movementlabs.xyz\"\n\n\nNext, in packages/foundry/.env add a private key to the variable DEPLOYER_PRIVATE_KEY. Make sure to fund it with MOVE from our Faucet.\n\nFinally, remove YourContract's unwanted logging features.\n\n//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * A smart contract that allows changing a state variable of the contract and tracking the changes\n * It also allows the owner to withdraw the Ether in the contract\n * @author BuidlGuidl\n */\ncontract YourContract {\n    // State Variables\n    address public immutable owner;\n    string public greeting = \"Building Unstoppable Apps!!!\";\n    bool public premium = false;\n    uint256 public totalCounter = 0;\n    mapping(address => uint256) public userGreetingCounter;\n\n    // Events: a way to emit log statements from smart contract that can be listened to by external parties\n    event GreetingChange(\n        address indexed greetingSetter,\n        string newGreeting,\n        bool premium,\n        uint256 value\n    );\n\n    // Constructor: Called once on contract deployment\n    // Check packages/foundry/deploy/Deploy.s.sol\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    // Modifier: used to define a set of rules that must be met before or after a function is executed\n    // Check the withdraw() function\n    modifier isOwner() {\n        // msg.sender: predefined variable that represents address of the account that called the current function\n        require(msg.sender == owner, \"Not the Owner\");\n        _;\n    }\n\n    /**\n     * Function that allows anyone to change the state variable \"greeting\" of the contract and increase the counters\n     *\n     * @param _newGreeting (string memory) - new greeting to save on the contract\n     */\n    function setGreeting(string memory _newGreeting) public payable {\n        // Print data to the anvil chain console. Remove when deploying to a live network.\n\n        greeting = _newGreeting;\n        totalCounter += 1;\n        userGreetingCounter[msg.sender] += 1;\n\n        // msg.value: built-in global variable that represents the amount of ether sent with the transaction\n        if (msg.value > 0) {\n            premium = true;\n        } else {\n            premium = false;\n        }\n\n        // emit: keyword used to trigger an event\n        emit GreetingChange(msg.sender, _newGreeting, msg.value > 0, 0);\n    }\n\n    /**\n     * Function that allows the owner to withdraw all the Ether in the contract\n     * The function can only be called by the owner of the contract as defined by the isOwner modifier\n     */\n    function withdraw() public isOwner {\n        (bool success, ) = owner.call{value: address(this).balance}(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n\n    /**\n     * Function that allows the contract to receive ETH\n     */\n    receive() external payable {}\n}\n\n\n\nNow you can run the following command to deploy the prebuilt contract that comes with Scaffold-ETH:\n\nyarn deploy --network mevm\n\n\nIt should give you a YourContract deployment address which should write to a file that Scaffold-ETH will take and use to generate a Front End for!\n\nConfigure Your dApp for MEVM​\n\nHead to packages/nextjs/scaffold.config.ts and change targetNetworks to [chain.mevm]:\n\nimport * as chains from \"viem/chains\";\nimport { type Chain } from \"viem\"\n\nexport type ScaffoldConfig = {\n  targetNetworks: readonly chains.Chain[];\n  pollingInterval: number;\n  alchemyApiKey: string;\n  walletConnectProjectId: string;\n  onlyLocalBurnerWallet: boolean;\n  walletAutoConnect: boolean;\n};\n\nexport const mevm = {\n  id: 30732,\n  name: \"M1 MEVM\",\n  network: \"mevm\",\n  nativeCurrency: { name: \"Move\", symbol: \"MOVE\", decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: [\"https://mevm.devnet.imola.movementlabs.xyz\"],\n    },\n    public: {\n      http: [\"https://mevm.devnet.imola.movementlabs.xyz\"],\n    },\n  },\n  blockExplorers: {\n    etherscan: { name: \"Arbiscan\", url: \"https://explorer.testnet.imola.movementlabs.xyz\" },\n    default: { name: \"Arbiscan\", url: \"https://explorer.testnet.imola.movementlabs.xyz\" },\n  },\n  contracts: {\n    multicall3: {\n      address: \"0xD67Eca381AAbd0c049554f5714E7d8C21864c560\",\n      blockCreated: 500,\n    },\n  },\n} as const satisfies Chain\n\n\nconst scaffoldConfig = {\n  targetNetworks: [mevm],\n  pollingInterval: 30000,\n  alchemyApiKey: process.env.NEXT_PUBLIC_ALCHEMY_API_KEY || \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\",\n  walletConnectProjectId: process.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID || \"3a8170812b534d0ff9d794f19a901d64\",\n  onlyLocalBurnerWallet: true,\n  walletAutoConnect: true,\n} as const satisfies ScaffoldConfig;\nexport default scaffoldConfig;\n\n\nSweet, you are pretty much setup. Now you can run the following command to start your dApp:\n\nyarn start\n\n\nAccess your dApp at https://localhost:3000. Ensure MEVM is added to Metamask or your chosen EVM wallet to access all contract functions via http://localhost:3000/debug\n\nExperiment with function calls and value queries.\n\nWhat dApps will you build on Movement?​\n\nNow you know how to configure a Solidity dApp for MEVM. Check out YourContract logic, try a redeployment by tinkering with it. As a challenge, try modifying the Front End to display the user's greeting and counter! We can't wait to see what dApps you build and deploy to Movement Network!\n\nEdit this page\nPrevious\nSui Move dApp\nNext\nFAQ\nRequirements\nSetup\nDeploying a Smart Contract with MEVM\nConfigure Your dApp for MEVM\nWhat dApps will you build on Movement?\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/tutorials/Build%20dApp/aptos",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nTutorialsBuild dAppAptos Move dApp\nAptos Move dApp\n\nIn this guide, we will learn how to build an end-to-end \"onchain bio\" dApp. We'll start with the Move contract. Then we'll build a React frontend and let wallets connect and register a bio.\n\nRequirements​\n\nMake sure to have Aptos CLI installed.\n\nView an example of the finished dApp here.\n\nInitialize your Environment​\n\nInitialize your Aptos profile for your package development and add Movement as a custom network. Movement is our current blockchain that supports Aptos deployments.\n\naptos init --network custom --rest-url https://aptos.testnet.suzuka.movementlabs.xyz/v1\n\nSetup​\n\nCreate a new directory and navigate into it:\n\nmkdir my-onchain-bio && cd my-onchain-bio\n\n\nOpen a code editor so you can see your dApp's file structure. Here we'll use VS Code:\n\ncode .\n\nCreating and publishing the Onchain Bio smart contract​\n\nNow that our environment is set up, let's write some code, starting with the Move contract!\n\nFirst, create a move directory and navigate into it:\n\nmkdir move && cd move\n\n\nThen create a move project, containing code for an onchain package:\n\naptos move init --name my_todo_list\n\n\nYour file structure should now look like this:\n\nCreating a Move Module​\n\nCreate a new file named onchain_bio.move within the sources directory and add the following to that file:\n\nmodule onchain_bio_addr::onchain_bio {\n  use std::string::{String};\n  use std::signer;\n\n  struct Bio has key, store, drop {\n      name: String,\n      bio: String,\n  }\n  \n  #[view]\n  public fun signature() : address {\n      @<address>\n  }\n\n  public entry fun register(account: &signer, name: String, bio: String) acquires Bio {\n    // Check if a Bio already exists for the account\n    if (exists<Bio>(signer::address_of(account))) {\n      // Remove the existing Bio\n      let _old_Bio = move_from<Bio>(signer::address_of(account));\n    };\n    // Create the new Bio\n    let bio = Bio {\n      name,\n      bio,\n    };\n    // Store the new Bio under the account\n    move_to<Bio>(account, bio);\n  }\n}\n\n\nNext, let's deploy to testnet!\n\nDeploying the Module to Movement's Testnetwork​\n\nFirst, from within the move directory, initialize your Movement Aptos configuration:\n\naptos init\n\n\nWhen prompted to choose a network, enter custom.\n\nThen enter the following REST endpoint:\n\nhttps://aptos.testnet.suzuka.movementlabs.xyz/v1\n\n\nAnd the same URL for faucet endpoint.\n\nWhen asked for a private key, press Enter to generate a new keypair.\n\nUpon successful initialization, you'll see the success message (with your own account instead of the one below):\n\nNo key given, generating key...\nAccount 0x39883cbc29500a8bf79911ea1469e1c3b58104547a88fb0fbdf17470f80b2a91 doesn't exist, creating it and funding it with 100000000 Octas\nAccount 0x39883cbc29500a8bf79911ea1469e1c3b58104547a88fb0fbdf17470f80b2a91 funded successfully\n\n---\nAptos CLI is now set up for account 0x39883cbc29500a8bf79911ea1469e1c3b58104547a88fb0fbdf17470f80b2a91 as profile default!  Run `aptos --help` for more information about commands\n{\n  \"Result\": \"Success\"\n}\n\n\nNow your move directory will contain a hidden .aptos folder containing a config.yaml file. You can view the contents of that file to see your private and public keys.\n\nIn the line under [addresses] in Move.toml, add your account address:\n\nonchain_bio_addr = \"<your-account-address>\"\n\n\nAfter compiling, you'll see a result message formatted like this:\n\n{\n  \"Result\": [\n    \"39883cbc29500a8bf79911ea1469e1c3b58104547a88fb0fbdf17470f80b2a91::onchain_bio\"\n  ]\n}\n\n\nNow you can publish the package:\n\nmovement aptos move publish\n\n\nAfter confirming that the price is okay, your transaction will be submitted to the blockchain.\n\nYou'll get a result formatted like this, with values associated with your transaction:\n\n{\n  \"Result\": {\n    \"transaction_hash\": \"0x37ea722ad4f1ff0d8d0710965a47354cc903579d38b659d90c4286ddab946151\",\n    \"gas_used\": 1236,\n    \"gas_unit_price\": 100,\n    \"sender\": \"39883cbc29500a8bf79911ea1469e1c3b58104547a88fb0fbdf17470f80b2a91\",\n    \"sequence_number\": 0,\n    \"success\": true,\n    \"timestamp_us\": 1707748417269022,\n    \"version\": 248,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n\n\nCongratulations! Your module is now deployed.\n\nLet's shift over to the frontend.\n\nBuilding a React app for users to register and view their onchain bio​\n\nNavigate to the root of our project directory:\n\ncd ..\n\n\nCreate a new React app named client:\n\nnpx create-react-app client --template typescript\n\n\nAt the root of your project, you'll have two directories: client and move.\n\ncd into the client directory and run npm start.\n\nYour app should now be running on http://localhost:3000, displaying the default React layout.\n\nYour apps files are in the client/src directory.\n\nReplace the code in Index.tsx with the following:\n\nimport { PetraWallet } from \"petra-plugin-wallet-adapter\";\nimport { AptosWalletAdapterProvider } from \"@aptos-labs/wallet-adapter-react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport './index.css';\nconst wallets = [new PetraWallet()];\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <AptosWalletAdapterProvider plugins={wallets} autoConnect={true}>\n      <App />\n    </AptosWalletAdapterProvider>\n  </React.StrictMode>,\n);\nreportWebVitals();\n\n\nThis wraps our app in the <AptosWalletAdapterProvider /> tag so we can connect a wallet. To add support for more wallets, see the Aptos Wallet Adapter README.\n\nNow replace your App.tsx code with the following:\n\n\nimport { WalletSelector } from \"@aptos-labs/wallet-adapter-ant-design\";\nimport \"@aptos-labs/wallet-adapter-ant-design/dist/index.css\";\nimport { useRef, useState, useEffect } from \"react\";\nimport { useWallet, InputTransactionData } from '@aptos-labs/wallet-adapter-react';\nimport { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\nimport { ONCHAIN_BIO } from \"./constants\";\nimport './index.css';\n\n// with custom configuration\nconst aptosConfig = new AptosConfig({ network: Network.CUSTOM });\nconst aptos = new Aptos(aptosConfig);\n\nfunction App() {\n  const { signAndSubmitTransaction, account } = useWallet();\n  const name = useRef<HTMLInputElement>(null);\n  const bio = useRef<HTMLTextAreaElement>(null);\n\n  const [accountHasBio, setAccountHasBio] = useState(false);\n  const [currentName, setCurrentName] = useState(null);\n  const [currentBio, setCurrentBio] = useState(null);\n\n  const fetchBio = async () => {\n    if (!account) {\n      console.log(\"No account\")\n      return [];\n    }\n  \n    try {\n      const bioResource = await aptos.getAccountResource(\n        {\n          accountAddress:account?.address,\n          resourceType:`${ONCHAIN_BIO}::onchain_bio::Bio`\n        }\n      );\n      console.log(\"Name:\", bioResource.name, \"Bio:\", bioResource.bio);\n      setAccountHasBio(true);\n      if (bioResource) {\n        setCurrentName(bioResource.name);\n        setCurrentBio(bioResource.bio);\n      } else {\n        console.log(\"no bio\")\n      }\n    } catch (e: any) {\n      setAccountHasBio(false);\n    }\n  };\n\n  async function registerBio() {\n    if (bio.current !== null && name.current !== null) { \n      const onchainName = name.current.value;\n      const onchainBio = bio.current.value;\n      const transaction: InputTransactionData = {\n        data: {\n          function:`${ONCHAIN_BIO}::onchain_bio::register`,\n          functionArguments:[onchainName, onchainBio]\n        }\n      }\n      try {\n        // sign and submit transaction to chain\n        const response = await signAndSubmitTransaction(transaction);\n        // wait for transaction\n        console.log(`Success! View your transaction at https://explorer.movementlabs.xyz/txn/${response.hash}`)\n        await aptos.waitForTransaction({transactionHash:response.hash});\n        fetchBio();\n      } catch (error: any) {\n        console.log(\"Error:\", error)\n      }\n    }\n  }\n\n  return (\n    <>\n      <div className=\"navbar\">\n        <div className=\"navbar-text\">Your Onchain Bio</div>\n        <div>\n          <WalletSelector />\n        </div>\n      </div>\n      <div className=\"center-container\">\n        \n        <div className=\"row\">\n          <h1>You Onchain Bio</h1>\n        </div>\n\n        <div className=\"row\">\n          <h3>Your name:</h3>\n        </div>\n        <div className=\"row\">\n          <input ref={name} type=\"text\" className=\"name\" placeholder=\"Enter your name\"/>\n        </div>\n\n        <div className=\"row\">\n          <h3>Your Bio:</h3>\n        </div>\n        <div className=\"row\">\n          <textarea ref={bio} className=\"bio\" placeholder=\"Your onchain bio\"\n          />\n        </div>\n\n        <div className=\"row\">\n          <button onClick={registerBio}>Register Bio</button>\n        </div>\n\n        <div className=\"row\">\n          <button onClick={fetchBio}>Fetch Bio</button>\n        </div>\n\n\n        <div className=\"row\">\n          <center>\n            <h3>Your Name:</h3>\n            <p>{currentName}</p>\n          </center>\n        </div>\n\n        <div className=\"row\">\n          <center>\n            <h3>Your Bio:</h3>\n            <p>{currentBio}</p>\n          </center>\n        </div>\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n\n\nLastly replace the code in the index.css\n\n:root {\n    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n    line-height: 1.5;\n    font-weight: 400;\n  \n    font-synthesis: none;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-text-size-adjust: 100%;\n  }\n  body {\n    margin: 0;\n  }\n  \n  h1, h3 {\n    margin-bottom: 5px;\n  }\n  h3 {\n    margin-top: 0;\n  }\n  \n  .navbar {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #333;\n    color: #fff;\n    padding: 10px 20px;\n  }\n  \n  .navbar-text {\n    font-size: 20px;\n  }\n  \n  .center-container {\n    display: flex;\n    flex-direction: column;\n    \n    align-items: center;\n    height: 100vh; /* Adjust this to control vertical centering */\n  }\n  \n  .row {\n    display: flex;\n    justify-content: center;\n  }\n  \n  .name {\n    margin-bottom: 10px;\n    width: 200px;\n  }\n  \n  .bio {\n    margin-bottom: 10px;\n    width: 300px;\n    height: 200px;\n    resize: vertical; \n  }\n\n\nYour locally-running app should now look like this:\n\nFeel free to style the app however you prefer.\n\nUsing your App​\n\nTo use the dApp, first configure an Aptos wallet to testnet.\n\nHead over to the Movement Faucet and fund your wallet.\n\nEnter a name and bio. Click the Register Bio button. The wallet should pop up for you to sign. After the transaction has been submitted to the blockchain, you'll see your onchain bio information updated:\n\nWhat dApps will you build on Movement?​\n\nNow you know how to deploy an Aptos dApp for testnet.\n\nCheck out onchain_bio.move logic, try a redeployment by tinkering with it. As a challenge, try modifying the Front End to better display your name and bio!\n\nWe can't wait to see what dApps you build and deploy to Movement Network!\n\nEdit this page\nPrevious\nBuild dApp\nNext\nSui Move dApp\nRequirements\nInitialize your Environment\nSetup\nCreating and publishing the Onchain Bio smart contract\nCreating a Move Module\nDeploying the Module to Movement's Testnetwork\nBuilding a React app for users to register and view their onchain bio\nUsing your App\nWhat dApps will you build on Movement?\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Sui Move dApp | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/tutorials/Build%20dApp/sui",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nTutorialsBuild dAppSui Move dApp\nSui Move dApp\n\nIn this guide for Sui developers, you'll learn how easy it is to create a Sui dApp React frontend and configure your dApp for Movement Network.\n\nRequirements​\n\nMake sure to have Sui CLI installed.\n\nView an example of the finished dApp here.\n\nInitialize your Environment​\n\nInitialize your Sui profile for your package development and add M2 as a custom network. M2 is our current blockchain that supports Sui deployments.\n\nsui client new-env --rpc https://sui.devnet.m2.movementlabs.xyz:443 --alias m2\n\n\nNow Switch to the M2 environtment\n\nsui client switch --env m2\n\nSetup​\n\nWe will bootstrap our dapp with the following command provided by Mysten Labs:\n\nnpm create @mysten/dapp\n\n\nWhen you're prompted to choose a starter template, select react-e2e-counter.\n\nNavigate into your dApp's folder and open it in an editor. Here we are using VS Code.\n\ncd your-dapp-name\ncode .\n\nPublish the Smart Contract​\n\nNavigate into the move/counter directory and switch your Sui environment to M2:\n\ncd move/counter\nmovement sui client new-env --rpc https://sui.devnet.m2.movementlabs.xyz:443 --alias m2\nmovement sui client switch --env m2\n\n\nNow you can publish your counter.move module:\n\nmovement sui client publish --gas-budget 20000000\n\n\nOnce the package is published, get its ID from Transaction Data under Object Changes > Published Objects.\n\nConfigure the Frontend​\n\nNavigate back into your project's root directory and launch your app:\n\ncd ~\nnpm run dev\n\n\nYour dApp will appear in your browser:\n\nConfigure your Sui dApp for Movement M2​\n\nIn constants.ts, begin by export M2_COUNTER_PACKAGE_ID using the package ID from the publishing step:\n\nexport const DEVNET_COUNTER_PACKAGE_ID = \"0xTODO\";\nexport const MAINNET_COUNTER_PACKAGE_ID = \"0xTODO\";\nexport const M2_COUNTER_PACKAGE_ID = \"<your-counter-package-ID>\";\n\n\nNow add M2_COUNTER_PACKAGE_ID At the top of networkConfig.ts, and Movement Network's M2 network configuration containing the package ID and its RPC.\n\nimport {\n  DEVNET_COUNTER_PACKAGE_ID,\n  MAINNET_COUNTER_PACKAGE_ID,\n  M2_COUNTER_PACKAGE_ID\n} from \"./constants.ts\";\n\nconst { networkConfig, useNetworkVariable, useNetworkVariables } =\n  createNetworkConfig({\n    devnet: {\n      url: getFullnodeUrl(\"devnet\"),\n      variables: {\n        counterPackageId: DEVNET_COUNTER_PACKAGE_ID,\n      },\n    },\n    mainnet: {\n      url: getFullnodeUrl(\"mainnet\"),\n      variables: {\n        counterPackageId: MAINNET_COUNTER_PACKAGE_ID,\n      },\n    },\n    m2: {\n      url: \"https://sui.devnet.m2.movementlabs.xyz:443\",\n      variables: {\n        counterPackageId: M2_COUNTER_PACKAGE_ID,\n      },\n    },\n  });\n\n\nNow you can set the default network to M2 in main.tsx!\n\n<SuiClientProvider networks={networkConfig} defaultNetwork=\"m2\">\n\nUsing your counter dApp​\n\nTo use the dApp, first configure a Sui wallet to M2.\n\nHead over to the Movement Faucet and fund your M2 testnet wallet.\n\nNow the fun part! Connect your wallet to your dApp and create a counter!\n\nYou (and anyone else) can increment it and only you can reset it back to 0.\n\nNow you know how to configure a Sui Move dApp for M2.\n\nCheck out CreateCounter.tsx, Counter.tsx and counter.move to understand the app's frontend and onchain logic. As a challenge, try modifying it to increment by 2 each time a user increments.\n\nWe can't wait to see what dApps you build and deploy to Movement Network!\n\nEdit this page\nPrevious\nAptos Move dApp\nNext\nSolidity dApp\nRequirements\nInitialize your Environment\nSetup\nPublish the Smart Contract\nConfigure the Frontend\nConfigure your Sui dApp for Movement M2\nUsing your counter dApp\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Oracles | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/oracles",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nOracles\nOracles\nMEVM​\n\nThis document explains how to use real-time Pyth data in EVM contracts on the Movement testnet. For an interactive playground to explore the methods supported by the Pyth contract, see the EVM API reference.\n\nPyth Deployment on Movement Testnet​\n\nThe Pyth deployment address on the Movement testnet is: 0xA2aa501b19aff244D90cc15a4Cf739D2725B5729\n\nInstall Pyth SDK​\n\nPyth provides a Solidity SDK to fetch prices from Pyth contracts. The SDK exposes the IPyth interface to interact with Pyth price feeds.\n\nTruffle/Hardhat​\n\nIf you are using Truffle or Hardhat, simply install the NPM package:\n\nnpm install @pythnetwork/pyth-sdk-solidity\n\nFoundry​\n\nIf you are using Foundry, you will need to create an NPM project if you don't already have one. From the root directory of your project, run:\n\nnpm init -y\nnpm install @pythnetwork/pyth-sdk-solidity\n\n\nThen add the following line to your remappings.txt file:\n\n@pythnetwork/pyth-sdk-solidity/=node_modules/@pythnetwork/pyth-sdk-solidity\n\nWrite Contract Code​\n\nThe code snippet below provides a general template for what your contract code should look like:\n\npragma solidity ^0.8.0;\n\nimport \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\";\nimport \"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\";\n\ncontract PythExample {\n    IPyth public pyth;\n\n    /**\n     * @param pythContract The address of the Pyth contract on the Movement testnet\n     */\n    constructor(address pythContract) {\n        // The IPyth interface from pyth-sdk-solidity provides the methods to interact with the Pyth contract.\n        // Instantiate it with the Pyth contract address.\n        pyth = IPyth(pythContract);\n    }\n\n    /**\n     * This method is an example of how to interact with the Pyth contract.\n     * Fetch the priceUpdate and pass it to the Pyth contract to update the prices.\n     * Add the priceUpdate argument to any method on your contract that needs to read the Pyth price.\n     * See https://docs.pyth.network/price-feeds/fetch-price-updates for more information on how to fetch the priceUpdate.\n     *\n     * @param priceUpdate The encoded data to update the contract with the latest price\n     */\n    function updatePriceAndFetch(bytes[] calldata priceUpdate) public payable {\n        // Submit a priceUpdate to the Pyth contract to update the on-chain price.\n        // Updating the price requires paying the fee returned by getUpdateFee.\n        // WARNING: These lines are required to ensure the getPrice call below succeeds. If you remove them, transactions may fail with \"0x19abf40e\" error.\n        uint fee = pyth.getUpdateFee(priceUpdate);\n        pyth.updatePriceFeeds{ value: fee }(priceUpdate);\n\n        // Read the current price from a price feed.\n        // Each price feed (e.g., ETH/USD) is identified by a price feed ID.\n        // The complete list of feed IDs is available at https://pyth.network/developers/price-feed-ids\n        bytes32 priceFeedId = 0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace; // ETH/USD\n        PythStructs.Price memory price = pyth.getPrice(priceFeedId);\n        \n        // Use the price as needed in your contract\n        // Example: emit an event with the price\n        emit PriceUpdated(price.price, price.conf);\n    }\n\n    // Event to emit the updated price\n    event PriceUpdated(int64 price, uint64 conf);\n}\n\nInstructions to Use​\n\nInstall the Pyth SDK:\n\nFor Truffle/Hardhat:\nnpm install @pythnetwork/pyth-sdk-solidity\n\nFor Foundry:\nnpm init -y\nnpm install @pythnetwork/pyth-sdk-solidity\n\nAdd to remappings.txt:\n@pythnetwork/pyth-sdk-solidity/=node_modules/@pythnetwork/pyth-sdk-solidity\n\n\nDeploy the Contract:\n\nEnsure you pass the Pyth contract address on the Movement testnet (0xA2aa501b19aff244D90cc15a4Cf739D2725B5729) to the constructor when deploying.\n\nFetch and Update Prices:\n\nUse the updatePriceAndFetch function to submit a price update and read the latest price from the Pyth contract.\n\nThis snippet includes the instantiation of the IPyth interface, updates the price feeds, and fetches the current price for a given price feed ID. You can customize the updatePriceAndFetch function as needed for your application.\n\nAptos & Sui Move​\n\nThe Pyth smart contract is deployed on both Aptos and Sui Move on the Movement chain on these addresses:\n\nNamed Address\tTestnet Value\tDevnet Value\npyth\t0x9357e76fe965c9956a76181ee49f66d51b7f9c3800182a944ed96be86301e49f\t0x9357e76fe965c9956a76181ee49f66d51b7f9c3800182a944ed96be86301e49f\nwormhole\t0x9236893d6444b208b7e0b3e8d4be4ace90b6d17817ab7d1584e46a33ef5c50c9\t0x9236893d6444b208b7e0b3e8d4be4ace90b6d17817ab7d1584e46a33ef5c50c9\ndeployer\t0xa3ad2d9c8114b9a4fe97d45b7a9d3c731148d936b0f5dd396fc20a53a11a70da\t0xa3ad2d9c8114b9a4fe97d45b7a9d3c731148d936b0f5dd396fc20a53a11a70da\nEdit this page\nPrevious\nIndexers\nNext\nTutorials\nMEVM\nPyth Deployment on Movement Testnet\nInstall Pyth SDK\nTruffle/Hardhat\nFoundry\nWrite Contract Code\nInstructions to Use\nAptos & Sui Move\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/indexing",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nIndexers\nIndexers\n\nThere are three main components to indexing with the Movement Network. We first have the Suzuka full node which provides a gRPC stream of transactions. The gRPC stream of transactions is consumed by the Transaction Streaming Service which includes the following components:\n\nCache Worker: Pulls transactions from the node and stores them in Redis.\n\nFile Store: Fetches transactions from Redis and stores them in a filesystem.\n\nIndexer API: Consumes the data-service providing a GraphQL API to dApps and other clients wishing to query the network.\n\nThe Indexer API also allows the development of customized processors.\n\nRunning the Transaction Streaming Service​\n\nThe following guides from Aptos are provided: Aptos Documentation\n\nIndexing Suzuka - Future Plans​\n\nMovement Labs plans to provide a hosted Transaction Stream Service in the near future. In the meantime, anyone wishing to index the Movement network would need to self-host their own Transaction Streaming Service.\n\nProviding a GraphQL API​\n\nWith the Data Service running, the Indexer API can be configured to consume it as per the following repository to provide a GraphQL API to downstream clients:\n\nMovement Labs plans to provide GraphQL APIs for all of its networks in the near future.\n\nData Service: Serves transactions via a gRPC stream to downstream clients. It pulls from either the cache or the file store depending on the age of the transaction.\n\nEdit this page\nPrevious\nNetwork Endpoints\nNext\nOracles\nRunning the Transaction Streaming Service\nIndexing Suzuka - Future Plans\nProviding a GraphQL API\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/networkEndpoints",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nNetwork Endpoints\nNetwork Endpoints\nAptos Environment​\n\nThe Aptos Environment is currently accessible through the Suzuka Testnet.\n\nService\tURL\nRPC\thttps://aptos.testnet.suzuka.movementlabs.xyz/v1\nFaucet UI\thttps://faucet.movementlabs.xyz/?network=aptos\nFaucet endpoint\thttps://faucet.testnet.suzuka.movementlabs.xyz/\nExplorer\thttps://explorer.movementnetwork.xyz/?network=testnet\nAptos Devnet Environment​\n\nWe often test updates on our Suzuka devnet before pushing to testnet, you can deploy your modules and test on our devnet with the details below.\n\nService\tURL\nRPC\thttps://devnet.suzuka.movementnetwork.xyz/v1\nFaucet endpoint\thttps://faucet.devnet.suzuka.movementnetwork.xyz/\nExplorer\thttps://explorer.suzuka.movementnetwork.xyz/?network=devnet\nEVM Environment​\n\nThe MEVM environment is currently accessible through the Imola Devnet.\n\nService\tURL\nRPC\thttps://mevm.devnet.imola.movementlabs.xyz\nFaucet UI\thttps://faucet.movementlabs.xyz/?network=mevm\nChain ID\t30732\nExplorer\thttps://explorer.devnet.imola.movementlabs.xyz\nIndexer\thttps://aptos.devnet.imola.movementlabs.xyz/indexer/v1/graphql\nSubgraph RPC\thttps://mevm2.devnet.imola.movementlabs.xyz/\nSui Environment​\n\nThe Sui environment is currently accessible through the Baku Devnet.\n\nService\tURL\nRPC\thttps://devnet.baku.movementlabs.xyz\nFaucet UI\thttps://faucet.movementlabs.xyz/?network=sui\nExplorer\thttps://explorer.devnet.baku.movementlabs.xyz\nNetwork Properties​\n\tAptos Suzuka Testnet\tAptos Suzuka Devnet\tMEVEM Imola Devnet\tSui Baku Devnet\nValidators\tMovement Labs operated validators\tPermissionless + Movement Labs operated validators.\tNA\tNA\nFull Nodes\tMovement Labs operated nodes\tPermissionless + Movement Labs operated nodes\tMovement Labs operated nodes\tMovement Labs operated nodes\nData Durability\tData wipes will be announced ahead of time.\tData can be wiped as part of the regular software updates.\tData could be wiped.\tData can be wiped.\nAnnouncement Channel\tDiscord\tDiscord\tDiscord\tDiscord\nNetwork Uptime\tConstant uptime.\tExpect down time happens.\tExpect down time happens.\tExpect down time happens.\nEdit this page\nPrevious\nMovement CLI\nNext\nIndexers\nAptos Environment\nAptos Devnet Environment\nEVM Environment\nSui Environment\nNetwork Properties\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement CLI | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/movementcli",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nMovement CLI\nMovement CLI\n\nMovement CLI supports Aptos Move natively. Here are the instructions to install and use Movement CLI:\n\nInstall Movement CLI​\n\ngit clone https://github.com/movementlabsxyz/aptos-core/ && cd aptos-core\n\ncargo build -p movement (generates the target/debug/movement executable)\n\nCopy movement into your bin or add it to your PATH depending on your system config.\n\nFor example, to copy movement to bin on Mac or Linux:\n\nsudo cp target/debug/movement /usr/local/bin/\n\nUse Movement CLI​\n\nMovement CLI commands are analogous to those of Aptos CLI. Simply replace aptos with movement.\n\nSo aptos move build becomes movement move build.\n\nFor help within the CLI tool:\n\nmovement --help\n\n\nor\n\nmovement <subcommand> --help\n\n\nDevelopers who would like to contribute or read the source code, please see the Movement CLI crate.\n\nEdit this page\nPrevious\nYour First Move Contract\nNext\nNetwork Endpoints\nInstall Movement CLI\nUse Movement CLI\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/firstmove",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nYour First Move Contract\nYour First Move Contract\n\nWelcome to your first journey in deploying a Move module (smart contract) on the Movement Labs Testnet. In the Move programming language, smart contracts are referred to as modules. This guide will walk you through each step, ensuring a smooth experience from setup to deployment.\n\nPrerequisites​\n\nBefore we begin, ensure you have one of the following command-line interfaces (CLIs) installed:\n\nMovement CLI: Installation Guide\nAptos CLI: Installation Guide\n\nThis tutorial uses the Movement CLI, but the commands are identical for the Aptos CLI—just replace movement with aptos in the commands. If you're using the Aptos CLI, you'll need to configure it for a custom network during the initialization process.\n\nStep 1: Initialize the CLI​\n\nOpen your command prompt or terminal and navigate to the directory where you want to create your project. Then, initialize the CLI with the following command:\n\nmovement init --skip-faucet\n\nINFO\n\nDue to current network load, we have restricted the faucet API to only accept requests from a Web UI. You must include the --skip-faucet flag. The CLI cannot fund the account immediately, so it will not create an account for you automatically.\n\nCLI Prompts​\n\nChoose Network\n\nYou'll be prompted to select a network:\n\nChoose network from [devnet, testnet, local, custom | defaults to devnet]:\n\n\nType testnet and press Enter.\n\nINFO\n\nNote for Aptos CLI Users: Choose custom and configure the values found here.\n\nEnter Private Key\n\nNext, you'll be asked to enter your private key:\n\nEnter your private key as a hex literal (0x...) [Current: None | No input: Generate new key (or keep one if present)]:\n\nIf you have an existing private key, enter it now.\nIf not, simply press Enter to generate a new one.\nInitialization Success​\n\nAfter completing the prompts, you should see a message like:\n\nMovement CLI is now set up for account 0xYOUR_ACCOUNT_ADDRESS as profile default!\nSee the account here: https://explorer.movementlabs.xyz/account/0xYOUR_ACCOUNT_ADDRESS?network=testnet\nRun `movement --help` for more information about commands\n{\n  \"Result\": \"Success\"\n}\n\nStep 2: Fund Your Account​\n\nBefore deploying contracts, you'll need testnet tokens.\n\nCopy Your Account Address\n\nMake note of your account address from the initialization success message (e.g., 0xYOUR_ACCOUNT_ADDRESS).\n\nVisit the Faucet\n\nGo to the Movement Labs Web Faucet to fund your account.\n\nRequest Tokens\n\nPaste your account address into the faucet and request testnet tokens.\n\nStep 3: Explore the Configuration​\n\nYour project directory now contains a hidden .movement folder with a config.yaml file:\n\n.movement/\n└── config.yaml\n\n\nThis configuration file stores information about your default profile, including your private key and network settings.\n\n---\nprofiles:\n  default:\n    network: Testnet\n    private_key: \"YOUR_PRIVATE_KEY\"\n    public_key: \"YOUR_PUBLIC_KEY\"\n    account: \"YOUR_ACCOUNT_ADDRESS\"\n    rest_url: \"https://aptos.testnet.suzuka.movementlabs.xyz/v1/\"\n    faucet_url: \"https://faucet.testnet.suzuka.movementlabs.xyz/\"\n\nWARNING\n\nWarning: Do not commit config.yaml to version control systems like GitHub, as it contains your private key!\n\nStep 4: Scaffold the Project​\n\nNow, let's set up the structure for your Move module.\n\nInitialize the Move Project​\n\nRun the following command:\n\nmovement move init --name hello_blockchain\n\n\nThis command creates the necessary folders and files for your Move project:\n\nMove.toml\nSources/\nScripts/\nTests/\n\nMove.toml: Configuration file for your Move project.\nSources/: Directory where you'll write your Move modules.\nScripts/: Directory for transaction scripts (optional).\nTests/: Directory for writing unit tests.\nStep 5: Write Your First Module​\nCreate the Module File​\n\nNavigate to the Sources/ directory and create a new file named hello_blockchain.move:\n\ncd Sources\ntouch hello_blockchain.move\n\nAdd the Module Code​\n\nOpen hello_blockchain.move in your preferred text editor and paste the following code:\n\nmodule hello_blockchain::message {\n    use std::error;\n    use std::signer;\n    use std::string::{String, utf8};\n    use aptos_framework::account;\n    use aptos_framework::event;\n\n    struct MessageHolder has key {\n        message: String,\n        message_change_events: event::EventHandle<MessageChangeEvent>,\n    }\n\n    struct MessageChangeEvent has drop, store {\n        from_message: String,\n        to_message: String,\n    }\n\n    /// Error code indicating no message is present.\n    const ENO_MESSAGE: u64 = 0;\n\n    #[view]\n    public fun signature(): address {\n        @hello_blockchain\n    }\n\n    #[view]\n    public fun get_message(addr: address): String acquires MessageHolder {\n        assert!(exists<MessageHolder>(addr), error::not_found(ENO_MESSAGE));\n        borrow_global<MessageHolder>(addr).message\n    }\n\n    public entry fun set_message(account: signer, message: String) acquires MessageHolder {\n        let account_addr = signer::address_of(&account);\n        if (!exists<MessageHolder>(account_addr)) {\n            move_to(&account, MessageHolder {\n                message,\n                message_change_events: account::new_event_handle<MessageChangeEvent>(&account),\n            });\n        } else {\n            let message_holder = borrow_global_mut<MessageHolder>(account_addr);\n            let from_message = message_holder.message;\n            event::emit_event(&mut message_holder.message_change_events, MessageChangeEvent {\n                from_message,\n                to_message: copy message,\n            });\n            message_holder.message = message;\n        }\n    }\n\n    #[test(account = @0x1)]\n    public entry fun sender_can_set_message(account: signer) acquires MessageHolder {\n        let addr = signer::address_of(&account);\n        aptos_framework::account::create_account_for_test(addr);\n        set_message(account, utf8(b\"Hello, Blockchain\"));\n\n        assert!(\n            get_message(addr) == utf8(b\"Hello, Blockchain\"),\n            ENO_MESSAGE\n        );\n    }\n\n    #[test]\n    public fun signature_okay() {\n        assert!(signature() == @hello_blockchain, ENO_MESSAGE);\n    }\n}\n\nINFO\n\nThis is a \"Hello, Blockchain\" module written in Move. We won't dive into the syntax and functionality in this tutorial.\n\nStep 6: Compile the Module​\n\nLet's compile your module to ensure everything is set up correctly.\n\nOption 1: Without Editing Move.toml​\n\nIf you haven't modified the Move.toml file, run:\n\nmovement move compile --named-addresses hello_blockchain=default\n\nOption 2: By Editing Move.toml​\n\nTo simplify future commands, you can add your account address to Move.toml.\n\nOpen Move.toml and add:\n\n[addresses]\nhello_blockchain = \"0xYOUR_ACCOUNT_ADDRESS\"\n\n\nCompile without Extra Flags\n\nNow, you can compile with:\n\nmovement move compile\n\nExpected Output​\n\nIf the compilation is successful, you'll see something like:\n\n{\n  \"Result\": [\n    \"a345dbfb0c94416589721360f207dcc92ecfe4f06d8ddc1c286f569d59721e5a::message\"\n  ]\n}\n\n\nStep 7: Test the Module​\n\nYour module includes unit tests. Let's run them to ensure everything works as expected.\n\nRun Tests​\nmovement move test\n\n\nNote: If you didn't edit Move.toml, add the --named-addresses flag:\n\nmovement move test --named-addresses hello_blockchain=default\n\nExpected Output​\n\nYou should see output similar to:\n\nRunning Move unit tests\n[ PASS    ] 0x4bb138fa05ea42faa44268b30872ed6e5a84f25f8718bcac981a6de36a090e3a::message::sender_can_set_message\n[ PASS    ] 0x4bb138fa05ea42faa44268b30872ed6e5a84f25f8718bcac981a6de36a090e3a::message::signature_okay\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n{\n  \"Result\": \"Success\"\n}\n\nStep 8: Publish the Module​\n\nNow it's time to deploy your module to the Movement Labs Testnet.\n\nPublish Command​\n\nIf you edited Move.toml:\n\nmovement move publish\n\n\nIf you didn't edit Move.toml:\n\nmovement move publish --named-addresses hello_blockchain=default\n\nConfirm Deployment Cost​\n\nYou'll be prompted to confirm the transaction and spend a small amount of testnet tokens:\n\nDo you want to submit this transaction? [Y/n]\n\n\nType Y and press Enter.\n\nEnsure you have sufficient testnet tokens from the faucet before proceeding.\n\nExpected Output​\n\nUpon successful deployment, you'll receive a confirmation:\n\nTransaction submitted: https://explorer.movementlabs.xyz/txn/0xTRANSACTION_HASH?network=testnet\n{\n  \"Result\": {\n    \"transaction_hash\": \"0xTRANSACTION_HASH\",\n    \"gas_used\": 1696,\n    \"gas_unit_price\": 100,\n    \"sender\": \"0xYOUR_ACCOUNT_ADDRESS\",\n    \"sequence_number\": 0,\n    \"success\": true,\n    \"timestamp_us\": 1726483247259754,\n    \"version\": 183468408,\n    \"vm_status\": \"Executed successfully\"\n  }\n}\n\nStep 9: Interact with Your Contract​\n\nCongratulations! You've successfully deployed your first Move module on the Movement Labs Testnet.\n\nView Your Module: Visit the provided transaction link to see details on the explorer.\nInteract: Use the Movement CLI or write scripts to interact with your deployed module.\nRecap​\n\nIn this tutorial, you've:\n\nInstalled and initialized the Movement CLI.\nFunded your testnet account.\nScaffolded a new Move project.\nWritten and compiled a Move module.\nRan unit tests to ensure functionality.\nDeployed your module to the testnet.\n\nWe're excited to see you continue on journey into the Move language!\n\nHappy coding!\n\nEdit this page\nPrevious\nGetting Started\nNext\nMovement CLI\nPrerequisites\nStep 1: Initialize the CLI\nCLI Prompts\nInitialization Success\nStep 2: Fund Your Account\nStep 3: Explore the Configuration\nStep 4: Scaffold the Project\nInitialize the Move Project\nStep 5: Write Your First Module\nCreate the Module File\nAdd the Module Code\nStep 6: Compile the Module\nOption 1: Without Editing Move.toml\nOption 2: By Editing Move.toml\nExpected Output\nStep 7: Test the Module\nRun Tests\nExpected Output\nStep 8: Publish the Module\nPublish Command\nConfirm Deployment Cost\nExpected Output\nStep 9: Interact with Your Contract\nRecap\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/view",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nView\nExecute view function of a module\nView\nExecute view function of a module\nPOST\n/view\n\nExecute the Move function with the given parameters and return its execution result.\n\nThe Aptos nodes prune account state history, via a configurable time window. If the requested ledger version has been pruned, the server responds with a 410.\n\nRequest​\n\nQUERY PARAMETERS\n\nledger_version\nuint64\n\nLedger version to get state of account\n\nIf not provided, it will be the latest version\n\nAPPLICATION/JSON\nAPPLICATION/X.APTOS.VIEW_FUNCTION+BCS\n\nBODY\n\nREQUIRED\n\nfunction\nEntryFunctionId (string)\nREQUIRED\n\nEntry function id is string representation of a entry function defined on-chain.\n\nFormat: {address}::{module name}::{function name}\n\nBoth module name and function name are case-sensitive.\n\ntype_arguments\nMoveType (string)[]\nREQUIRED\n\nPossible values: Value must match regular expression ^(bool|u8|u64|u128|address|signer|vector<.+>|0x[0-9a-zA-Z:_<, >]+)$\n\nType arguments of the function\n\narguments\nundefined[]\nREQUIRED\n\nArguments of the function\n\nResponses​\n200\n400\n403\n404\n410\n500\n503\n\nResponse Headers\n\nAPPLICATION/JSON\nAPPLICATION/X-BCS\nSchema\nExample (from schema)\n\nSCHEMA\n\nArray [\n\nanyOf\n\nMOD1\nMOD2\nMOD3\nU64\nU128\nU256\nMOD7\nAddress\nMOD9\nHexEncodedBytes\nMoveStructValue\nMOD12\n\ninteger\n\n]\n\nLoading...\nPrevious\nEstimate gas price\nNext\nExecute view function of a module\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Transactions | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/transactions",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nGet transactions\nSubmit transaction\nGet transaction by hash\nWait for transaction by hash\nGet transaction by version\nGet account transactions\nSubmit batch transactions\nSimulate transaction\nEncode submission\nEstimate gas price\nView\nTransactions\nTransactions\n\nAccess to transactions\n\n📄️ Get transactions\n\nRetrieve on-chain committed transactions. The page size and start ledger version\n\n📄️ Submit transaction\n\nThis endpoint accepts transaction submissions in two formats.\n\n📄️ Get transaction by hash\n\nLook up a transaction by its hash. This is the same hash that is returned\n\n📄️ Wait for transaction by hash\n\nSame as /transactions/by_hash, but will wait for a pending transaction to be committed. To be used as a long\n\n📄️ Get transaction by version\n\nRetrieves a transaction by a given version. If the version has been\n\n📄️ Get account transactions\n\nRetrieves on-chain committed transactions from an account. If the start\n\n📄️ Submit batch transactions\n\nThis allows you to submit multiple transactions. The response has three outcomes:\n\n📄️ Simulate transaction\n\nThe output of the transaction will have the exact transaction outputs and events that running\n\n📄️ Encode submission\n\nThis endpoint accepts an EncodeSubmissionRequest, which internally is a\n\n📄️ Estimate gas price\n\nGives an estimate of the gas unit price required to get a transaction on chain in a\n\nPrevious\nGet raw table item\nNext\nGet transactions\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Tables | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/tables",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nGet table item\nGet raw table item\nTransactions\nView\nTables\nTables\n\nAccess to tables\n\n📄️ Get table item\n\nGet a table item at a specific ledger version from the table identified by {table_handle}\n\n📄️ Get raw table item\n\nGet a table item at a specific ledger version from the table identified by {table_handle}\n\nPrevious\nGet ledger info\nNext\nGet table item\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/general",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nShow OpenAPI explorer\nCheck basic node health\nGet ledger info\nTables\nTransactions\nView\nGeneral\nGeneral\n\nGeneral information\n\n📄️ Show OpenAPI explorer\n\nProvides a UI that you can use to explore the API. You can also\n\n📄️ Check basic node health\n\nBy default this endpoint just checks that it can get the latest ledger\n\n📄️ Get ledger info\n\nGet the latest ledger information, including data such as chain ID,\n\nPrevious\nGet events by event handle\nNext\nShow OpenAPI explorer\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/events",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGet events by creation number\nGet events by event handle\nGeneral\nTables\nTransactions\nView\nEvents\nEvents\n\nAccess to events\n\n📄️ Get events by creation number\n\nEvent types are globally identifiable by an account `address` and\n\n📄️ Get events by event handle\n\nThis API uses the given account `address`, `eventHandle`, and `fieldName`\n\nPrevious\nGet blocks by version\nNext\nGet events by creation number\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Blocks | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/blocks",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nGet blocks by height\nGet blocks by version\nEvents\nGeneral\nTables\nTransactions\nView\nBlocks\nBlocks\n\nAccess to blocks\n\n📄️ Get blocks by height\n\nThis endpoint allows you to get the transactions in a block\n\n📄️ Get blocks by version\n\nThis endpoint allows you to get the transactions in a block\n\nPrevious\nGet account module\nNext\nGet blocks by height\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Accounts | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/accounts",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nGet account\nGet account resources\nGet account modules\nGet account resource\nGet account module\nBlocks\nEvents\nGeneral\nTables\nTransactions\nView\nAccounts\nAccounts\n\nAccess to accounts, resources, and modules\n\n📄️ Get account\n\nReturn the authentication key and the sequence number for an account\n\n📄️ Get account resources\n\nRetrieves all account resources for a given account and a specific ledger version. If the\n\n📄️ Get account modules\n\nRetrieves all account modules' bytecode for a given account at a specific ledger version.\n\n📄️ Get account resource\n\nRetrieves an individual resource from a given account and at a specific ledger version. If the\n\n📄️ Get account module\n\nRetrieves an individual module from a given account and at a specific ledger version. If the\n\nPrevious\nIntroduction\nNext\nGet account\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/category/tutorials",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nTutorials\nTutorials\n\nTutorials for building on Movement\n\n🗃️ Deploy\n\n3 items\n\n🗃️ Build dApp\n\n3 items\n\nPrevious\nOracles\nNext\nDeploy\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Sui Module | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/tutorials/Deploy/suimodule",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nTutorialsDeploySui Module\nSui Module\n\n🚀 Your First Sui Module on Devnet\n\nINFO\n\nYou may see Sui devnet referred to as m2. Note that this is a legacy devnet and as we work to move away from devnet this naming convention will no longer be used.\n\nRequirements​\n\nMake sure to have Sui CLI installed.\n\nInitialize your Environment​\n\nInitialize your Sui profile for your package development and add M2 as a custom network. M2 is our current blockchain that supports Sui deployments.\n\nsui client new-env --rpc https://sui.devnet.m2.movementlabs.xyz:443 --alias m2\n\n\nNow switch to the M2 environment:\n\nsui client switch --env m2\n\n\nYou can now create a new sui move project with the following command:\n\nsui move new hello_world\n\n\nThis will give you a folder to access into:\n\ncd hello_world\n\n\nOpen it in your favorite editor:\n\ncode .\n\n\nCreate your move file:\n\ntouch sources/hello_world.move\n\n\nNow you have the following folder structure:\n\n/ sources\n    hello_world.move\nMove.toml\n\n\n\nInside hello_world.move you can paste the following code:\n\n\n#[lint_allow(self_transfer)]\n\nmodule hello_world::hello_world {\n\n    use std::string;\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n\n    struct HelloWorldObject has key, store {\n        id: UID,\n        text: string::String\n    }\n    \n    public fun signature() : address {\n        @<address>\n    }\n\n    public fun mint(ctx: &mut TxContext) {\n        let object = HelloWorldObject {\n            id: object::new(ctx),\n            text: string::utf8(b\"Hello World!\")\n        };\n        transfer::public_transfer(object, tx_context::sender(ctx));\n    }\n\n}\n\n\n\nAfter building your project, you can deploy it to the devnet:\n\nsui client publish --gas-budget 20000000\n\n\nThe object ID under the Published Objects section is the ID of your module. You can now call the mint function on your module with that object ID:\n\nsui client call --function mint --module hello_world --package <package object ID> --gas-budget 10000000\n\n\nDon't forget to replace <package object ID> with the object ID of your module from previous console output!\n\nCongratulations! You have just written, published, and executed your first SuiMove module on the testnet!\n\nEdit this page\nPrevious\nAptos Module\nNext\nBuild dApp\nRequirements\nInitialize your Environment\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Aptos Module | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/tutorials/Deploy/aptosmodule",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nTutorialsDeployAptos Module\nAptos Module\n\n🚀 Your First Aptos Module on M1 using Movement CLI\n\nRequirements​\n\nEnsure you have the Aptos CLI installed.\n\nInitialize Your Environment​\n\nInitialize your Aptos profile for package development and add Movement as a custom network:\n\naptos init --network custom --rest-url https://aptos.testnet.suzuka.movementlabs.xyz/v1\n\n\nInitialize your Move project:\n\naptos move init --name hello_blockchain\n\n\nIf you generated your project using the movementdev/movement-hack template, your project should have the following structure:\n\n.gitignore\n/.movement\n    config.yaml\n/ sources\n    hello_blockchain.move\n    hello_blockchain_test.move\nMove.toml\n\n\n\nThe hello_blockchain.move file contains a simple module for setting the value of a message resource. If you don’t have this file, you can create it by copying the following code into a new file inside the sources directory called hello_blockchain.move.\n\nmodule hello_blockchain::message {\n    use std::error;\n    use std::signer;\n    use std::string::{utf8, String};\n    use aptos_framework::account;\n    use aptos_framework::event;\n\n    struct MessageHolder has key {\n        message: String,\n        message_change_events: event::EventHandle<MessageChangeEvent>,\n    }\n\n    struct MessageChangeEvent has drop, store {\n        from_message: String,\n        to_message: String,\n    }\n\n    /// Error code indicating no message is present\n    const ENO_MESSAGE: u64 = 0;\n\n    #[view]\n    public fun signature(): address {\n        @<address>\n    }\n\n    #[view]\n    public fun get_message(addr: address): String acquires MessageHolder {\n        assert!(exists<MessageHolder>(addr), error::not_found(ENO_MESSAGE));\n        borrow_global<MessageHolder>(addr).message\n    }\n\n    public entry fun set_message(account: signer, message: String) acquires MessageHolder {\n        let account_addr = signer::address_of(&account);\n        if (!exists<MessageHolder>(account_addr)) {\n            move_to(&account, MessageHolder {\n                message,\n                message_change_events: account::new_event_handle<MessageChangeEvent>(&account),\n            });\n        } else {\n            let old_message_holder = borrow_global_mut<MessageHolder>(account_addr);\n            let from_message = old_message_holder.message;\n            event::emit_event(&mut old_message_holder.message_change_events, MessageChangeEvent {\n                from_message,\n                to_message: copy message,\n            });\n            old_message_holder.message = message;\n        }\n    }\n\n    #[test(account = @0x1)]\n    public entry fun sender_can_set_message(account: signer) acquires MessageHolder {\n        let addr = signer::address_of(&account);\n        aptos_framework::account::create_account_for_test(addr);\n        set_message(account, utf8(b\"Hello, Blockchain\"));\n\n        assert!(get_message(addr) == utf8(b\"Hello, Blockchain\"), ENO_MESSAGE);\n    }\n\n    #[test]\n    public fun signature_okay() {\n        assert!(signature() == @<address>, ENO_MESSAGE);\n    }\n}\n\n\n\nYou will also need to add the following to `Move.toml`.\n```toml\n[package]\nname = \"hello_blockchain\"\nversion = \"0.0.1\"\n\n[dependencies]\nAptosFramework = { git = \"https://github.com/aptos-labs/aptos-core.git\", subdir = \"aptos-move/framework/aptos-framework\", rev = \"main\" }\n\n[addresses]\nstd = \"0x1\"\n\n\n\nNow you need to setup your config.yaml file. This will setup a private key for your environment. Choose testnet during setup!\n\n\naptos init\n\n\n\nRun the tests with the aptos CLI\n\naptos move test --named-addresses hello_blockchain=default\n\n\nIf your test has passed, you can now publish your module to the testnet.\n\naptos move publish --named-addresses hello_blockchain=default\n\n\nMake sure to accept the transaction in the prompt. You can now check the status of your transaction using the Movement CLI.\n\nAfterwards, you can run the module on the testnet. You are going to set the message to \"hello!\".\n\naptos move run --function-id default::message::set_message --args string:hello!\n\n\nMake sure to check the resources of the account you used to publish the module. You should see a MessageHolder resource.\n\naptos account list --query resources --account default\n\n\nYou can now check the message of the account.\n\naptos move run --function-id default::message::get_message --args address:default\n\n\nCongratulations! You have just written, published, and executed your first Move module on the testnet!\n\nEdit this page\nPrevious\nHardhat and Fractal\nNext\nSui Module\nRequirements\nInitialize Your Environment\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "EVM Contracts | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/category/evm-contracts",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nFoundry and Fractal\nHardhat and Fractal\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nTutorialsDeployEVM Contracts\nEVM Contracts\n\nDeployment Tutorials for EVM\n\n📄️ Foundry and Fractal\n\nThis tutorial will walk you through deploying a Solidity smart contract on M1 using Fractal and Foundry.\n\n📄️ Hardhat and Fractal\n\nThis tutorial will walk you through deploying a Solidity smart contract on Movement and Hardhat.\n\nPrevious\nDeploy\nNext\nFoundry and Fractal\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/general/UsingMovement/explorers",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nUsing The Movement NetworkExplorers\nExplorers\n\nThe Block Explorers are listed below for each testnetwork environment\n\nAptos​\n\nhttps://explorer.movementnetwork.xyz/?network=testnet\n\nSui​\n\nhttps://explorer.devnet.baku.movementlabs.xyz/\n\nMEVM​\n\nhttps://explorer.devnet.imola.movementlabs.xyz\n\nEdit this page\nPrevious\nFaucets\nAptos\nSui\nMEVM\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Faucets | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/general/UsingMovement/faucet",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nUsing The Movement NetworkFaucets\nFaucets\n\nThe easiest way to get Testnet MOVE\n\nINFO\n\nMOVE refers to the native token across our networks. At the moment they are distinct in nature and requires conversion and/or different faucets.\n\nHow to Get Move​\nAptos​\n\nFaucet UI: https://faucet.movementlabs.xyz/?network=aptos\n\nEVM​\n\nFaucet UI: https://faucet.movementlabs.xyz/?network=mevm\n\nSui​\n\nFaucet UI: https://faucet.movementlabs.xyz/?network=sui\n\nFor developers: You can also use our CLI for additional functionalities.\n\nEdit this page\nPrevious\nConnect To Movement\nNext\nExplorers\nHow to Get Move\nAptos\nEVM\nSui\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Connect To Movement | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/general/UsingMovement/connect_to_movement",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nUsing The Movement NetworkConnect To Movement\nConnect To Movement\n\nThis guide will show you how to use blockchains on the movement network. Everything from setting up the wallet to connecting to the chain, getting testnet tokens from the faucet, and using the explorer will be covered in this guide.\n\nLet’s start by installing a wallet. We recommend using Razor and Nightly, which work on Chrome, Brave, Opera, Edge, and other Chromium-based browsers.\n\nInstall the Chrome extension for Razor from this link and Nightly here.\n\nTIP\n\nSkip the setup and get more information about our network endpoints here.\n\nMake sure to pin your wallet in the extension tab on the top right\n\nWallet Setup​\n\nFollow the instructions to set up the wallet.\n\nRazor​\n\nStep 1: Welcome to Razor Wallet\n\nOpen the Razor Wallet application or extension.\nYou will be greeted with the welcome screen.\nRead and agree to the Terms of Service by checking the box.\nClick on the “Start” button.\n\nStep 2: Secret Recovery Phrase\n\nThe next screen will present you with your Secret Recovery Phrase. This is a critical step in setting up your wallet. Click on “Create a new wallet”\nEnsure you write down the 12-word phrase and store it securely. Do not share it with anyone.\nClick on “I have saved my secret phrase” after you have safely noted it down.\n\nStep 3: Create a Password\n\nYou will now be prompted to create a password for your Razor wallet.\nEnter a strong password and confirm it by entering it again.\nClick on the “Proceed” button.\n\nStep 4: Welcome to Razor Wallet Dashboard\n\nAfter setting up your password, you will see the Razor Wallet dashboard upon clicking the extension.\n\n\n\n\nNightly​\n\nStep 1: Welcome to Nightly Wallet\n\nOpen the Nightly Wallet application or extension.\nYou will be greeted with the welcome screen.\nClick on the “Start your journey with Nightly!” button.\n\nStep 2: Set Password\n\nYou will now be prompted to create a password for your Nightly wallet after you create a new wallet.\nEnter a strong password and confirm it by entering it again.\nClick on the “Next” button.\n\n\n\n\nStep 3: Your Secret Phrase\n\nThe next screen will present you with your Secret Recovery Phrase. This is a critical step in setting up your wallet.\nEnsure you write down the 12-word phrase and store it securely. Do not share it with anyone.\nClick on “Next” after you have safely noted it down.\n\nStep 4: Wallet Created\n\nOnce you have completed the setup, you will receive a message indicating that your Nightly wallet has been created.\nClick on “Log in to your wallet” to finish the setup process.\n\nStep 5: Nightly Wallet Dashboard\n\nAfter logging in, you will see the Nightly Wallet dashboard.\nBe sure to select Movement from the network drop-down menu and you’re set!\n\nImporting an Account​\n\nIf you have an account on Razor and would like to import it to Nightly, follow these steps:\n\nStep 1: Retrieve Private Key from Razor Wallet\n\nOpen the Razor Wallet extension.\nClick on the settings icon to open the settings menu.\n\nSelect “Wallet” to manage your account.\n\nClick on “View private key” to retrieve your private key.\n\nEnter your Razor Wallet password to view the private key.\n\nCopy the private key shown on the screen.\n\nStep 2: Import Private Key into Nightly Wallet\n\nOpen the Nightly Wallet extension.\n\nClick on the hamburger menu icon to open the menu.\n\nSelect “Wallet” and click on “Import private key.”\n\nPaste the private key you copied from the Razor Wallet.\nClick “Import” to add your Razor account to Nightly Wallet.\n\nConnecting to the Movement Network​\n\nThere are three chains live on the Movement:\n\nAptos Move\nSui Move\nMove EVM (MEVM)\n\nAptos Move is in Testnet and Devnet, while Sui Move and Move EVM (MEVM) are in Devnet only.\n\ndApps deployed across these chains will work on both Razor and Nightly wallets.\n\nLet’s try and use them on Movement’s Faucet, for example, on MEVM.\n\nStep 1: Access the Movement Faucet\n\nOpen your browser and go to Movement Faucet.\nSelect the chain you want to use. For this example, select “MEVM” in the mock tokens section.\n\nStep 2: Connect Your Wallet\n\nClick on the “Connect Wallet” button.\nChoose either Razor Wallet or Nightly Wallet from the list of available wallets.\n\nStep 3: Approve Access Request\n\nYour wallet will request access to connect to the Movement Faucet.\nApprove the access request by clicking “Confirm”.\n\nStep 4: Get Mock Tokens\n\nNow that the wallet is connected, you can mint dummy tokens as per your needs.\n\nUsing this faucet, you can get testnet tokens across any movement chain.\n\nThat is it for this guide! If you’re looking to build on Movement, check out our docs and head over to Battle of Olympus.\n\nEdit this page\nPrevious\nUsing The Movement Network\nNext\nFaucets\nWallet Setup\nRazor\nNightly\nImporting an Account\nConnecting to the Movement Network\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/category/using-the-movement-network",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nUsing The Movement Network\nUsing The Movement Network\n\nEverything you need to connect and start using the Movement Network\n\n📄️ Connect To Movement\n\nThis guide will show you how to use blockchains on the movement network. Everything from setting up the wallet to connecting to the chain, getting testnet tokens from the faucet, and using the explorer will be covered in this guide.\n\n📄️ Faucets\n\nThe easiest way to get Testnet MOVE\n\n📄️ Explorers\n\nThe Block Explorers are listed below for each testnetwork environment\n\nPrevious\nInteroperability and Security\nNext\nConnect To Movement\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Interoperability and Security | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/general/Introduction/interop_security",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nWhat Is The Movement Network?Interoperability and Security\nInteroperability and Security\n\nThe Movement Network leverages mechanisms to ensure robust interoperability and high security across its ecosystem. Key components include the M1 Shared Decentralized Sequencer and Multi-Asset Staking.\n\nM1 Shared Decentralized Sequencer​\n\nM1 provides a decentralized and shared sequencing mechanism, enhancing network robustness, fairness, and censorship resistance. It supports cross-chain atomic swaps and pooled liquidity within the Move Arena ecosystem. This shared sequencer is a crucial component of the Move Arena, ensuring that all participating rollups can achieve fair and efficient transaction ordering.\n\nMulti-Asset Staking​\n\nM1 utilizes a PoS system, allowing for multi-asset staking to enhance economic security. This mechanism enables staking of both native and non-native tokens, boosting network security and promoting sovereignty among rollups. Delegation allows for staking without operating a node, maximizing staked value and economic security. This multi-asset staking approach ensures that a diverse range of assets can be used to secure the network, enhancing overall resilience and flexibility.\n\nMulti-asset staking allows the inclusion of various token types, enhancing the economic security and decentralization of the network. This also empowers rollups by integrating their security contributions into the overall network.\n\nEdit this page\nPrevious\nMovement Frameworks\nNext\nUsing The Movement Network\nM1 Shared Decentralized Sequencer\nMulti-Asset Staking\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Frameworks | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/general/Introduction/move_components",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nWhat Is The Movement Network?Movement Frameworks\nMovement Frameworks\n\nThe Movement Network is built on robust frameworks that enable the creation, deployment, and management of Move-based rollups. These frameworks include the Move Stack, Move Arena, and the Move Rollup Framework, each designed to enhance performance, security, and interoperability.\n\nMove Stack​\n\nThe Move Stack is a collection of tools, components, and adapters that enable the creation of customizable Move rollups. It includes essential elements such as sequencing, data availability, and settlement mechanisms. The modular architecture of the Move Stack allows developers to select the most suitable components for their specific applications, ensuring optimal performance and security.\n\nThe Move Stack's configurable components include:\n\nSequencer: Developers can opt for the default M1 decentralized shared sequencing service or choose a self-reliant sequencing mechanism.\nData Availability: Supports various DA solutions, including Ethereum EIP-4844 blobs, 0G, Avail, Celestia, EigenDA, and Near.\nSettlement Mechanisms: Offers options for optimistic (fraud proof), zk (validity proof) rollups, and staked (attestations) settlement mechanisms.\nINFO\n\nThe Move Stack promotes standardization across critical infrastructure components, including wallet software, developer APIs, and block explorers. This standardization enhances interoperability and significantly improves the developer and user experience across the Move Arena ecosystem.\n\nMove Arena​\n\nMove Arena provides a framework to deploy and join the Move rollups network. It offers benefits such as fast finality, interoperability, and shared economic security. This framework supports a network of application-specific chains, enhancing interoperability and shared liquidity. It allows the deployment of specialized rollups tailored to different use cases, such as DeFi, gaming, and supply chain applications.\n\nINFO\n\nThe Move Arena supports the deployment of application-specific Move Rollups, providing cross-chain interoperability and shared liquidity. This setup enhances the efficiency and security of new rollups by leveraging a decentralized sequencer and multi-asset staking.\n\nMove Rollup Framework​\n\nThe Move Rollup framework provides a blueprint for creating Move-based rollups. It is a modular architecture where components can be configured to meet the specific needs of different applications. The framework includes key components such as the Move Executor, bridge contracts, a sequencer, a data availability service, and a settlement mechanism. This flexibility allows for the customization of rollups to optimize performance, cost, and security.\n\nKey Components of the Move Rollup Framework​\nExecutor: Processes transactions and generates new L2 blocks.\nBridge Contracts: Facilitates asset deposits and withdrawals between L1 and the rollup.\nSequencer: Orders transactions.\nData Availability Service: Ensures transaction data accessibility to the settlement mechanism.\nSettlement Mechanism: Verifies transaction execution correctness through various methods (e.g., zk-proofs, optimistic rollups, fast finality settlement rollups).\nINFO\n\nThe modularity of the Move Rollup framework allows developers to select different data availability solutions, settlement mechanisms, and sequencing options, customizing their rollups to best fit their application's needs.\n\nTransaction Lifecycle​\n\nUnderstanding the transaction lifecycle is crucial for understanding how Move Rollups achieve efficient and secure transaction finality. This lifecycle outlines the steps from the initial submission of a transaction to its final settlement, ensuring that every transaction is processed correctly and securely.\n\nThe transaction lifecycle within a Move Rollup involves:\n\nSubmission: A transaction is submitted to the mempool.\nSequencing: The sequencer extracts a batch of transactions from the mempool and orders them.\nData Publication: The sequencer publishes the transaction data to the DA service.\nExecution: The executor processes the transactions, resulting in a new L2 state.\nSettlement: The new state is published to L1 in the bridge contract for final settlement.\n\nThis process ensures efficient and secure transaction finality.\n\nEdit this page\nPrevious\nTechnical Details\nNext\nInteroperability and Security\nMove Stack\nMove Arena\nMove Rollup Framework\nKey Components of the Move Rollup Framework\nTransaction Lifecycle\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/general/Introduction/technical_details",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nWhat Is The Movement Network?Technical Details\nTechnical Details\n\nThe Movement Network has three main components that enhance its performance, security, and interoperability: the Move Executor, the Staked Settlement Module, and the Decentralized Shared Sequencer (M1). Each of these components plays a crucial role in ensuring the operation of Move-based rollups.\n\nMove Executor​\n\nThe Move Executor is a core component of the Movement-SDK, supporting both MoveVM and EVM bytecode. This dual compatibility provides a robust execution environment, enabling developers to leverage the advanced features of the Move language while maintaining compatibility with existing Ethereum applications. The Move Executor integrates the parallel execution capabilities of MoveVM with existing EVM interpreters, ensuring compatibility and scalability.\n\nStaked Settlement Module​\n\nThe Staked Settlement Module is designed to provide fast finality settlement for transactions within the Move Rollups network. By utilizing a network of attesters who stake assets to validate state transitions, this module ensures high economic security and reduces latency. Validators stake assets and attest to the correctness of state transitions, combining the security benefits of staking with the efficiency of rapid transaction finality.\n\nSecurity Mechanism​\nEthereum Settlement: Validators stake assets to provide economic security, ensuring significant financial interest in network integrity.\nzk and Optimistic Rollups: zk-rollups offer security through validity proofs, while optimistic rollups rely on challenge periods for dispute resolution. Both methods have higher latency and computational costs.\nStaked Rollups: Offer fast finality and high economic security without extensive proof generation or challenge periods, reducing latency and improving user experience compared to zk and optimistic rollups.\nComparison with Other Rollups​\nStaked rollups do not require expensive proof generation equipment, unlike zk-rollups.\nStaked rollups provide significantly reduced latency compared to both optimistic and zk-rollups, with finality settlement in seconds.\nFast finality is crucial for interoperability and atomic cross-rollup transactions, making staked rollups an ideal solution for many applications.\nDecentralized Shared Sequencer (M1)​\n\nThe M1 sequencer is a decentralized and shared sequencing mechanism that enhances network robustness, fairness, and censorship resistance. By providing customizable transaction ordering, M1 supports cross-chain atomic swaps and pooled liquidity within the Move Arena ecosystem. This shared sequencer ensures fair and efficient transaction ordering across all participating rollups.\n\nINFO\n\nThe M1 sequencer not only improves network robustness but also facilitates cross-chain interoperability and pooled liquidity, allowing for seamless asset transfers and interactions across different rollups.\n\nEdit this page\nPrevious\nIntroduction\nNext\nMovement Frameworks\nMove Executor\nStaked Settlement Module\nSecurity Mechanism\nComparison with Other Rollups\nDecentralized Shared Sequencer (M1)\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Introduction | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/general/Introduction/",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nWhat Is The Movement Network?Introduction\nIntroduction\n\nMovement Labs is building a network of Move-based blockchains. Our flagship products are the Movement Network and the M1 shared sequencer.\n\nMovement is a community-first blockchain providing the highest possible TPS through Move, instant finality, native day-zero access to mass liquidity, and modular customizations.\n\nIt will support Aptos Move, Sui Move, and also our embedded EVM interpreter MEVM—empowering both Sui, Aptos, and EVM users to use the L2.\n\nWhy Move?​\n\nMove is a safe and secure programming language designed by Facebook for smart contracts that emphasize ownership and safety. Assets in Move are represented as resources. Owing to Move's strong ownership model and explicit resource abilities, Move simplifies the development of safe smart contracts for common blockchain tasks such as transferring ownership of assets, minting, and destroying.\n\nThe chart below compares common non-Move runtimes against Aptos and Sui Move runtimes, underscoring the different models and benefits of Move.\n\n\tAptos / Move\tSolana / SeaLevel\tEVM\tSui / Move\nData storage\tStored at a global address or within the owner's account\tStored within the owner's account associated with a program\tStored within the account associated with a smart contract\tStored at a global address\nParallelization\tCapable of inferring parallelization at runtime within Aptos\tRequires specifying all data accessed\tCurrently serial, nothing in production\tRequires specifying all data accessed\nTransaction safety\tSequence number\tTransaction uniqueness\tNonces, similar to sequence numbers\tTransaction uniqueness\nType safety\tModule structs and generics\tProgram structs\tContract types\tModule structs and generics\nFunction calling\tStatic dispatch\tStatic dispatch\tDynamic dispatch\tStatic dispatch\nAuthenticated Storage\tYes\tNo\tYes\tNo\nObject accessibility\tGuaranteed to be globally accessible\tNot applicable\tNot applicable\tCan be hidden\nEdit this page\nPrevious\nWhat Is The Movement Network?\nNext\nTechnical Details\nWhy Move?\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/category/what-is-the-movement-network",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nWhat Is The Movement Network?\nWhat Is The Movement Network?\n\nLearn about Movement Labs and the products we offer.\n\n📄️ Introduction\n\nMovement Labs is building a network of Move-based blockchains. Our flagship products are the Movement Network and the M1 shared sequencer.\n\n📄️ Technical Details\n\nThe Movement Network has three main components that enhance its performance, security, and interoperability: the Move Executor, the Staked Settlement Module, and the Decentralized Shared Sequencer (M1). Each of these components plays a crucial role in ensuring the operation of Move-based rollups.\n\n📄️ Movement Frameworks\n\nThe Movement Network is built on robust frameworks that enable the creation, deployment, and management of Move-based rollups. These frameworks include the Move Stack, Move Arena, and the Move Rollup Framework, each designed to enhance performance, security, and interoperability.\n\n📄️ Interoperability and Security\n\nThe Movement Network leverages mechanisms to ensure robust interoperability and high security across its ecosystem. Key components include the M1 Shared Decentralized Sequencer and Multi-Asset Staking.\n\nPrevious\nGetting Started\nNext\nIntroduction\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/devs/getstarted",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nYour First Move Contract\nMovement CLI\nNetwork Endpoints\nIndexers\nOracles\nTutorials\nDeploy\nEVM Contracts\nAptos Module\nSui Module\nBuild dApp\nAptos Move dApp\nSui Move dApp\nSolidity dApp\nFAQ\nGetting Started\nGetting Started\n\nWelcome to the Movement Network! This guide will help you start building on our blockchain quickly and efficiently. Whether you're a developer familiar with Aptos, EVM (Ethereum Virtual Machine), or Sui ecosystems, we've got you covered.\n\nChoose Your Environment​\n\nThe Movement Network currently supports three development environments:\n\nAptos Environment (Suzuka Testnet)\nMEVM Environment (Imola Testnet)\nSui Environment (Sui Imola Testnet)\n\nSelect the environment that aligns with your preferred programming language or ecosystem.\n\nTestnet Startup​\n\nIf you are new to the ecosystem check out the Your First Move Module guide which will guide you through the process of building your very first Move Module or Contract.\n\nAptos Environment​\nGet Started​\n\nSet Up Your Development Environment\n\nOption 1: Install the Movement CLI to scaffold your project effortlessly.\nOption 2: If you're already familiar with Aptos, you can continue using the Aptos CLI.\n\nAccess Network Endpoints\n\nObtain the necessary endpoints from our Network Endpoints section to connect to the Suzuka Testnet.\n\nLearn and Build\n\nDive into our Aptos Tutorials to start deploying your first modules.\nMEVM Environment​\nGet Started​\n\nSet Up Your Development Environment\n\nVisit our section for Ethereum Developers for tools and resources tailored to Solidity development.\n\nAccess Network Endpoints\n\nGet the necessary endpoints from our Network Endpoints section to connect to the Imola Testnet.\n\nLearn and Build\n\nUtilize your favorite Solidity tools to start building and deploying smart contracts.\nSui Environment​\nGet Started​\n\nSet Up Your Development Environment\n\nExplore our section for Sui Developers for guidance on setting up your Sui Move environment.\n\nAccess Network Endpoints\n\nRetrieve the necessary endpoints from our Network Endpoints section to connect to the Sui Imola Testnet.\n\nLearn and Build\n\nBegin with our Sui tutorials to deploy your first modules and interact with the network.\nObtain Testnet Tokens​\n\nBefore deploying contracts or performing transactions, you'll need testnet tokens:\n\nVisit our Faucets page to request tokens for your chosen environment.\nLearn Move​\n\nNew to the Move programming language? Start learning here:\n\nHack Movement: A crash course on developing for the Movement Network.\nMove Language Book: Comprehensive guide to understanding the basics of Move.\nTutorials and Resources​\n\nReady to expand your skills?\n\nTutorials: Explore various tutorials to deepen your understanding and start hacking on the Movement Network.\nCommunity Support: Join our discord and engage in discussions with our developer community for support and updates.\n\nBy following this guide, you should have a clear path to start developing on the Movement Network using the environment that best suits your expertise. Happy building!\n\nEdit this page\nNext\nYour First Move Contract\nChoose Your Environment\nTestnet Startup\nAptos Environment\nGet Started\nMEVM Environment\nGet Started\nSui Environment\nGet Started\nObtain Testnet Tokens\nLearn Move\nTutorials and Resources\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Labs Node API | Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/api/node/movement-labs-node-api",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nIntroduction\nAccounts\nBlocks\nEvents\nGeneral\nTables\nTransactions\nView\nIntroduction\nVersion: 1.2.0\nMovement Labs Node API\nAPIs​\n\nThe Movement Network can be accessed by several API endpoints.\n\nINFO\n\nThis APi documentation in its current form is only referring to the Aptos (Suzuka) environment\n\nMovement Fullnode​\n\nThis API - embedded into Fullnodes - provides a simple, low latency, yet low-level way of reading state and submitting transactions to the Movement Blockchain. It also supports transaction simulation.\n\nIndexer API​\n\nThis API is work in progress and will be available publicly soon.\n\nNext\nAccounts\nAPIs\nMovement Fullnode\nIndexer API\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  },
  {
    "title": "Movement Network | Movement",
    "url": "https://docs.movementnetwork.xyz/",
    "html": "Skip to main content\nMovement\nLearn\nBuild\nAPI\nSearch\nGitHub\nGetting Started\nWhat Is The Movement Network?\nIntroduction\nTechnical Details\nMovement Frameworks\nInteroperability and Security\nUsing The Movement Network\nConnect To Movement\nFaucets\nExplorers\nGetting Started\nGetting Started\n📄️ Learn about Movement\n\nLearn more about the Network\n\n📄️ Developers\n\nAll Developer Documentation\n\nWhere are you building?\n📄️ Building on Aptos Move\n\nFor Developers from the Aptos Ecosystem\n\n📄️ Building on Sui Move\n\nFor Developers from the Sui Ecosystem\n\n📄️ Building on EVM\n\nFor Developers from the EVM Ecosystem\n\nMore Resources\n📄️ Faucets\n\nGet Testnet Tokens\n\n📄️ Explorers\n\nUse our Block Explorers\n\nEdit this page\nNext\nWhat Is The Movement Network?\nDocs\nTutorial\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Movement Foundation."
  }
]