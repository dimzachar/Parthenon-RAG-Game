[
  {
    "title": "Push notifications | Nightly Connect",
    "url": "https://connect.nightly.app/docs/for_wallets/for_wallets/push",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nBuild & Connect\nSign Transaction\nSign Messages\nPush notifications\nFor walletsPush notifications\nPush notifications\nINFO\n\nPost request is send only if client does not have established WS connection.\n\nApplication sends POST request to user Endpoint, which contains data on request. In order to display the connect push notification on user device connect() function required notificationEndpoint and token.\n\ntype Connect = {\n  publicKeys: string[],\n  sessionId: string,\n  notification?: Notification | undefined, // required for notification purposes\n  device?: Device | undefined,\n  metadata?: string | undefined\n}\n\ninterface Notification {\n  token: string;\n  notificationEndpoint: string;\n}\n\ninterface NotificationPayload {\n  token: string\n  network: Network\n  sessionId: string\n  appMetadata: AppMetadata\n  device: Device\n  request: string // serialized RequestContent\n  requestId: string\n}\n\n\n\nFirebase push notification example:\n\nconst firebase = initializeApp(undefined, 'trigger-notification')\nexport const triggerNotification = onRequest(async (request, response) => {\n  try {\n    if (request.method !== 'POST') {\n      response.status(400).send('Invalid request method')\n      return\n    }\n    const payload = request.body as NotificationPayload\n    const messaging = getMessaging(firebase)\n    const requestContent = JSON.parse(payload.request) as RequestContent\n    await messaging.send({\n      token: payload.token,\n      android: payload.device === 'Android' ? {} : undefined,\n      notification: {\n        title: requestContent.type,\n        body: 'You have a new request' + payload.appMetadata.name,\n        imageUrl: payload.appMetadata.icon\n      },\n      data: { payload: JSON.stringify(request.body) }\n    })\n    response.status(200).send('OK')\n    return\n  } catch (error: any) {\n    console.log(error)\n    response.status(400).send(error.toString())\n    return\n  }\n})\n\nEdit this page\nPrevious\nSign Messages\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Sign Messages | Nightly Connect",
    "url": "https://connect.nightly.app/docs/for_wallets/for_wallets/sign_message",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nBuild & Connect\nSign Transaction\nSign Messages\nPush notifications\nFor walletsSign Messages\nSign Messages\n\nClient can listen to the event client.on('signMessages'), which will returns user requests to sign messages. To resolve the transaction client needs to pass in requestId and signed message.\n\nSolana\nSUI\nSubstrate\nAptos\nMovement\nimport nacl from 'tweetnacl'\n\nclient.on('signMessages', async (e) => {\n  const msg = e.messages[0].message\n  const encoded = Uint8Array.from(sha256.array(msg))\n  const signature = nacl.sign.detached(encoded, alice_keypair.secretKey)\n  // resolve\n  await client.resolveSignMessage({\n    requestId: e.responseId,\n    signature: signature\n  })\n})\n\nEdit this page\nPrevious\nSign Transaction\nNext\nPush notifications\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Sign Transaction | Nightly Connect",
    "url": "https://connect.nightly.app/docs/for_wallets/for_wallets/sign_transaction",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nBuild & Connect\nSign Transaction\nSign Messages\nPush notifications\nFor walletsSign Transaction\nSign Transaction\n\nClient is listening to the event client.on('signTransactions'), which returns data about transactions that are being requested.\n\nWhen user accepts and signs a transaction with keyPair, the transaction is approved and sent to the blockchain. To resolve the transaction client needs to pass in requestId and signed transaction.\n\nSolana\nSUI\nSubstrate\nAptos\nMovement\nimport { Keypair, Transaction } from '@solana/web3.js'\n\ninterface SignSolanaTransactionEvent {\n  requestId: string\n  transactions: Array<VersionedTransaction>\n  sessionId: string\n}\n\nconst alice_keypair = Keypair.generate()\n\nclient.on('signTransactions', async (e) => {\n  const tx = e.transactions[0]\n  tx.sign([alice_keypair])\n  // resolve\n  await client.resolveSignTransaction({\n    requestId: e.requestId,\n    signedTransactions: [tx]\n  })\n})\n\n\nEdit this page\nPrevious\nBuild & Connect\nNext\nSign Messages\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "External modal | Nightly Connect",
    "url": "https://connect.nightly.app/docs/customization/customization/external_modal",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nModal UI overrides\nExternal modal\nFor wallets\nCustomizationExternal modal\nExternal modal\n\nYou may want to use your own design and/or change some logic for the modal. In that case passing all of the overrides to the build() or buildLazy() function can prove ineffective. Another option therfore is to omit the default modal altogether, by specyfing the disableModal option as true inside the connectionOptions.\n\nYou can then use the modal connect function, instead of using the default one from the adapter.\n\nINFO\n\nExample below is written for Solana, but you can use it for Sui, Aptos, Movement and Substrate as well.\n\nimport { NightlyConnectAdapter } from '@nightlylabs/wallet-selector-solana'\n// You have to import the modal class separately\nimport { AppInitData, NightlyConnectSelectorModal } from '@nightlylabs/wallet-selector-base'\n\nconst appInitData: AppInitData = {\n  appMetadata: {\n    name: 'NCTestSolana',\n    description: 'Nightly Connect Test',\n    icon: 'https://docs.nightly.app/img/logo.png',\n    additionalInfo: 'Courtesy of Nightly Connect team'\n  }\n}\n\nconst adapter = await NightlyConnectAdapter.build(\n  appInitData,\n  { disableModal: true } // ensures that the default modal will be disabled\n)\n\n\nNow you can define and instantiate your own modal and use the adapter to provide any necessary logic.\n\nINFO\n\nThe example below shows the process using the NightlyConnectSelectorModal, but the code may look different, depending on the underlying code in your modal of choice.\n\n// creates a new modal\nconst modal = new NightlyConnectSelectorModal(\n  adapter.walletsList,\n  appInitData.url ?? 'https://nc2.nightly.app',\n  {\n    name: SOLANA_NETWORK,\n    icon: 'https://assets.coingecko.com/coins/images/4128/small/solana.png'\n  },\n  document.getElementById('modalAnchor')\n)\n\n// we can also use events to determine,\n// what the current state of the app is, and react accordingly\nadapter.on('connect', (pk) => {\n  modal.closeModal()\n})\n\n\nThe code described above sets up the adapter and the modal for later use.\n\nTo connect, we can run:\n\nif (modal)\n  modal.openModal(adapter?.sessionId ?? undefined, async (walletName) => {\n    try {\n      modal.setStandardWalletConnectProgress(true)\n      await adapter?.connectToWallet(walletName)\n    } catch (err) {\n      modal.setStandardWalletConnectProgress(false)\n      console.log('error')\n      modal.closeModal()\n    }\n  })\n\nINFO\n\nYou may include some additional functionality on top of the basic code. For more customization freedom, visit the source code for any adapter, e.g https://github.com/nightly-labs/connect/blob/main/sdk/packages/selector-solana/src/adapter.ts.\n\nEdit this page\nPrevious\nModal UI overrides\nNext\nBuild & Connect\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Sign Transaction | Nightly Connect",
    "url": "https://connect.nightly.app/docs/aptos/aptos/sign_transaction",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nGet started with Aptos\nBuild & Connect\nSign Transaction\nListening for events\nMovement M1\nCustomization\nFor wallets\nAptosSign Transaction\nSign Transaction\n\nSending a signTransaction requires established connection with user wallet.\n\nTransaction are sent to the client via wallet interface. Client can accept or reject the request. Once client signs transaction, signAndSubmitTransaction() method returns resolved promise with Signed Transaction.\n\nimport { Aptos } from '@aptos-labs/ts-sdk'\n\nconst aptos = new Aptos()\n\nconst accountInfo = {\n  address: '' // Generated inside the onAccountChange event listener\n  ...\n}\n\nconst transaction = await aptos.transaction.build.simple({\n  sender: accountInfo.address.toString(),\n  data: {\n    function: '0x1::coin::transfer',\n    typeArguments: ['0x1::aptos_coin::AptosCoin'],\n    functionArguments: ['0x960dbc655b847cad38b6dd056913086e5e0475abc27152b81570fd302cb10c38', 100]\n  }\n})\n\nconst signedTx = await adapter.signAndSubmitTransaction({\n  rawTransaction: transaction.rawTransaction\n})\n\nEdit this page\nPrevious\nBuild & Connect\nNext\nListening for events\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Build & Connect | Nightly Connect",
    "url": "https://connect.nightly.app/docs/aptos/aptos/connect",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nGet started with Aptos\nBuild & Connect\nSign Transaction\nListening for events\nMovement M1\nCustomization\nFor wallets\nAptosBuild & Connect\nBuild & Connect\nINFO\n\nThis part of documentation is targeted to applications that want to implement nightly connect as wallet interface.\n\nTo get started, we need to connect the user to the application. In order to do so, application generates the sessionId, a unique id that identifies each connection.\n\nThis process is initialized by one side displaying a sessionId through QR code (see the screenshot). The other peer needs just to scan the QR code on its device. Extension wallets are auto detected so you are always up to date and don't need to upgrade your dapp.\n\nConnect​\n\nApplication builds a connection using build() or buildLazy() function that returns interface to communicated with remote user. It is important to note, that the buildLazy() function allows for the modal to appear even when the sessionId is still undefined. App should define AppMetadata so wallets will be able to show it to user.\n\nTo start sending request like signTransaction user first need to connect to session. Once user establishes connection, application will get public key and the connection will be confirmed.\n\nAPI of application client is fit to match currently existing standards of corresponding blockchains\n\ninterface AppMetadata {\n  name: string;\n  url?: string;\n  description?: string;\n  icon?: string; // Url of app image\n  additionalInfo?: string;\n}\n\n\nYou may also want to specify some additional connection options. This can be achieved by creating an object that implements the below interface, and using it inside the build() or buildLazy() function. Note, that the disableModal property can be used for implementing a custom External modal.\n\ninterface ConnectionOptions {\n  disableModal?: boolean // default: false\n    //   Used for disabling modal in case you want to use your own\n  initOnConnect?: boolean // default: false\n    //   Ensures that the app is only build upon running the connect function\n  disableEagerConnect?: boolean // default: false\n    //   Do not connect eagerly, even if the previous session is saved\n}\n\nimport { NightlyConnectAptosAdapter } from '@nightlylabs/wallet-selector-aptos'\n\nconst adapter = await NightlyConnectAptosAdapter.build(\n  {\n    appMetadata: {\n      name: 'NCTestAptos',\n      description: 'Nightly Connect Test',\n      icon: 'https://docs.nightly.app/img/logo.png',\n      additionalInfo: 'Courtesy of Nightly Connect team'\n    }\n    //   persistent: false  -  Add this if you want to make the session non-persistent\n  }\n  // { initOnConnect: true, disableModal: true, disableEagerConnect: true }  -  You may specify the connection options object here\n  // document.getElementById(\"modalAnchor\")  -  You can pass an optional anchor element for the modal here\n)\n\n// Trigger connection\nawait adapter.connect()\n// After connection adapter turns into remote signer\n\n// Sign transaction\nawait adapter.signAndSubmitTransaction()\n\n// Disconnect client if you want to end session\nawait adapter.disconnect()\n\nDisconnect​\nINFO\n\nBoth client and application can initiate disconnection. User can force session termination in case of abuse. Only when application disconnects and session is not persistent, session is completely removed.\n\nEdit this page\nPrevious\nGet started with Aptos\nNext\nSign Transaction\nConnect\nDisconnect\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Listening for events | Nightly Connect",
    "url": "https://connect.nightly.app/docs/aptos/aptos/events",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nGet started with Aptos\nBuild & Connect\nSign Transaction\nListening for events\nMovement M1\nCustomization\nFor wallets\nAptosListening for events\nListening for events\n\nAn app can listen to events, subscribe to them and run some code whenever the particular event occurs.\n\nIf you have created a connection you can listen for events using the on() function.\n\nconst adapter = NightlyConnectAptosAdapter.buildLazy(\n  {\n    appMetadata: {\n      name: 'NCTestAptos',\n      description: 'Nightly Connect Test',\n      icon: 'https://docs.nightly.app/img/logo.png',\n      additionalInfo: 'Courtesy of Nightly Connect team'\n    },\n    url: 'https://nc2.nightly.app'\n  }\n)\n\nadapter.on('connect', (publicKey) => {\n    ...\n})\n\nadapter.on('accountChange', (accInfo) => {\n    ...\n})\n\nadapter.on('networkChange', (networkInfo) => {\n    ...\n})\n\nadapter.on('disconnect', () => {\n    ...\n})\n\nadapter.on('error', (error) => {\n    ...\n})\n\nEdit this page\nPrevious\nSign Transaction\nNext\nGet started with Movement\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Listening for events | Nightly Connect",
    "url": "https://connect.nightly.app/docs/movement/movement/events",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nGet started with Movement\nBuild & Connect\nSign Transaction\nListening for events\nCustomization\nFor wallets\nMovement M1Listening for events\nListening for events\n\nAn app can listen to events, subscribe to them and run some code whenever the particular event occurs.\n\nIf you have created a connection you can listen for events using the on() function.\n\nconst adapter = NightlyConnectAptosAdapter.buildLazy(\n  {\n    appMetadata: {\n      name: 'Movement Template',\n      description: 'Movement Template',\n      icon: 'https://docs.nightly.app/img/logo.png',\n    },\n    url: 'https://nc2.nightly.app'\n  }\n)\n\nadapter.on('connect', (publicKey) => {\n    ...\n})\n\nadapter.on('accountChange', (accInfo) => {\n    ...\n})\n\nadapter.on('networkChange', (networkInfo) => {\n    ...\n})\n\nadapter.on('disconnect', () => {\n    ...\n})\n\nadapter.on('error', (error) => {\n    ...\n})\n\nEdit this page\nPrevious\nSign Transaction\nNext\nModal UI overrides\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Sign Transaction | Nightly Connect",
    "url": "https://connect.nightly.app/docs/movement/movement/sign_transaction",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nGet started with Movement\nBuild & Connect\nSign Transaction\nListening for events\nCustomization\nFor wallets\nMovement M1Sign Transaction\nSign Transaction\n\nSending a signTransaction requires established connection with user wallet.\n\nTransaction are sent to the client via wallet interface. Client can accept or reject the request.\n\nTo create a transaction, first we have to establish a connection with an Aptos provider.\n\nimport { Aptos, AptosConfig, AptosSettings } from '@aptos-labs/ts-sdk'\n\nlet _provider: Aptos | undefined\nconst endpoint = 'https://aptos.devnet.m1.movementlabs.xyz'\n\nexport const getAptos = () => {\n  if (_provider) return _provider\n  const conf = new AptosConfig({\n    fullnode: endpoint,\n    faucet: 'https://faucet.movementlabs.xyz'\n  })\n  _provider = new Aptos(conf) // DEVNET\n\n  const a = async () => {\n    const acc = await getAptos().account.getAccountResources({\n      accountAddress: '0x975c0bad4ee36fcb48fe447647834b9c09ef44349ff593e90dd816dc5a3eccdc'\n    })\n    console.log(acc)\n    const resp = await getAptos().faucet.fundAccount({\n      accountAddress: '0x975c0bad4ee36fcb48fe447647834b9c09ef44349ff593e90dd816dc5a3eccdc',\n      amount: 10000\n    })\n    console.log(resp)\n  }\n\n  a()\n\n  return _provider\n}\n\n\nThen we can use the above function, to get Aptos provider instance for later use.\n\nconst aptos = getAptos()\n\n\nAnd create the transaction as such.\n\n\nconst userAccount = {\n  address: '' // Generated inside the onAccountChange event listener\n  ...\n}\n\nconst transaction = await aptos.transaction.build.simple({\n  sender: userAccount.address.toString(),\n  data: {\n    function: '0x1::coin::transfer',\n    typeArguments: ['0x1::aptos_coin::AptosCoin'],\n    functionArguments: [\n      '0x99881b6cdf90c9edb04e6b5912c236630b55587161dedc1fc05d53f72eec07e8',\n      1_000_000,\n    ],\n  },\n})\n\n\n\nFinally we can sign the created transaction using the signAndSubmitTransaction() method, which returns resolved promise with Signed Transaction.\n\nconst signedTx = await adapter.signAndSubmitTransaction(transaction)\n\nEdit this page\nPrevious\nBuild & Connect\nNext\nListening for events\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Build & Connect | Nightly Connect",
    "url": "https://connect.nightly.app/docs/movement/movement/connect",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nGet started with Movement\nBuild & Connect\nSign Transaction\nListening for events\nCustomization\nFor wallets\nMovement M1Build & Connect\nBuild & Connect\nINFO\n\nThis part of documentation is targeted to applications that want to implement nightly connect as wallet interface.\n\nTo get started, we need to connect the user to the application. In order to do so, application generates the sessionId, a unique id that identifies each connection.\n\nThis process is initialized by one side displaying a sessionId through QR code (see the screenshot). The other peer needs just to scan the QR code on its device. Extension wallets are auto detected so you are always up to date and don't need to upgrade your dapp.\n\nConnect​\n\nApplication builds a connection using build() or buildLazy() function that returns interface to communicated with remote user. It is important to note, that the buildLazy() function allows for the modal to appear even when the sessionId is still undefined. App should define AppMetadata so wallets will be able to show it to user.\n\nTo start sending request like signTransaction user first need to connect to session. Once user establishes connection, application will get public key and the connection will be confirmed.\n\nAPI of application client is fit to match currently existing standards of corresponding blockchains\n\ninterface AppMetadata {\n  name: string;\n  url?: string;\n  description?: string;\n  icon?: string; // Url of app image\n  additionalInfo?: string;\n}\n\n\nYou may also want to specify some additional connection options. This can be achieved by creating an object that implements the below interface, and using it inside the build() or buildLazy() function. Note, that the disableModal property can be used for implementing a custom External modal.\n\ninterface ConnectionOptions {\n  disableModal?: boolean // default: false\n    //   Used for disabling modal in case you want to use your own\n  initOnConnect?: boolean // default: false\n    //   Ensures that the app is only build upon running the connect function\n  disableEagerConnect?: boolean // default: false\n    //   Do not connect eagerly, even if the previous session is saved\n}\n\nimport { NightlyConnectAptosAdapter } from '@nightlylabs/wallet-selector-aptos'\n\nconst adapter = await NightlyConnectAptosAdapter.build(\n  {\n    appMetadata: {\n      name: 'Movement Template',\n      description: 'Movement Template',\n      icon: 'https://docs.nightly.app/img/logo.png'\n    }\n    //   persistent: false  -  Add this if you want to make the session non-persistent\n  }\n  // { initOnConnect: true, disableModal: true, disableEagerConnect: true }  -  You may specify the connection options object here\n  // document.getElementById(\"modalAnchor\") , -  You can pass an optional anchor element for the modal here\n   {\n      networkDataOverride: { // it is used to change the metadata of the NC Modal's network tab\n        name: 'Movement',\n        icon: 'https://registry.nightly.app/networks/movement.svg'\n      }\n\n  }\n)\n\n// Trigger connection\nawait adapter.connect()\n// After connection adapter turns into remote signer\n\n// Sign transaction\nawait adapter.signAndSubmitTransaction(transaction)\n\n// Disconnect client if you want to end session\nawait adapter.disconnect()\n\nDisconnect​\nINFO\n\nBoth client and application can initiate disconnection. User can force session termination in case of abuse. Only when application disconnects and session is not persistent, session is completely removed.\n\nEdit this page\nPrevious\nGet started with Movement\nNext\nSign Transaction\nConnect\nDisconnect\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Sign Transaction | Nightly Connect",
    "url": "https://connect.nightly.app/docs/substrate/substrate/sign_transaction",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nGet started with Substrate\nBuild & Connect\nSign Transaction\nAptos\nMovement M1\nCustomization\nFor wallets\nSubstrateSign Transaction\nSign Transaction\n\nNightly connect automatically turns into remote signer after connection from client (Mobile/Extension). Signing transaction is as simple as passing signer object\n\n// Create transaction\nconst payload = api.tx.balances.transfer(RECEIVER, 50000)\n// Sign transaction using adapter\nconst signed = await payload.signAsync(SENDER, { signer: adapter.signer })\n// Send transaction\nawait signed.send()\n\nEdit this page\nPrevious\nBuild & Connect\nNext\nGet started with Aptos\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Build & Connect | Nightly Connect",
    "url": "https://connect.nightly.app/docs/substrate/substrate/connect",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nGet started with Substrate\nBuild & Connect\nSign Transaction\nAptos\nMovement M1\nCustomization\nFor wallets\nSubstrateBuild & Connect\nBuild & Connect\nINFO\n\nThis part of documentation is targeted to applications that want to implement nightly connect as wallet interface.\n\nTo get started, we need to connect the user to the application. In order to do so, application generates the sessionId, a unique id that identifies each connection.\n\nThis process is initialized by one side displaying a sessionId through QR code (see the screenshot). The other peer needs just to scan the QR code on its device. Extension wallets are auto detected so you are always up to date and don't need to upgrade your dapp.\n\nConnect​\n\nApplication builds a connection using build() or buildLazy() function that returns interface to communicated with remote user. It is important to note, that the buildLazy() function allows for the modal to appear even when the sessionId is still undefined. App should define AppMetadata so wallets will be able to show it to user.\n\nTo start sending request like signTransaction user first need to connect to session. Once user establishes connection, application will get public key and the connection will be confirmed.\n\nAPI of application client is fit to match currently existing standards of corresponding blockchains\n\ninterface AppMetadata {\n  name: string;\n  url?: string;\n  description?: string;\n  icon?: string; // Url of app image\n  additionalInfo?: string;\n}\n\n\nYou may also want to specify some additional connection options. This can be achieved by creating an object that implements the below interface, and using it inside the build() or buildLazy() function. Note, that the disableModal property can be used for implementing a custom External modal.\n\ninterface ConnectionOptions {\n  disableModal?: boolean // default: false\n    //   Used for disabling modal in case you want to use your own\n  initOnConnect?: boolean // default: false\n    //   Ensures that the app is only build upon running the connect function\n  disableEagerConnect?: boolean // default: false\n    //   Do not connect eagerly, even if the previous session is saved\n}\n\n\nYou can find example usage of this adapter here: https://github.com/nightly-labs/connect/blob/main/sdk/apps/modal-example/src/routes/aleph.tsx\n\nimport { NightlyConnectAdapter } from '@nightlylabs/wallet-selector-polkadot'\nconst adapter = await NightlyConnectAdapter.build(\n  {\n    appMetadata: {\n      name: 'NC TEST AlephZero',\n      description: 'Nightly Connect Test',\n      icon: 'https://docs.nightly.app/img/logo.png',\n      additionalInfo: 'Courtesy of Nightly Connect team'\n    },\n    network: 'AlephZero'\n    //   persistent: false  -  Add this if you want to make the session non-persistent\n  }\n  // { initOnConnect: true, disableModal: true, disableEagerConnect: true }  -  You may specify the connection options object here\n  // document.getElementById(\"modalAnchor\")  -  You can pass an optional anchor element for the modal here\n)\n// Trigger connection\nawait adapter.connect()\n// After connection adapter turns into remote signer\n// Sign transaction\nawait payload.signAsync(publicKey, { signer: adapter.signer })\n// Disconnect client if you want to end session\nawait adapter.disconnect()\n\nDisconnect​\nINFO\n\nBoth client and application can initiate disconnection. User can force session termination in case of abuse. Only when application disconnects and session is not persistent, session is completely removed.\n\nEdit this page\nPrevious\nGet started with Substrate\nNext\nSign Transaction\nConnect\nDisconnect\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Sign Transaction | Nightly Connect",
    "url": "https://connect.nightly.app/docs/sui/sui/sign_transaction",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nGet started with Sui\nBuild & Connect\nListening for events\nSign Transaction\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nSuiSign Transaction\nSign Transaction\n\nSending a signTransaction requires established connection with user wallet.\n\nTransaction are sent to the client via wallet interface. Client can accept or reject the request. Once client signs transaction, signTransactionBlock() method returns resolved promise with Signed Transaction.\n\nimport { Transaction } from '@mysten/sui'\n\nconst tx = new Transaction()\nconst coin = tx.splitCoins(tx.gas, [tx.pure.u64(100)])\ntx.transferObjects([coin], tx.pure.address(RECEIVER_SUI_ADDRESS))\ntx.setSenderIfNotSet(RECEIVER_SUI_ADDRESS)\n\nconst signedTx: SignedTransaction = await app.signTransactionBlock({\n  transactionBlock: tx, // Transaction\n  account: aliceWalletAccount, // WalletAccount\n  chain: 'sui:testnet' // IdentifierString\n})\n\nEdit this page\nPrevious\nListening for events\nNext\nGet started with Substrate\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Listening for events | Nightly Connect",
    "url": "https://connect.nightly.app/docs/sui/sui/events",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nGet started with Sui\nBuild & Connect\nListening for events\nSign Transaction\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nSuiListening for events\nListening for events\n\nAn app can listen to events, subscribe to them and run some code whenever the particular event occurs.\n\nIf you have created a connection you can listen for events using the on() function.\n\nconst adapter = NightlyConnectAdapter.buildLazy({\n  appMetadata: {\n    name: 'NCTestSui',\n    description: 'Nightly Connect Test',\n    icon: 'https://docs.nightly.app/img/logo.png',\n    additionalInfo: 'Courtesy of Nightly Connect team'\n  }\n})\n\nadapter.on('connect', (accounts) => {\n    ...\n})\n\nadapter.on('change', (adapter) => {\n    ...\n})\n\nadapter.on('disconnect', () => {\n    ...\n})\n\nadapter.on('error', (error) => {\n    ...\n})\n\nEdit this page\nPrevious\nBuild & Connect\nNext\nSign Transaction\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Sign Transaction | Nightly Connect",
    "url": "https://connect.nightly.app/docs/solana/solana/sign_transaction",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nGet started with Solana\nBuild & Connect\nListening for events\nSign Transaction\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nSolanaSign Transaction\nSign Transaction\n\nSending a signTransaction requires established connection with user wallet.\n\nTransaction are sent to the client via wallet interface. Client can accept or reject the request. Once client signs transaction, signTransaction() method returns resolved promise with Signed Transaction.\n\nimport {\n  Keypair,\n  LAMPORTS_PER_SOL,\n  SystemProgram,\n  Transaction,\n  VersionedTransaction\n} from '@solana/web3.js'\n\nconst RECEIVER = Keypair.generate()\nconst ix = SystemProgram.transfer({\n  fromPubkey: alice_keypair.publicKey,\n  lamports: LAMPORTS_PER_SOL,\n  toPubkey: RECEIVER.publicKey\n})\nconst tx = new Transaction().add(ix)\ntx.feePayer = alice_keypair.publicKey\ntx.recentBlockhash = recentBlockhash\n\nconst signed: VersionedTransaction = await app.signTransaction(tx)\n\nEdit this page\nPrevious\nListening for events\nNext\nGet started with Sui\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Build & Connect | Nightly Connect",
    "url": "https://connect.nightly.app/docs/sui/sui/connect",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nGet started with Sui\nBuild & Connect\nListening for events\nSign Transaction\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nSuiBuild & Connect\nBuild & Connect\nINFO\n\nThis part of documentation is targeted to applications that want to implement nightly connect as wallet interface.\n\nTo get started, we need to connect the user to the application. In order to do so, application generates the sessionId, a unique id that identifies each connection.\n\nThis process is initialized by one side displaying a sessionId through QR code (see the screenshot). The other peer needs just to scan the QR code on its device. Extension wallets are auto detected so you are always up to date and don't need to upgrade your dapp.\n\nConnect​\n\nApplication builds a connection using build() or buildLazy() function that returns interface to communicated with remote user. It is important to note, that the buildLazy() function allows for the modal to appear even when the sessionId is still undefined. App should define AppMetadata so wallets will be able to show it to user.\n\nTo start sending request like signTransaction user first need to connect to session. Once user establishes connection, application will get public key and the connection will be confirmed.\n\nAPI of application client is fit to match currently existing standards of corresponding blockchains\n\ninterface AppMetadata {\n  name: string;\n  url?: string;\n  description?: string;\n  icon?: string; // Url of app image\n  additionalInfo?: string;\n}\n\n\nYou may also want to specify some additional connection options. This can be achieved by creating an object that implements the below interface, and using it inside the build() or buildLazy() function. Note, that the disableModal property can be used for implementing a custom External modal.\n\ninterface ConnectionOptions {\n  disableModal?: boolean // default: false\n    //   Used for disabling modal in case you want to use your own\n  initOnConnect?: boolean // default: false\n    //   Ensures that the app is only build upon running the connect function\n  disableEagerConnect?: boolean // default: false\n    //   Do not connect eagerly, even if the previous session is saved\n}\n\nimport { NightlyConnectSuiAdapter } from '@nightlylabs/wallet-selector-sui'\n\nconst adapter = await NightlyConnectSuiAdapter.build(\n  {\n    appMetadata: {\n      name: 'NCTestSui',\n      description: 'Nightly Connect Test',\n      icon: 'https://docs.nightly.app/img/logo.png',\n      additionalInfo: 'Courtesy of Nightly Connect team'\n    }\n    //   persistent: false  -  Add this if you want to make the session non-persistent\n  }\n  // { initOnConnect: true, disableModal: true, disableEagerConnect: true }  -  You may specify the connection options object here\n  // document.getElementById(\"modalAnchor\")  -  You can pass an optional anchor element for the modal here\n)\n\n// Trigger connection\nawait adapter.connect()\n// After connection adapter turns into remote signer\n\n// Sign transaction\nawait adapter.signTransactionBlock()\n\n// Disconnect client if you want to end session\nawait adapter.disconnect()\n\nDisconnect​\nINFO\n\nBoth client and application can initiate disconnection. User can force session termination in case of abuse. Only when application disconnects and session is not persistent, session is completely removed.\n\nEdit this page\nPrevious\nGet started with Sui\nNext\nListening for events\nConnect\nDisconnect\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Build & Connect | Nightly Connect",
    "url": "https://connect.nightly.app/docs/solana/solana/connect",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nGet started with Solana\nBuild & Connect\nListening for events\nSign Transaction\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nSolanaBuild & Connect\nBuild & Connect\nINFO\n\nThis part of documentation is targeted to applications that want to implement nightly connect as wallet interface.\n\nTo get started, we need to connect the user to the application. In order to do so, application generates the sessionId, a unique id that identifies each connection.\n\nThis process is initialized by one side displaying a sessionId through QR code (see the screenshot). The other peer needs just to scan the QR code on its device. Extension wallets are auto detected so you are always up to date and don't need to upgrade your dapp.\n\nConnect​\n\nApplication builds a connection using build() or buildLazy() function that returns interface to communicated with remote user. It is important to note, that the buildLazy() function allows for the modal to appear even when the sessionId is still undefined. App should define AppMetadata so wallets will be able to show it to user.\n\nTo start sending request like signTransaction user first need to connect to session. Once user establishes connection, application will get public key and the connection will be confirmed.\n\nAPI of application client is fit to match currently existing standards of corresponding blockchains\n\ninterface AppMetadata {\n  name: string;\n  url?: string;\n  description?: string;\n  icon?: string; // Url of app image\n  additionalInfo?: string;\n}\n\n\nYou may also want to specify some additional connection options. This can be achieved by creating an object that implements the below interface, and using it inside the build() or buildLazy() function. Note, that the disableModal property can be used for implementing a custom External modal.\n\ninterface ConnectionOptions {\n  disableModal?: boolean // default: false\n    //   Used for disabling modal in case you want to use your own\n  initOnConnect?: boolean // default: false\n    //   Ensures that the app is only build upon running the connect function\n  disableEagerConnect?: boolean // default: false\n    //   Do not connect eagerly, even if the previous session is saved\n}\n\n\nYou can implement nightly connect as full selector or use it with popular solana adapter https://github.com/solana-labs/wallet-adapter\n\nimport { NightlyConnectAdapter } from '@nightlylabs/wallet-selector-solana'\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base'\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui'\nimport { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-wallets'\nimport { clusterApiUrl } from '@solana/web3.js'\nimport type { FC, ReactNode } from 'react'\nimport React, { useMemo } from 'react'\nexport const App: FC = () => {\n  return (\n    <Context>\n      <Content />\n    </Context>\n  )\n}\nconst Context: FC<{ children: ReactNode }> = ({ children }) => {\n  // The network can be set to 'devnet', 'testnet', or 'mainnet-beta'.\n  const network = WalletAdapterNetwork.Devnet\n  // You can also provide a custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), [network])\n  const wallets = useMemo(\n    () => [\n      /**\n       * Wallets that implement either of these standards will be available automatically.\n       *\n       *   - Solana Mobile Stack Mobile Wallet Adapter Protocol\n       *     (https://github.com/solana-mobile/mobile-wallet-adapter)\n       *   - Solana Wallet Standard\n       *     (https://github.com/solana-labs/wallet-standard)\n       *\n       * If you wish to support a wallet that supports neither of those standards,\n       * instantiate its legacy wallet adapter here. Common legacy adapters can be found\n       * in the npm package `@solana/wallet-adapter-wallets`.\n       */\n      new UnsafeBurnerWalletAdapter(),\n      NightlyConnectAdapter.buildLazy(\n        {\n          appMetadata: {\n            name: 'SolanaAdapter',\n            description: 'Solana Adapter Test',\n            icon: 'https://docs.nightly.app/img/logo.png',\n            additionalInfo: 'Courtesy of Nightly Connect team'\n          }\n          //   persistent: false  -  Add this if you want to make the session non-persistent\n        }\n        // { initOnConnect: true, disableModal: true, disableEagerConnect: true }  -  You may specify the connection options object here\n        // document.getElementById(\"modalAnchor\")  -  You can pass an optional anchor element for the modal here\n      )\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [network]\n  )\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>{children}</WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  )\n}\nconst Content: FC = () => {\n  return <WalletMultiButton />\n}\n\nDisconnect​\nINFO\n\nBoth client and application can initiate disconnection. User can force session termination in case of abuse. Only when application disconnects and session is not persistent, session is completely removed.\n\nEdit this page\nPrevious\nGet started with Solana\nNext\nListening for events\nConnect\nDisconnect\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Listening for events | Nightly Connect",
    "url": "https://connect.nightly.app/docs/solana/solana/events",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nGet started with Solana\nBuild & Connect\nListening for events\nSign Transaction\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nSolanaListening for events\nListening for events\n\nAn app can listen to events, subscribe to them and run some code whenever the particular event occurs.\n\nIf you have created a connection you can listen for events using the on() function.\n\nconst adapter = NightlyConnectAdapter.buildLazy({\n  appMetadata: {\n    name: 'NCTestSolana',\n    description: 'Nightly Connect Test',\n    icon: 'https://docs.nightly.app/img/logo.png',\n    additionalInfo: 'Courtesy of Nightly Connect team'\n  },\n  url: 'https://nc2.nightly.app'\n})\n\nadapter.on('connect', (publicKey) => {\n    ...\n})\n\nadapter.on('change', (adapter) => {\n    ...\n})\n\nadapter.on('disconnect', () => {\n    ...\n})\n\nadapter.on('error', (error) => {\n    ...\n})\n\nEdit this page\nPrevious\nBuild & Connect\nNext\nSign Transaction\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Build & Connect | Nightly Connect",
    "url": "https://connect.nightly.app/docs/for_wallets/for_wallets/connect",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nBuild & Connect\nSign Transaction\nSign Messages\nPush notifications\nFor walletsBuild & Connect\nBuild & Connect\nINFO\n\nThis part of documentation is targeted to clients/wallets that want to enable nightly connect as way of interaction with external applications.\n\nTo get started, first we establish Connection with server create(). This enables use interactions with our sessions.\n\nAfter that we can query session info with getInfo(), which requires 1 argument, sessionId (the one from the QR code).\n\nOnce client decides to connect and approves the request, call the connect() method.\n\nexport interface AppMetadata {\n  name: string;\n  url?: string;\n  description?: string;\n  icon?: string;\n  additionalInfo?: string;\n}\n\ninterface GetInfoResponse {\n  responseId: string;\n  network: Network;\n  version: Version; // string\n  appMetadata: AppMetadata;\n}\n\ntype Connect = {\n  publicKeys: string[],\n  sessionId: string,\n  notification?: Notification | undefined, // for notification purposes\n  device?: Device | undefined,\n  metadata?: string | undefined\n}\n\nBuild & Connect​\nSolana\nSUI\nSubstrate\nAptos\nMovement\nimport { ClientSolana } from '@nightlylabs/nightly-connect-solana'\n\nconst client: ClientSolana = await ClientSolana.create({\n  url: RELAY_ENDPOINT // default: https://nc2.nightly.app\n})\nconst info: GetInfoResponse = await client.getInfo(sessionId)\n\nconst message: Connect = {\n  publicKeys: [\n    '9mtkm594sexac7G6jct3PZqyEVe3eUWMx6SUcEhYBRxr',\n    '8MtpTNvQfr7iAWYLjJeyMw19vHw7bx7jrmoamkootfvA'\n  ],\n  sessionId: sessionId\n}\nawait client.connect(message)\n\nDisconnect​\nINFO\n\nBoth client and application can initiate disconnection.\nThough when it is the client who disconnects, the session will not be terminated.\nOnly when application disconnects, the session will be closed.\n\nEdit this page\nPrevious\nExternal modal\nNext\nSign Transaction\nBuild & Connect\nDisconnect\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Modal UI overrides | Nightly Connect",
    "url": "https://connect.nightly.app/docs/customization/customization/ui_overrides",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nModal UI overrides\nExternal modal\nFor wallets\nCustomizationModal UI overrides\nModal UI overrides\n\nNightly connect offers a default modal that comes along with the adapter, so that you don't have to put any additional work into implementing it yourself. Nevertheless, if you wish to do so, you can.\n\nThere are two ways of customizing the modal, one of which is UI overrides and the other is implementing an external modal.\n\nUI overrides​\n\nCustomizing with the use of UI overrides is easier than creating the external modal, but it guarantees only limited freedom in the customization options.\n\nThe overrides is a set of properties, that make up an object, which then is optionally passed into the build() or buildLazy() functions. The properties look like this.\n\ninterface UIOverrides {\n    variablesOverride?: object\n    stylesOverride?: string\n    qrConfigOverride?: Partial<XMLOptions>\n}\n\ninterface XMLOptions {\n    image?: string;\n    imageWidth?: number;\n    imageHeight?: number;\n    width: number;\n    height: number;\n    margin: number;\n    data: string;\n    qrOptions: {\n        typeNumber: TypeNum;\n        mode?: Mode;\n        errorCorrectionLevel: ErrorCorrectionLevel;\n    };\n    imageOptions: {\n        hideBackgroundDots: boolean;\n        imageSize: number;\n        crossOrigin?: string;\n        margin: number;\n    };\n    dotsOptions: {\n        color: string;\n    };\n    cornersDotOptions: {\n        color: string;\n    };\n    cornersSquareOptions: {\n        color: string;\n    };\n    backgroundOptions: {\n        color: string;\n    };\n}\n\ntype TypeNum = Range<0, 41>;\n\nenum Mode {\n    Numeric = \"Numeric\",\n    Alphanumeric = \"Alphanumeric\",\n    Byte = \"Byte\",\n    Kanji = \"Kanji\"\n}\n\nenum ErrorCorrectionLevel {\n    L = \"L\",\n    M = \"M\",\n    Q = \"Q\",\n    H = \"H\"\n}\n\nINFO\n\nThe XMLOptions interface, specifies the override object for the QR code, which is displayed on the modal.\n\nAs you can see, the options are plentiful and allow for great flexibility in customizing the appearance of the modal. Below is the example of implementing the overrides.\n\nconst adapter = NightlyConnectAdapter.buildLazy(\n  {\n    appMetadata: {\n      name: 'NC TEST AlephZero',\n      description: 'Nightly Connect Test',\n      icon: 'https://docs.nightly.app/img/logo.png',\n      additionalInfo: 'Courtesy of Nightly Connect team'\n    },\n    network: 'AlephZero'\n  },\n  {\n    variablesOverride: {\n      '--nc-color-primary': 'green',\n      '--nc-img-logo': 'url(https://alephzero.org/aleph-design/brand-elements/logo-day.svg)'\n    }, // override the CSS variables\n    stylesOverride: `\n        .nc_headerWrapper {\n            background-color: red;\n        }\n\n        .nc_headerLogo {\n            width: 200px;\n        }\n\n        .nc_modalContent {\n            border-radius: 0;\n            border: 3px dashed var(--nc-color-primary);\n        }\n        `,\n    // override the styles manually\n    qrConfigOverride: {\n      image: customFennecXml,\n      dotsOptions: {\n        color: 'gold'\n      }\n    }\n    // override the qr code configuration\n  }\n)\n\nINFO\n\nThe example is built using Substrate, but can be implemented using Solana, Aptos, Movement and Sui as well.\n\nEdit this page\nPrevious\nListening for events\nNext\nExternal modal\nUI overrides\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Get started with Aptos | Nightly Connect",
    "url": "https://connect.nightly.app/docs/aptos/aptos/start",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nGet started with Aptos\nBuild & Connect\nSign Transaction\nListening for events\nMovement M1\nCustomization\nFor wallets\nAptosGet started with Aptos\nGet started with Aptos\nWeb template​\n\nTo get started with aptos, use the source code of the template below, and follow the installation instructions.\n\n\n\nPreview: https://aptos-web3-template.vercel.app​\n\n\nSource code: https://github.com/nightly-labs/aptos-web3-template​\nManual installation​\n\nIf you want to opt for greater flexibility, install the package, as described below and then visit the Aptos Build & Connect.\n\nNOTE\n\nSimply integrate Nightly Connect to your application or wallet with our Nightly Aptos Connect package.\n\n# Using NPM\nnpm i @nightlylabs/wallet-selector-aptos\n# Using Yarn\nyarn add @nightlylabs/wallet-selector-aptos\n\nEdit this page\nPrevious\nSign Transaction\nNext\nBuild & Connect\nWeb template\nManual installation\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Get started with Movement | Nightly Connect",
    "url": "https://connect.nightly.app/docs/movement/movement/start",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nGet started with Movement\nBuild & Connect\nSign Transaction\nListening for events\nCustomization\nFor wallets\nMovement M1Get started with Movement\nGet started with Movement\nWeb template​\nINFO\n\nMovement M1 network relies heavily on the Aptos network, so many functionalities are shared.\n\nTo get started with movement, use the source code of the template below, and follow the installation instructions.\n\n\n\nPreview: https://movement-web3-template.vercel.app​\n\n\nSource code: https://github.com/nightly-labs/movement-web3-template​\nManual installation​\n\nIf you want to opt for greater flexibility, install the package, as described below and then visit the Movement Build & Connect.\n\nNOTE\n\nSimply integrate Nightly Connect to your application or wallet with our Nightly Aptos Connect package.\n\n# Using NPM\nnpm i @nightlylabs/wallet-selector-aptos\n# Using Yarn\nyarn add @nightlylabs/wallet-selector-aptos\n\nEdit this page\nPrevious\nListening for events\nNext\nBuild & Connect\nWeb template\nManual installation\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Get started with Substrate | Nightly Connect",
    "url": "https://connect.nightly.app/docs/substrate/substrate/start",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nGet started with Substrate\nBuild & Connect\nSign Transaction\nAptos\nMovement M1\nCustomization\nFor wallets\nSubstrateGet started with Substrate\nGet started with Substrate\nWeb template​\n\nTo get started with substrate, use the source code of the template below, and follow the installation instructions.\n\n\n\nPreview: https://aleph-zero-web3-template.nightly.app​\n\n\nSource code: https://github.com/nightly-labs/aleph-zero-web3-template​\nManual installation​\n\nIf you want to opt for greater flexibility, install the package, as described below and then visit the Substrate Build & Connect.\n\nNOTE\n\nSimply integrate Nightly Connect to your application or wallet with our Nightly Polkadot Connect package.\n\n# Using NPM\nnpm i @nightlylabs/wallet-selector-polkadot\n# Using Yarn\nyarn add @nightlylabs/wallet-selector-polkadot\n\nEdit this page\nPrevious\nSign Transaction\nNext\nBuild & Connect\nWeb template\nManual installation\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Get started with Sui | Nightly Connect",
    "url": "https://connect.nightly.app/docs/sui/sui/start",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nGet started with Sui\nBuild & Connect\nListening for events\nSign Transaction\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nSuiGet started with Sui\nGet started with Sui\nWeb template​\n\nTo get started with substrate, use the source code of the template below, and follow the installation instructions.\n\n\n\nPreview: https://sui-web3-template.nightly.app​\n\n\nSource code: https://github.com/nightly-labs/sui-web3-template​\nManual installation​\n\nIf you want to opt for greater flexibility, install the package, as described below and then visit the Sui Build & Connect.\n\nNOTE\n\nSimply integrate Nightly Connect to your application or wallet with our Nightly Sui Connect package.\n\n# Using NPM\nnpm i @nightlylabs/wallet-selector-sui\n# Using Yarn\nyarn add @nightlylabs/wallet-selector-sui\n\nEdit this page\nPrevious\nSign Transaction\nNext\nBuild & Connect\nWeb template\nManual installation\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Getting started | Nightly Connect",
    "url": "https://connect.nightly.app/docs/start/",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nGetting started\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nEdit this page\nPrevious\nHome\nNext\nGet started with Solana\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Get started with Solana | Nightly Connect",
    "url": "https://connect.nightly.app/docs/solana/solana/start",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nGet started with Solana\nBuild & Connect\nListening for events\nSign Transaction\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nSolanaGet started with Solana\nGet started with Solana\nWeb template​\n\nTo get started with solana, use the source code of the template below, and follow the installation instructions.\n\n\n\nPreview: https://solana-web3-template.nightly.app​\n\n\nSource code: https://github.com/nightly-labs/solana-web3-template​\nManual installation​\n\nIf you want to opt for greater flexibility, install the package, as described below and then visit the Solana Build & Connect.\n\nNOTE\n\nSimply integrate Nightly Connect to your application or wallet with our Nightly Solana Connect package.\n\n# Using NPM\nnpm i @nightlylabs/wallet-selector-solana\n# Using Yarn\nyarn add @nightlylabs/wallet-selector-solana\n\nEdit this page\nPrevious\nGetting started\nNext\nBuild & Connect\nWeb template\nManual installation\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  },
  {
    "title": "Home | Nightly Connect",
    "url": "https://connect.nightly.app/docs/",
    "html": "Skip to main content\nNightly Connect\nDocs\nGetting started\nNetworks\nCustomization\nFor wallets\nDemo\nTwitter\nDiscord\nGitHub\nHome\nGetting started\nSolana\nSui\nSubstrate\nAptos\nMovement M1\nCustomization\nFor wallets\nHome\nHome\n\nNightly created to Connect​\n\nNightly Connect is a permissionless, open-source solution that serves as both a wallet adapter and a bridge wallet, enabling connections through QR codes or deep links.\n\nWe built this tool to lighten dApp developers in continuously adding new wallets. Now, after implementing Nightly Connect once, all standard-compliant wallets will be added automatically without any action required from dApp.\n\nOur goal is to be compatible with every mobile wallet. Unfortunately, this requires minimal changes on the wallet's side. But it's worth it - after implementing these changes, any mobile application will be able to connect to any dApp through Nightly Connect using QR codes or deep links, and will gain access to tools such as push notifications.\n\nEdit this page\nNext\nGetting started\nNightly created to Connect\nDocs\nHome\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Nightly | Built with Docusaurus."
  }
]