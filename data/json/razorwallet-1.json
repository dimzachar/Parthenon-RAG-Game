[
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/suiwalletprovider/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsSuiWalletProvider\nSuiWalletProvider\nDescription​\n\nThe SuiWalletProvider provides the essential data and functions for our kit. And it is the entrypoint for customized configurations.\n\nTIP\n\nSo you need to wrap all the kit hooks and components under SuiWalletProvider before you start to use them.\n\nExamples​\nBasic Usage​\nimport ReactDOM from 'react-dom';\nimport { SuiWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction Root() {\n  // wrap your app component\n  <SuiWalletProvider>\n    <App />\n  </SuiWalletProvider>;\n}\n\nReactDOM.render(<Root />, docoument.getElementById('root'));\n\nCustomize your wallet list on modal​\n\nCheck #Tutorial/Customize Wallet List for details.\n\nConfigure supported chains (networks)​\n\nCheck #Tutorial/Configure supported chains (networks) for details.\n\nAPI​\nProps​\nProp\tType\tDefault\tDescription\ndefaultWallets\tIDefaultWallet\t[...AllPresetWallets]\tConfigure wallet list for dapp, by default we load all the preset wallets\nchains\tChain[]\tDefaultChains\tConfigure supported chains (networks) for dapp\nautoConnect\tboolean\ttrue\tAuto connect to the last connected wallet when launched\nPrevious\nSuiConnectButton\nNext\nHooks\nDescription\nExamples\nBasic Usage\nCustomize your wallet list on modal\nConfigure supported chains (networks)\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Page Not Found | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/Hooks/useAccountBalance",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nPage Not Found\n\nWe could not find what you were looking for.\n\nPlease contact the owner of the site that linked you to the original URL and let them know their link is broken.\n\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/usesuiwallet/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseSuiWallet\nuseSuiWallet\nDescription​\n\nuseSuiWallet is the most useful React Hook to play with. For details of React Hook, check the React doc.\n\nIt retrieves all the properties and functions from WalletProvider, with which you can get properties and call functions of a connected wallet.\n\nTIP\n\nMake sure it runs in a React component under WalletProvider\n\nExamples​\nBasic Usage​\n\nWe start with a simple senario like getting information from the connected wallet .\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useSuiWallet();\n  console.log('wallet status', wallet.status);\n  console.log('connected wallet name', wallet.name);\n  console.log('connected account info', wallet.account);\n}\n\nSign and Execute Transactions​\n\nHere we define a moveCall transaction to implement a simple nft minting example.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useSuiWallet();\n\n  async function handleSignAndExecuteTxBlock() {\n    if (!wallet.connected) return;\n\n    // define a programmable transaction\n    const tx = new TransactionBlock();\n    const packageObjectId = '0xXXX';\n    tx.moveCall({\n      target: `${packageObjectId}::nft::mint`,\n      arguments: [tx.pure('Example NFT')],\n    });\n\n    try {\n      // execute the programmable transaction\n      const resData = await wallet.signAndExecuteTransactionBlock({\n        transactionBlock: tx,\n      });\n      console.log('nft minted successfully!', resData);\n      alert('Congrats! your nft is minted!');\n    } catch (e) {\n      console.error('nft mint failed', e);\n    }\n  }\n\n  return <button onClick={handleSignAndExecuteTx}> Mint Your NFT !</button>;\n}\n\nSign Message​\n\nMessage signing is an important action to verify whether an approval is confirmed by the owner of an account.\n\nIt is useful for DApp to ask user's approval for scenarios like approving Terms of Service and Privacy Policy (Below is an example of message signing in OpenSea, the NFT marketplace in Ethereum)\n\nHere is an example for signing a simple message \"Hello World\".\n\nNotice that all the params are Uint8Array (i.e. bytes) type. For browser app, you can use TextEncoder to encode and decode.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\nimport * as tweetnacl from 'tweetnacl';\n\nfunction App() {\n  const wallet = useSuiWallet();\n\n  async function handleSignMsg() {\n    try {\n      const msg = 'Hello world!';\n      // convert string to Uint8Array\n      const msgBytes = new TextEncoder().encode(msg);\n\n      const result = await wallet.signPersonalMessage({\n        message: msgBytes,\n      });\n      // verify signature with publicKey and SignedMessage (params are all included in result)\n      const verifyResult = await wallet.verifySignedMessage(\n        result,\n        wallet.account.publicKey\n      );\n      if (!verifyResult) {\n        console.log(\n          'signPersonalMessage succeed, but verify signedMessage failed'\n        );\n      } else {\n        console.log(\n          'signPersonalMessage succeed, and verify signedMessage succeed!'\n        );\n      }\n    } catch (e) {\n      console.error('signPersonalMessage failed', e);\n    }\n  }\n\n  return <button onClick={handleSignMsg}> Sign Message </button>;\n}\n\nGet the connected chain (network) of wallet​\nCAUTION\n\nSince this is not a standard feature, not all the wallet has implemented. Check Can I Use for further information.\n\nYour dapp can get the current connected chain of wallet.\n\nINFO\n\nFor most wallets, if user switches network inside the wallet, the value WOULD NOT get updated. (Except for Razor Wallet, we implemented this network change notification for a better development experience)\n\nThis is because Sui team suggests each dapp should separate the environments for each chain (sui:devnet, sui:testnet, sui:mainnet). And the active chain returned by the connected wallet could be used to match the dapp's environment.\n\nIn a nutshell, eliminating the need to switch network for dapp is a better user experience for a long term.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\nimport * as tweetnacl from 'tweetnacl';\n\nfunction App() {\n  const wallet = useSuiWallet();\n\n  useEffect(() => {\n    if (!wallet.connected) return;\n    console.log('current connected chain (network)', wallet.chain?.name); // example output: \"movement:m2:devnet\", \"movement:m2:testnet\" or \"movement:m2:mainnet\"\n  }, [wallet.connected]);\n}\n\nAPI References​\nname​\n\nThe name of connected wallet.\n\nType\tDefault\nstring | undefined\tundefined\nconnection status​\n\nThe connection status of wallet.\n\nProperties\tType\tDefault\nconnecting\tboolean\tfalse\nconnected\tboolean\tfalse\nstatus\t'disconnected' | 'connecting' | 'connected'\t'disconnected'\nconst { status, connected, connecting } = useSuiWallet();\n\n// the assert expressions are equally the same\nassert(status === 'disconnected', !connecting && !connected); // not connect to wallet\nassert(status === 'connecting', connecting); // now connecting to the wallet\nassert(status === 'connected', connected); // connected to the wallet\n\naccount​\n\nThe account info in the connected wallet, including address, publicKey etc.\n\nType\tDefault\nWalletAccount\tundefined\nconst { connected, account } = useSuiWallet();\n\nfunction printAccountInfo() {\n  if (!connected) return;\n  console.log(account?.address);\n  console.log(account?.publicKey);\n}\n\naddress​\n\nAlias for account.address\n\nselect​\nType\tDefault\n(WalletName: string) => void\t\ngetAccounts​\n\nGet all the accessible accounts returned by wallet.\n\nType\tDefault\n() => Promise<string[]>\t\n\nThe getAccounts will get the current wallet's account address. Now one wallet only have one account.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\n\nfunction YourComponent() {\n  const wallet = useSuiWallet();\n\n  function handleGetAccounts() {\n    if (!wallet.connected) return;\n    getAccounts().then((accounts) => {\n      console.log(accounts);\n    });\n  }\n}\n\nchains​\n\nConfiguration of supported chains from WalletProvider\n\nType\tDefault\nChain[]\tDefaultChains\nchain​\n\nCurrent connected chain of wallet.\n\nMight not be synced with the wallet if the wallet doesn't support wallet-standard \"change\" event.\n\nType\tDefault\nstring\tthe first value of configured chains or UnknownChain\nadapter​\n\nThe adapter normalized from the raw adapter of the connected wallet. You can call all the properties and functions on it, which is followed the @mysten/wallet-standard\n\n| Type | Default | | -------------------------------------------- | --------- | --------- | | IWalletAdapter | undefined | undefined |\n\nsignAndExecuteTransactionBlock​\n\nThe universal function to send and execute transactions via connected wallet.\n\nType\tDefault\n({transactionBlock: TransactionBlock, requestType?: ExecuteTransactionRequestType, options?: SuiTransactionBlockResponseOptions}) => Promise<SuiSignAndExecuteTransactionBlockOutput>\t\nsignPersonalMessage​\n\nThe function is for message signing.\n\nType\tDefault\n(input: {message: Uint8Array}) => Promise<{signature: string; bytes: string}>\t\nverifySignedMessage​\n\nThis function is for verifying the output of signPersonalMessage following the Sui standard. Returns true if the returned signature matches the message to be signed and the signer's publicKey.\n\nFor details please check here\n\nType\tDefault\n(input: {signature: string; messageBytes: string}) => Promise<boolean>\t\non​\n\nThe function for wallet event listening. Returns the off function to remove listener.\n\nType\tDefault\n<E extends WalletEvent>(event: E, listener: WalletEventListeners[E], ) => () => void;\t\n\nAll the wallet events:\n\nEvent\tListener\tDescription\naccountChange\t(params: { account: WalletAccount; }) => void;\tEmit when wallet app changes its account\nfeatureChange\t(params: { features: string[]; }) => void;\tEmit when wallet app changes its wallet-standard features\nchange\t(params: { chain?: string, account?: WalletAccount; features?: string[]; }) => void;\tRaw change event defined by wallet-standard\nDeprecated API​\nsignAndExecuteTransaction​\n\nDeprecated, use signAndExecuteTransactionBlock instead.\n\nexecuteMoveCall and executeSerializedMoveCall​\n\nDeprecated, use signAndExecuteTransactionBlock instead.\n\nwallet​\n\nDeprecated, use adapter instead.\n\nconst wallet = useSuiWallet();\n- console.log(wallet.wallet.name);\n+ console.log(wallet.adapter.name);\n\ngetPublicKey​\n\nDeprecated, use account.publicKey instead.\n\nconst wallet = useSuiWallet();\n- console.log(wallet.getPublicKey());\n+ console.log(wallet.account.publicKey);\n\nsignMessage​\n\nDeprecated, use signPersonalMessage instead.\n\nType\tDefault\n(input: {message: Uint8Array}) => Promise<{signature: string; messageBytes: string}>\t\nPrevious\nuseSuiProvider\nNext\nStyling\nDescription\nExamples\nBasic Usage\nSign and Execute Transactions\nSign Message\nGet the connected chain (network) of wallet\nAPI References\nname\nconnection status\naccount\naddress\nselect\ngetAccounts\nchains\nchain\nadapter\nsignAndExecuteTransactionBlock\nsignPersonalMessage\nverifySignedMessage\non\nDeprecated API\nsignAndExecuteTransaction\nexecuteMoveCall and executeSerializedMoveCall\nwallet\ngetPublicKey\nsignMessage\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/usesuiprovider/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseSuiProvider\nuseSuiProvider\nIntroduction​\n\nThis hook is used to provide the Sui SuiClient interface in React Hooks style.\n\nSee @mysten/sui.js package on npm or SuiClient for more information.\n\nTIP\n\nThis hook is internally JUST importing the SuiClient interface and implemention from @mysten/sui.js package. What we do is caring about versioning, state management, and other stuffs for you.\n\nimport { useSuiProvider } from '@razorlabs/wallet';\nconst endpoint = 'https://sui.devnet.m2.movementlabs.xyz'\nfunction YourComponent() {\n  const {\n    getObject,\n    getOwnedObjects,\n    getBalance,\n    // ... other methods\n  } = useSuiProvider(endpoint);\n\n  return <>...</>;\n}\n\nUsing the SuiClient interface​\n\nBut if you use the SuiClient provided by useSuiProvider, you can call the sui_executeTransaction RPC endpoint in a more convenient way:\n\nfunction YourComponent() {\n  const endpoint = 'https://sui.devnet.m2.movementlabs.xyz'\n  const { executeTransactionBlock } = useSuiProvider(endpoint);\n\n  return (\n    <div\n      onClick={async () => {\n        // ... some code to get the tx_bytes, signature, and pub_key\n        const resp = await executeTransactionBlock({\n          transactionBlock: tx,\n          signature: signature,\n        });\n        // resp is the response from the Client, and has detailed typings defination\n      }}\n    >...</>\n  );\n}\n\nPrevious\nuseSuiAccountBalance\nNext\nuseSuiWallet\nIntroduction\nUsing the SuiClient interface\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/usesuiaccountbalance/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseSuiAccountBalance\nuseSuiAccountBalance\nIntroduction​\n\nYou can get the balance of the current account under the selected network. The useSuiAccountBalance will return the current account's balance, loading status, error object. When fetching the banlance data, loading will set to true, otherwise false. If fetch failed, error will be an Error object instance and shows why fetch failed.\n\nTIP\n\nIf error is not null, it means fetch balance failed. In this case, the balance will set to be 0.\n\nAPI​\nProperties\tDescription\tType\tDefault\nerror\terror or null\tError | null\tnull\nloading\tfetch status\tboolean\tfalse\nbalance\tthe balance of current account, converted from BigInt\tstring\t'0'\nerror​\n\nThe error object tells why get balance failed. If error is not null, it may means network error or other problems of you app.\n\nloading​\n\nThe loading can be used to add loading when fetching acount balance.\n\nimport { useSuiAccountBalance } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const { error, loading, balance } = useSuiAccountBalance();\n\n  return (\n    <div>{loading && <Spin />}</div>\n    <div>{balance}</div>\n  )\n}\n\nbalance​\n\nThe balance's type is string. If you want to use balance to calculate, you should convert it to bigint or number.\n\nIn some case, the balance can be bigger than Number.MAX_SAFE_INTEGER(2^53 - 1). If your project support Bigint(https://caniuse.com/?search=Bigint), you can derectly use BigInt method to convert, otherwise, use some lib to calculation bigint.\n\nExample​\nimport { useEffect } from 'react';\n\ninterface AccountBalanceResponse {\n  error: Error | null;\n  loading: boolean;\n  balance: string;\n}\n\nimport { useSuiAccountBalance } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const { error, loading, balance } = useSuiAccountBalance();\n\n  useEffect(() => {\n    // if you want to do comparison or calculation with balance,\n    // use Number or BigInt to convert the balance string\n    if (Number(balance) > 1000000) {\n      console.log('You are a millionare!');\n    }\n  }, [balance]);\n\n  return (\n    <div>\n      <div>fetch balance loading status: {loading}</div>\n      <div>account balance: {balance}</div>\n    </div>\n  );\n}\n\nPrevious\nuseAptosWallet\nNext\nuseSuiProvider\nIntroduction\nAPI\nerror\nloading\nbalance\nExample\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/useaptoswallet/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseAptosWallet\nuseAptosWallet\nDescription​\n\nuseAptosWallet is the most useful React Hook to play with. For details of React Hook, check the React doc.\n\nIt retrieves all the properties and functions from AptosWalletProvider, with which you can get properties and call functions of a connected wallet.\n\nTIP\n\nMake sure it runs in a React component under AptosWalletProvider\n\nExamples​\nBasic Usage​\n\nWe start with a simple senario like getting information from the connected wallet .\n\nimport { useAptosWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useAptosWallet();\n  console.log('wallet status', wallet.status);\n  console.log('connected wallet name', wallet.name);\n  console.log('connected account info', wallet.account);\n}\n\nSign Message​\n\nMessage signing is an important action to verify whether an approval is confirmed by the owner of an account.\n\nIt is useful for DApp to ask user's approval for scenarios like approving Terms of Service and Privacy Policy (Below is an example of message signing in OpenSea, the NFT marketplace in Ethereum)\n\nHere is an example for signing a simple message \"Hello World\".\n\nimport { useAptosWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useAptosWallet();\n\n  async function handleSignMsg() {\n    try {\n      const msg = 'Hello world!';\n\n      const result = await wallet.signMessage({\n        message: msg,\n      });\n      // verify signature with publicKey and SignedMessage (params are all included in result)\n      if (!result) {\n        console.log(\n          'signMessage succeed, but verify signedMessage failed'\n        );\n      } else {\n        console.log(\n          'signMessage succeed, and verify signedMessage succeed!'\n        );\n      }\n    } catch (e) {\n      console.error('signMessage failed', e);\n    }\n  }\n\n  return <button onClick={handleSignMsg}> Sign Message </button>;\n}\n\nGet the connected chain (network) of wallet​\nCAUTION\n\nSince this is not a standard feature, not all the wallet has implemented. Check Can I Use for further information.\n\nYour dapp can get the current connected chain of wallet.\n\nINFO\n\nFor most wallets, if user switches network inside the wallet, the value WOULD NOT get updated. (Except for Razor Wallet, we implemented this network change notification for a better development experience)\n\nimport { useAptosWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useAptosWallet();\n\n  useEffect(() => {\n    if (!wallet.connected) return;\n    console.log('current connected chain (network)', wallet.chain?.name); // example \n  }, [wallet.connected]);\n}\n\nAPI References​\nname​\n\nThe name of connected wallet.\n\nType\tDefault\nstring | undefined\tundefined\nconnection status​\n\nThe connection status of wallet.\n\nProperties\tType\tDefault\nconnecting\tboolean\tfalse\nconnected\tboolean\tfalse\nstatus\t'disconnected' | 'connecting' | 'connected'\t'disconnected'\nconst { status, connected, connecting } = useAptosWallet();\n\n// the assert expressions are equally the same\nassert(status === 'disconnected', !connecting && !connected); // not connect to wallet\nassert(status === 'connecting', connecting); // now connecting to the wallet\nassert(status === 'connected', connected); // connected to the wallet\n\naccount​\n\nThe account info in the connected wallet, including address, publicKey etc.\n\nType\tDefault\nWalletAccount\tundefined\nconst { connected, account } = useAptosWallet();\n\nfunction printAccountInfo() {\n  if (!connected) return;\n  console.log(account?.address);\n  console.log(account?.publicKey);\n}\n\naddress​\n\nAlias for account.address\n\nselect​\nType\tDefault\n(WalletName: string) => void\t\ngetAccounts​\n\nGet all the accessible accounts returned by wallet.\n\nType\tDefault\n() => Promise<string[]>\t\n\nThe getAccounts will get the current wallet's account address. Now one wallet only have one account.\n\nimport { useAptosWallet } from '@razorlabs/wallet-kit';\n\nfunction YourComponent() {\n  const wallet = useAptosWallet();\n\n  function handleGetAccounts() {\n    if (!wallet.connected) return;\n    getAccounts().then((accounts) => {\n      console.log(accounts);\n    });\n  }\n}\n\nchains​\n\nConfiguration of supported chains from WalletProvider\n\nType\tDefault\nChain[]\tDefaultChains\nchain​\n\nCurrent connected chain of wallet.\n\nMight not be synced with the wallet if the wallet doesn't support wallet-standard \"change\" event.\n\nType\tDefault\nstring\tthe first value of configured chains or UnknownChain\nadapter​\n\nThe adapter normalized from the raw adapter of the connected wallet. You can call all the properties and functions on it, which is followed the @razorlabs/wallet-standard\n\n| Type | Default | | -------------------------------------------- | --------- | --------- | | IWalletAdapter | undefined | undefined |\n\nPrevious\nuseAptosProvider\nNext\nuseSuiAccountBalance\nDescription\nExamples\nBasic Usage\nSign Message\nGet the connected chain (network) of wallet\nAPI References\nname\nconnection status\naccount\naddress\nselect\ngetAccounts\nchains\nchain\nadapter\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/useaptosprovider/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseAptosProvider\nuseAptosProvider\nIntroduction​\n\nThis hook is used to provide the Aptos Aptos interface in React Hooks style.\n\nSee aptos package on npm for more information.\n\nTIP\n\nThis hook is internally JUST importing the Aptos interface and implemention from @aptos-labs/ts-sdk package. What we do is caring about versioning, state management, and other stuffs for you.\n\nimport { useAptosProvider } from '@razorlabs/wallet-kit';\nfunction YourComponent() {\n  const endpoint = 'https://aptos.devnet.m1.movementlabs.xyz';\n  const provider = useAptosProvider(endpoint);\n\n  return <>...</>;\n}\n\nUsing the Aptos interface​\n\nBut if you use the Aptos provided by useAptosProvider, you can call the signAndSubmitTransaction endpoint in a more convenient way:\n\nfunction YourComponent() {\n  const endpoint = 'https://aptos.devnet.m1.movementlabs.xyz';\n  const { signAndSubmitTransaction } = useAptosProvider(endpoint);\n\n  return (\n    <div\n      onClick={async () => {\n        // ... some code to get the raw transaction\n        const resp = await signAndSubmitTransaction(rawTx);\n        // resp is the response from the Client, and has detailed typings defination\n      }}\n    >...</>\n  );\n}\n\nPrevious\nuseAptosAccountBalance\nNext\nuseAptosWallet\nIntroduction\nUsing the Aptos interface\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/useaptosaccountbalance/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseAptosAccountBalance\nuseAptosAccountBalance\nIntroduction​\n\nYou can get the balance of the current account under the selected network. The useAptosAccountBalance will return the current account's balance, loading status, error object. When fetching the banlance data, loading will set to true, otherwise false. If fetch failed, error will be an Error object instance and shows why fetch failed.\n\nTIP\n\nIf error is not null, it means fetch balance failed. In this case, the balance will set to be 0.\n\nAPI​\nProperties\tDescription\tType\tDefault\nerror\terror or null\tError | null\tnull\nloading\tfetch status\tboolean\tfalse\nbalance\tthe balance of current account, converted from BigInt\tstring\t'0'\nerror​\n\nThe error object tells why get balance failed. If error is not null, it may means network error or other problems of you app.\n\nloading​\n\nThe loading can be used to add loading when fetching acount balance.\n\nimport { useAptosAccountBalance } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const { error, loading, balance } = useAptosAccountBalance();\n\n  return (\n    <div>{loading && <Spin />}</div>\n    <div>{balance}</div>\n  )\n}\n\nbalance​\n\nThe balance's type is string. If you want to use balance to calculate, you should convert it to bigint or number.\n\nIn some case, the balance can be bigger than Number.MAX_SAFE_INTEGER(2^53 - 1). If your project support Bigint(https://caniuse.com/?search=Bigint), you can derectly use BigInt method to convert, otherwise, use some lib to calculation bigint.\n\nExample​\nimport { useEffect } from 'react';\n\ninterface AptosAccountBalanceResponse {\n  error: Error | null;\n  loading: boolean;\n  balance: string;\n}\n\nimport { useAptosAccountBalance } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const { error, loading, balance } = useAptosAccountBalance();\n\n  useEffect(() => {\n    // if you want to do comparison or calculation with balance,\n    // use Number or BigInt to convert the balance string\n    if (Number(balance) > 1000000) {\n      console.log('You are a millionare!');\n    }\n  }, [balance]);\n\n  return (\n    <div>\n      <div>fetch balance loading status: {loading}</div>\n      <div>account balance: {balance}</div>\n    </div>\n  );\n}\n\nPrevious\nHooks\nNext\nuseAptosProvider\nIntroduction\nAPI\nerror\nloading\nbalance\nExample\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/suiwalletprovider/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsSuiWalletProvider\nSuiWalletProvider\nDescription​\n\nThe SuiWalletProvider provides the essential data and functions for our kit. And it is the entrypoint for customized configurations.\n\nTIP\n\nSo you need to wrap all the kit hooks and components under SuiWalletProvider before you start to use them.\n\nExamples​\nBasic Usage​\nimport ReactDOM from 'react-dom';\nimport { SuiWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction Root() {\n  // wrap your app component\n  <SuiWalletProvider>\n    <App />\n  </SuiWalletProvider>;\n}\n\nReactDOM.render(<Root />, docoument.getElementById('root'));\n\nCustomize your wallet list on modal​\n\nCheck #Tutorial/Customize Wallet List for details.\n\nConfigure supported chains (networks)​\n\nCheck #Tutorial/Configure supported chains (networks) for details.\n\nAPI​\nProps​\nProp\tType\tDefault\tDescription\ndefaultWallets\tIDefaultWallet\t[...AllPresetWallets]\tConfigure wallet list for dapp, by default we load all the preset wallets\nchains\tChain[]\tDefaultChains\tConfigure supported chains (networks) for dapp\nautoConnect\tboolean\ttrue\tAuto connect to the last connected wallet when launched\nPrevious\nSuiConnectButton\nNext\nHooks\nDescription\nExamples\nBasic Usage\nCustomize your wallet list on modal\nConfigure supported chains (networks)\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/suiconnectbutton/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsSuiConnectButton\nSuiConnectButton\nDescription​\n\nSuiConnectButton is the entry for users to connect their wallet.\n\nIt manages the cycle of wallet connection, such as launching the wallet-select modal, displaying info of the account and showing the disconnect button when connected.\n\nWe recommend using SuiConnectButton component to integrate Razor wallet kit 🥳 But you can customize your own SuiConnectButton with our api, check #Use Hooks Only for details.\n\nExamples​\nBasic Usage​\nimport { SuiConnectButton, SuiWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  return (\n    <SuiWalletProvider>\n      <SuiConnectButton>Connect Wallet</SuiConnectButton>\n    </SuiWalletProvider>\n  );\n}\n\nHandle Connection Events​\n\nSometimes you may want to hook in the connection events and do something with those. For example, provide friendly an error tip when the wallet connection fails. You can do it by passing a handle function to the property onConnectError of SuiConnectButton. The full APIs are listed below.\n\nIf you are using hooks only, then simply wrap a try-catch block for the async select method!\n\nimport {SuiWalletProvider, SuiConnectButton, ErrorCode, BaseError} from \"@razorlabs/wallet-kit\";\n\nfunction App() {\n  return (\n    <SuiWalletProvider>\n      <SuiConnectButton\n        // The BaseError instance has properties like {code, message, details}\n        // for developers to further customize their error handling.\n        onConnectError={(error: BaseError) => {\n           if (err.code === ErrorCode.WALLET__CONNECT_ERROR__USER_REJECTED) {\n             console.warn('user rejected the connection to ' + err.details?.wallet);\n           } else {\n             console.warn('unknown connect error: ', err);\n           }\n        }}\n      >Connect Wallet</SuiConnectButton>\n    </SuiWalletProvider>\n  );\n}\n\nTIP\n\nThe error type is customized by wallet kit. You may want to check Error Types for details.\n\nAPI​\nProps​\nProperties\tDescription\tType\tDefault\nchildren\t--\tReactNode\t'Connect Wallet'\nstyle\t--\tReact.CSSProperties\t\nclassName\t--\tstring\t\nonConnectSuccess\tCallback for successful connection\t(walletName: string) => void\t\nonConnectError\tCallback for failed connection\t(error: BaseError) => void\t\nonDisconnectSuccess\tCallback for successful disconnection\t(walletName: string) => void\t\nonDisconnectError\tCallback for failed disconnection\t(error: BaseError) => void\t\nPrevious\nConnectModal\nNext\nSuiWalletProvider\nDescription\nExamples\nBasic Usage\nHandle Connection Events\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/connectmodal/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsConnectModal\nConnectModal\nDescription​\n\nConnectModal is a nicely designed wallet-select modal for wallet selection.\n\nTIP\n\nUsually you won't need to import it because we hide it inside our ConnectButton. Unless you want to customize your own ConnectButton along with our connect modal.\n\nExamples​\n\nHere is an example for you to use with your own connect button.\n\nimport { useSuiWallet, ConnectModal } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const {connected} = useSuiWallet()\n  const [showModal, setShowModal] = useState(false)\n\n  if (connected) {\n    return <YourComponent />\n  }\n  return (\n    // wrap your own button as the trigger of the modal\n    <ConnectModal\n      open={showModal}\n      onOpenChange={(open) => setShowModal(open)}\n    >\n      <YourOwnButton />\n    </ConnectModal>;\n  )\n}\n\n\nAPI​\nProps​\nProperties\tDescription\tType\tDefault\nchildren\ttrigger element for the modal\tReactNode\tnull\nopen\tIndicator for opening the modal\tboolean\tfalse\nonOpenChange\tvisibility change event\t(open: boolean) => void\t--\nonConnectSuccess\tCallback for successful connection\t(walletName: string) => void\t\nonConnectError\tCallback for failed connection\t(error: BaseError) => void\t\nPrevious\nAptosWalletProvider\nNext\nSuiConnectButton\nDescription\nExamples\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/aptoswalletprovider/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsAptosWalletProvider\nAptosWalletProvider\nDescription​\n\nThe AptosWalletProvider provides the essential data and functions for our kit. And it is the entrypoint for customized configurations.\n\nTIP\n\nSo you need to wrap all the kit hooks and components under AptosWalletProvider before you start to use them.\n\nExamples​\nBasic Usage​\nimport ReactDOM from 'react-dom';\nimport { AptosWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction Root() {\n  // wrap your app component\n  <AptosWalletProvider>\n    <App />\n  </AptosWalletProvider>;\n}\n\nReactDOM.render(<Root />, docoument.getElementById('root'));\n\nCustomize your wallet list on modal​\n\nCheck #Tutorial/Customize Wallet List for details.\n\nConfigure supported chains (networks)​\n\nCheck #Tutorial/Configure supported chains (networks) for details.\n\nAPI​\nProps​\nProp\tType\tDefault\tDescription\ndefaultWallets\tIDefaultWallet\t[...AllPresetWallets]\tConfigure wallet list for dapp, by default we load all the preset wallets\nchains\tChain[]\tDefaultChains\tConfigure supported chains (networks) for dapp\nautoConnect\tboolean\ttrue\tAuto connect to the last connected wallet when launched\nPrevious\nAptosConnectButton\nNext\nConnectModal\nDescription\nExamples\nBasic Usage\nCustomize your wallet list on modal\nConfigure supported chains (networks)\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Customize Wallet List | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/tutorial/customize-wallet-list/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nConfigure supported chains (networks)\nConnect your DApp with wallets on Movement\nCustomize Wallet List\nUse Hooks Only (without UI)\nTypes\nTutorialsCustomize Wallet List\nCustomize Wallet List\n\nYou can configure your wallet list on the select modal by passing defaultWallets throught <SuiWalletProvider />.\n\nWe've prepared a set of preset wallets that you can import directly, also you can customize new wallet items. By default, we include all the preset wallets.\n\nDefault Usage​\nTIP\n\nAll the defaultWallets will be listed in the Popular section on the wallet-select modal.\n\nimport {\n  SuiWalletProvider,\n  RazorWallet,\n  SuiWallet,\n  EthosWallet,\n  IDefaultWallet,\n} from '@razorlabs/wallet-kit';\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <SuiWalletProvider defaultWallets={[\n      // order defined by you\n      RazorWallet,\n      SuiWallet,\n      EthosWallet,\n      // ...\n    ]}>\n    {/* or just leave it as default which contains all preset wallets */}\n    {/*<SuiWalletProvider>*/}\n      <App />\n    </SuiWalletProvider>\n  </React.StrictMode>\n)\n\nUsing Hook Only​\n\nIf you use our useSuiWallet hook only and have a customized wallet-select modal, then you can access configured wallet list by configuredWallets from useSuiWallet. Also we provide detectedWallets for those wallets which are not preconfigured but detected from user browser.\n\n// make sure this code is under <SuiWalletProvider />\n\nfunction App() {\n  const { configuredWallets, detectedWallets } = useSuiWallet();\n\n  return (\n    <>\n      <CustomizedWalletModal\n        list={[...configuredWallets, ...detectedWallets]}\n      />\n    </>\n  );\n}\n\nDefine New Wallet​\n\nIf our wallet presets do not cover the wallets you need, you can simply define it using our defineWallet function.\n\nimport {\n  SuiWalletProvider,\n  defineWallet,\n} from '@razorlabs/wallet-kit';\n\n// customized wallet must support @mysten/wallet-standard\nconst CustomizeWallet = defineWallet({\n  name: \"myWallet\",\n  iconUrl: \"external url or data url\",\n  downloadUrl: {\n    browserExtension: 'download page url of chrome extension...'\n  },\n})\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <SuiWalletProvider defaultWallets={[\n      CustomizeWallet,\n      // ...\n    ]}>\n      <App />\n    </SuiWalletProvider>\n  </React.StrictMode>\n)\n\nPrevious\nConnect your DApp with wallets on Movement\nNext\nUse Hooks Only (without UI)\nDefault Usage\nUsing Hook Only\nDefine New Wallet\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "AptosConnectButton | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/aptosconnectbutton/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsAptosConnectButton\nAptosConnectButton\nDescription​\n\nAptosConnectButton is the entry for users to connect their wallet.\n\nIt manages the cycle of wallet connection, such as launching the wallet-select modal, displaying info of the account and showing the disconnect button when connected.\n\nWe recommend using AptosConnectButton component to integrate Razor wallet kit 🥳 But you can customize your own AptosConnectButton with our api, check #Use Hooks Only for details.\n\nExamples​\nBasic Usage​\nimport { AptosConnectButton, AptosWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  return (\n    <AptosWalletProvider>\n      <AptosConnectButton>Connect Wallet</AptosConnectButton>\n    </AptosWalletProvider>\n  );\n}\n\nHandle Connection Events​\n\nSometimes you may want to hook in the connection events and do something with those. For example, provide friendly an error tip when the wallet connection fails. You can do it by passing a handle function to the property onConnectError of AptosConnectButton. The full APIs are listed below.\n\nIf you are using hooks only, then simply wrap a try-catch block for the async select method!\n\nimport {AptosWalletProvider, AptosConnectButton, ErrorCode, BaseError} from \"@razorlabs/wallet-kit\";\n\nfunction App() {\n  return (\n    <AptosWalletProvider>\n      <AptosConnectButton\n        // The BaseError instance has properties like {code, message, details}\n        // for developers to further customize their error handling.\n        onConnectError={(error: BaseError) => {\n           if (err.code === ErrorCode.WALLET__CONNECT_ERROR__USER_REJECTED) {\n             console.warn('user rejected the connection to ' + err.details?.wallet);\n           } else {\n             console.warn('unknown connect error: ', err);\n           }\n        }}\n      >Connect Wallet</AptosConnectButton>\n    </AptosWalletProvider>\n  );\n}\n\nTIP\nAPI​\nProps​\nProperties\tDescription\tType\tDefault\nchildren\t--\tReactNode\t'Connect Wallet'\nstyle\t--\tReact.CSSProperties\t\nclassName\t--\tstring\t\nonConnectSuccess\tCallback for successful connection\t(walletName: string) => void\t\nonConnectError\tCallback for failed connection\t(error: BaseError) => void\t\nonDisconnectSuccess\tCallback for successful disconnection\t(walletName: string) => void\t\nonDisconnectError\tCallback for failed disconnection\t(error: BaseError) => void\t\nPrevious\nComponents\nNext\nAptosWalletProvider\nDescription\nExamples\nBasic Usage\nHandle Connection Events\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/types/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nTypes\nTypes\nTypes\nIDefaultWallet​\nexport interface IDefaultWallet {\n  name: string; // wallet name\n  iconUrl: string; // wallet icon url (external url or data url)\n  downloadUrl: {\n    browserExtension?: string; // provide download link if this wallet is not installed\n  };\n}\n\n\nexample for customized defaultWallet item:\n\nimport IDefaultWallet from '@razorlabs/wallet-kit';\n\nconst myWallet: IDefaultWallet = {\n  name: 'myWallet',\n  iconUrl: 'external url or data url',\n  downloadUrl: {\n    browserExtension: 'chrome extension store url...',\n  },\n};\n\nWalletAccount​\nexport interface WalletAccount {\n  /** Address of the account, corresponding with the public key. */\n  readonly address: string;\n\n  /** Public key of the account, corresponding with the secret key to sign, encrypt, or decrypt using. */\n  readonly publicKey: Uint8Array;\n\n  /** Chains supported by the account. */\n  readonly chains: IdentifierArray;\n\n  /** Features supported by the account. */\n  readonly features: IdentifierArray;\n\n  /** Optional user-friendly descriptive label or name for the account, to be displayed by apps. */\n  readonly label?: string;\n\n  /** Optional user-friendly icon for the account, to be displayed by apps. */\n  readonly icon?: WalletIcon;\n}\n\nIWalletAdapter​\n\nhttps://github.com/razorlabsorg/razor-wallet-kit/blob/main/src/types/wallet.ts#L39\n\nChain​\n\nDefinition of chain's structure (aka Network for Razor Wallet)\n\nexport type Chain = {\n  id: string | number; // string for m2, number for m1\n  name: string;\n  rpcUrl: string;\n};\n\n\nDefault constants:\n\nexport const SuiDevnetChain: Chain = {\n  id: 'sui:devnet',\n  name: 'M2 Devnet',\n  rpcUrl: 'https://sui.devnet.m2.movementlabs.xyz',\n};\n\nexport const UnknownChain: Chain = {\n  id: 'unknown:unknown',\n  name: 'Unknown Network',\n  rpcUrl: '',\n};\n\nexport const DefaultChains = [M2DevnetChain];\n\nError Types​\ntype BaseError = {\n  message: string;\n  code: ErrorCode;\n  details?: Record<String, any>;\n};\ntype KitError = BaseError; // errors from kit internal logics\ntype WalletError = BaseError; // erros from third-party wallets\n\nError Codes​\nenum ErrorCode {\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n  KIT__UNKNOWN_ERROR = 'KIT.UNKNOWN_ERROR',\n  WALLET__UNKNOWN_ERROR = 'WALLET.UNKNOWN_ERROR',\n  WALLET__CONNECT_ERROR = 'WALLET.CONNECT_ERROR',\n  WALLET__DISCONNECT_ERROR = 'WALLET.DISCONNECT_ERROR',\n  WALLET__SIGN_TX_ERROR = 'WALLET.SIGN_TX_ERROR',\n  WALLET__SIGN_MSG_ERROR = 'WALLET.SIGN_MSG_ERROR',\n  WALLET__LISTEN_TO_EVENT_ERROR = 'WALLET.LISTEN_TO_EVENT_ERROR',\n  WALLET__METHOD_NOT_IMPLEMENTED_ERROR = 'WALLET.METHOD_NOT_IMPLEMENTED_ERROR',\n}\n\nPrevious\nUse Hooks Only (without UI)\nIDefaultWallet\nWalletAccount\nIWalletAdapter\nChain\nError Types\nError Codes\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Connect your DApp with wallets on Movement | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/tutorial/connect-dapp-with-wallets/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nConfigure supported chains (networks)\nConnect your DApp with wallets on Movement\nCustomize Wallet List\nUse Hooks Only (without UI)\nTypes\nTutorialsConnect your DApp with wallets on Movement\nConnect your DApp with wallets on Movement\n\nWhen do we consider a web application a DApp? It's when the web app leverages smart contracts to provide services for users. Wallet plays an important role in this interaction where it connects users with DApps. So before you start to build something amazing, you need to connect your dapp with wallets.\n\nRazor Wallet Kit is an all-in-one wallet connection toolkit for Movement DApps. With out-of-the-box UI components and well-defined utility functions, you can easily empower your dapp with the ability to interact with wallets in an elegant way.\n\nIn this tutorial, You'll see how easy it could be to connect your dapp with all the wallets in the Movement ecosystem using Razor Wallet Kit.\n\nTips: Razor wallet kit only supports React.js projects for now.\n\nLearning Highlights​\nInstall and configure Razor Wallet Kit for a React-based DApp\nConnect the DApp with all the wallets on Movement\nUse wallet capabilities (display wallet status and account info, send transactions etc)\nGetting started​\n\nIn this section, We will walk you through the installation and configuration for Razor wallet kit.\n\nInstallation​\n\nFor simplicity, we choose npm as the package manager, feel free to change to any alternatives.\n\nnpm install @mysten/sui.js @razorlabs/wallet-kit\n# or\nnpm install aptos @razorlabs/wallet-kit\n\n\nFrom the next part onwards, we are going to assume that that you're trying to Connect an M2 App. If you're trying to follow this tutorial for an M1 app, just replace all instances of Sui with Aptos.\n\nSetup SuiWalletProvider for the App​\n\nNext, let's import the SuiWalletProvider and setup for your react project such that your App becomes available to access the states and functions provided by Razor Wallet Kit.\n\n// src/index.js\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { SuiWalletProvider } from '@razorlabs/wallet-kit';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nconst root = createRoot(rootElement);\n\n// wrap your app with WalletProvider\nroot.render(\n  <StrictMode>\n    <SuiWalletProvider>\n      <App />\n    </SuiWalletProvider>\n  </StrictMode>\n);\n\nPlace ConnectButton​\n\nIn Razor Wallet Kit, we provide out-of-the-box UI components in good designs. What you need to do is just import and place the ConnectButton to wherever you like.\n\nConnect to all the wallets on Movement​\n\nAfter the preparation above, we are ready to connect to wallets. Razor wallet kit provides a list of the most popular wallets in the Movement ecosystem. Users can choose their favorite one at their wish.\n\nWhen we click the Connect Button, it would provide a list of preset wallets for users to choose.\n\nMeanwhile, Razor wallet kit would automatically detect all the installed wallets that implement the wallet standard in the browser. So If the wallet is not installed, the kit would guide users to download it from Chrome Extension Store. Take Razor wallet as an example:\n\nLet's move on. Now that the Razor wallet has been installed, the kit would initiate a connection request to the wallet extension.\n\nOnce user approves the request, the connection would be completed, which means we've successfully connected to a wallet!\n\nUse wallet capabilities​\n\nIt's time to take a look at the most useful hook useSuiWallet. It retrieves all the properties and functions from SuiWalletProvider, with which you can make use of the account properties and call functions to a connected wallet.\n\nIn the following sections, We will show you some basic usages with the hook useSuiWallet.\n\nDisplay info of the connected wallet​\n\nWe can get several useful information from the connected wallet via Razor wallet kit:\n\nThe wallet connection status\nThe account info\nThe current chain (network) that the wallet is using\n\nFirstly let's display the connection status for the debugging purpose.\n\nimport {\n  SuiConnectButton,\n  useSuiWallet,\n  addressEllipsis,\n} from '@razorlabs/wallet-kit';\n\nexport default function App() {\n  // Get access to the connected wallet\n  const wallet = useSuiWallet();\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Hello, Razor Wallet Kit</h1>\n      <SuiConnectButton />\n\n      <section>\n        <p>\n          <span class=\"gradient\">Wallet status:</span> {wallet.status}\n        </p>\n      </section>\n    </div>\n  );\n}\n\n\nFor account info, we usually cares about the address of an account (it's like an ID in the blockchain world!). With the address of the user account, your dapp can get started to a series of work, such as querying user on-chain assets, initiating a transaction request etc. But let's start from the simplest thing: displaying the address of the account on the page.\n\nexport default function App() {\n  const wallet = useSuiWallet();\n\n  return (\n    <div className=\"App\">\n      // ...\n      {wallet?.account && (\n        <div>\n          <p>Connected Account: {addressEllipsis(wallet.account.address)}</p>\n        </div>\n      )}\n      // ...\n    </div>\n  );\n}\n\n\nNote that the address of an M2 account is a 64-character hex string, but usually we only need to display the first and last a few characters, so that is where the util function addressEllipsis comes to play.\n\nLastly, we need to know which chain that the wallet is using, that is important if we want to make interactions with the correct environment of Movement blockchain. Let's type in these codes:\n\nexport default function App() {\n  const wallet = useSuiWallet();\n\n  return (\n    <div className=\"App\">\n      // ...\n      <p>\n        <span class=\"gradient\">Current chain of wallet: </span>\n        {wallet.chain.name}\n      </p>\n      // ...\n    </div>\n  );\n}\n\n\nThere you go! So far you should be able to play with the all the properties provided by the hook useSuiWallet.\n\nFor more API references, please check out the documentation: https://kit.razorwallet.xyz/docs/Hooks/useSuiWallet#api-references.\n\nExecute a simple transaction​\n\nNow we've come to the most interesting part: sending transactions. With Sui SDK @mysten/sui.js, we are able to use Programmable Transaction, one of Sui’s most powerful core developer primitives, to create any type of transactions to interact with smart contracts on Sui.\n\nFor more details of Programmable Transaction, please check out this Sui doc: https://docs.sui.io/testnet/build/prog-trans-ts-sdk.\n\nAgain let's try this with a simple transaction, minting an NFT of Razor Logo.\n\nHere is a smart contract for creating an NFT with custom name, description and img url, you can find the contract on M2 explorer (devnet)\n\nmodule 0x2f60e33e33a1c880e8749073c5ef89288cf4df8974d8b872dfd72bc6c58f1172::nft {\n// ...\n\n// Arg0: String - nft name\n// Arg1: String - nft description\n// Arg2: String - nft img url\nentry public mint(Arg0: String, Arg1: String, Arg2: String, Arg3: &mut TxContext) {\n//...\n}\n}\n\n\nIn order to call the mint function of this contract, we first create a function that returns a TransactionBlock using Sui TS SDK.\n\nimport { TransactionBlock } from '@mysten/sui.js';\n\nfunction createMintNftTxnBlock() {\n  // define a programmable transaction block\n  const txb = new TransactionBlock();\n\n  // note that this is a devnet contract address\n  const contractAddress =\n    '0x2f60e33e33a1c880e8749073c5ef89288cf4df8974d8b872dfd72bc6c58f1172';\n  const contractModule = 'nft';\n  const contractMethod = 'mint';\n\n  const nftName = 'Razor NFT';\n  const nftDescription = 'Hello, Razor NFT';\n  const nftImgUrl =\n    'https://ipfs.io/ipfs/QmYbAuxRGdSgNsfDopufzRrXsXfeuRsMnd1T1JR7qdi5Kn';\n\n  txb.moveCall({\n    target: `${contractAddress}::${contractModule}::${contractMethod}`,\n    arguments: [tx.pure(nftName), tx.pure(nftDescription), tx.pure(nftImgUrl)],\n  });\n\n  return txb;\n}\n\n\nWe've defined the smart contract target as well as the arguments, now it's time to create the transaction block and execute it. For clear explanation, I drew a diagram for showing the interaction process.\n\nOkay, get back to the code. Let's create an async function that creates and sends the transaction to the wallet for signing and execution.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\nimport { TransactionBlock } from '@mysten/sui.js';\n\nfunction createMintNftTxnBlock() {\n  // ...\n}\n\nexport default function App() {\n  const wallet = useSuiWallet();\n\n  async function mintNft() {\n    if (!wallet.connected) return;\n\n    const txb = createMintNftTxnBlock();\n    try {\n      // call the wallet to sign and execute the transaction\n      const res = await wallet.signAndExecuteTransactionBlock({\n        transactionBlock: txb,\n      });\n      console.log('nft minted successfully!', res);\n      alert('Congrats! your nft is minted!');\n    } catch (e) {\n      alert('Oops, nft minting failed');\n      console.error('nft mint failed', e);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {/* ... */}\n      {wallet.status === 'connected' && (\n        <button onClick={mintNft}>Mint Your NFT !</button>\n      )}\n      {/* ... */}\n    </div>\n  );\n}\n\n\nWe've placed a button on the page which triggers the mintNft function, where it calls wallet.signAndExecuteTransactionBlock to invoke the connected wallet to sign and execute the transaction request.\n\nFinally, let's take Razor wallet for testing. First open your Razor Wallet, change the network to devnet.\n\nThen click the button \"Mint Your NFT!\" to send the transaction to the wallet:\n\nIf everything works, you should see a popup saying \"your nft is minted!\". Now check the NFT section in your Razor wallet, you should see a beautiful Razor NFT there.\n\nIf you made this far, then congratulations! Your dapp is equipped with the power to interact with wallets and users. Don't hesitate, go and keep on making your dapp more interesting and powerful!\n\nWhat's more​\n\nIn fact, with Razor wallet kit, connecting to wallets is just a simple step. I would like to provide a list of topics that you might explore more:\n\nTutorials\nCustomize Wallet List\nConfigure supported chains (networks)\nUse Hooks Only (without UI)\nHooks\nuseSuiWallet\nuseAccountBalance\nuseSuiProvider\nStyling\nCustomize CSS and Theme\nConfiguration and types\nSuiWalletProvider\nTypes\nThe End​\n\nIn this tutorial, we introduce how to install and make use of Razor wallet kit to empower your DApp with the ability to connect to all the wallets on Movement and use wallet's capabilities such as fetching user account's info and sign and executing a transaction block.\n\nRemember this is just an entry-level tutorial. With the programmable transaction feature, you should be able to implement many different interesting functions on your DApp in a blockchain-native way.\n\nIf you have any confusion while using Razor wallet kit, please check out the docs of Razor wallet kit.\n\nIf you find any issues or bugs, welcome to submit issues or PRs to the Github repo. Let's make Movement and open-source community better together!\n\nPrevious\nConfigure supported chains (networks)\nNext\nCustomize Wallet List\nLearning Highlights\nGetting started\nInstallation\nSetup SuiWalletProvider for the App\nPlace ConnectButton\nConnect to all the wallets on Movement\nUse wallet capabilities\nDisplay info of the connected wallet\nExecute a simple transaction\nWhat's more\nThe End\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/tutorial/configure-chain/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nConfigure supported chains (networks)\nConnect your DApp with wallets on Movement\nCustomize Wallet List\nUse Hooks Only (without UI)\nTypes\nTutorialsConfigure supported chains (networks)\nConfigure supported chains (networks)\n\nYou can configure the supported chains (networks) for your dapp.\n\nimport {\n  SuiWalletProvider,\n  Chain,\n  SuiDevnetChain,\n  SuiTestnetChain,\n  SuiMainnetChain,\n  DefaultChains,\n} from '@razorlabs/wallet-kit';\n\nconst customChain: Chain = {\n  id: '',\n  name: '',\n  rpcUrl: '',\n};\n\nconst SupportedChains: Chain[] = [\n  // ...DefaultChains,\n  M2DevnetChain,\n  M2TestnetChain,\n  M2MainnetChain,\n  // NOTE: you can add custom chain (network),\n  // but make sure the connected wallet does support it\n  // customChain,\n];\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <SuiWalletProvider chains={SupportedChains}>\n      <App />\n    </SuiWalletProvider>\n  </React.StrictMode>\n);\n\nPrevious\nTutorials\nNext\nConnect your DApp with wallets on Movement\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/styling/darkmode/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nBasic\nCSS Customize & Theme\nDark Mode\nTutorials\nTypes\nStylingDark Mode\nDark Mode\n\nWith the help of CSS variables, you can easily customize the theme of the components to support dark mode.\n\nYou can override color-related CSS variables under the @media (prefers-color-scheme: dark) media query to support dark mode like below:\n\nTIP\n\nRules about dark mode must be imported / declared AFTER the default CSS file.\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --wkit-accent-hs: 166, 91%;\n    --wkit-on-accent-rgb: 255, 255, 255;\n    --wkit-bg-rgb: 40, 40, 40;\n    --wkit-on-bg-rgb: 241, 241, 241;\n  }\n}\n\nPrevious\nCSS Customize & Theme\nNext\nTutorials\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "CSS Customize & Theme | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/styling/customize/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nBasic\nCSS Customize & Theme\nDark Mode\nTutorials\nTypes\nStylingCSS Customize & Theme\nCSS Customize & Theme\nCSS Variables​\n\nThis section describes how to use CSS variables to customize the theme of the components.\n\nWe use CSS variables to define colors and other styles like below:\n\n:root {\n  --wkit-accent-hs: 210, 100%;\n  --wkit-on-accent-rgb: 255, 255, 255;\n  --wkit-bg-rgb: 239, 241, 245;\n  --wkit-on-bg-rgb: 10, 14, 34;\n  --wkit-font-family: 'Basel', sans-serif;\n  --wkit-font-family-mono: 'IBM Plex Mono', monospace;\n  --wkit-font-size-large: 18px;\n  --wkit-font-size-medium: 16px;\n  --wkit-font-size-small: 14px;\n  --wkit-line-height-large: 22px;\n  --wkit-line-height-medium: 20px;\n  --wkit-line-height-small: 17px;\n  --wkit-button-width: 284px;\n  --wkit-border-radius: 16px;\n}\n\n\nBelow is a list of all CSS variables that you can use as public API to customize the look of the components.\n\nCSS Variables\tDescriptions\tDefault Value\n--wkit-accent-hs\tThe hue and saturation components of the accent color.\t210, 100%\n--wkit-on-accent-rgb\tThe RGB value of the color on the accent color.\t255, 255, 255\n--wkit-bg-rgb\tThe RGB value of the background color.\t239, 241, 245\n--wkit-on-bg-rgb\tThe RGB value of the color on the background color.\t10, 14, 34\n--wkit-font-family\tThe font-family of the components.\t'Basel', sans-serif\n--wkit-font-family-mono\tThe font-family of the components (monospace).\t'IBM Plex Mono', monospace\n--wkit-font-size-large\tThe font-size of the components (L).\t18px\n--wkit-font-size-medium\tThe font-size of the components (M).\t16px\n--wkit-font-size-small\tThe font-size of the components (S).\t14px\n--wkit-line-height-large\tThe line-height of the components (L).\t22px\n--wkit-line-height-medium\tThe line-height of the components (M).\t20px\n--wkit-line-height-small\tThe line-height of the components (S).\t17px\n--wkit-button-width\tThe width of the button.\t284px\n--wkit-border-radius\tThe border radius of the components.\t16px\n\nDefault Values:\n\nAfter figuring out the CSS variables you want to customize, you can override them in your own CSS file, like below:\n\n./razorlabs-wallet-kit-custom.css\n:root {\n  --wkit-accent-hs: 110, 100%; // Redefine the hs (the first two components of hsl) of the accent color\n\n  ... // other CSS variables\n}\n\n\nImport the default CSS file and your own CSS file in your application.\n\nTIP\n\nThe CSS variables must be imported / declared AFTER the default CSS file.\n\nFor example, in the src/index.jsx file:\n\nsrc/index.jsx\nimport '@razorlabs/wallet-kit/style.css';\nimport './razorlabs-wallet-kit-custom.css'; // You CSS file here\n\nOverride (Not recommended)​\n\nWhen CSS variables are not enough, you can customize the styles by importing the CSS file and overriding our default CSS rules.\n\nCAUTION\n\nOverride our default CSS rules is not recommended because it is not easy to maintain. If you have any questions or feature requests, please contact us.\n\nFellow the steps below to customize the styles:\n\nFirst, figure out the CSS class name of the component you want to customize. For example, the CSS class name of the ConnectButton component is wkit-button.\n\nThen override the styles in your own CSS file.\n\n./razorlabs-wallet-kit-custom.css\n.wkit-button {\n  height: 64px; // For example, override the height of the button\n}\n\n\nAnd last, import the default CSS file and your own CSS file in your application.\n\nTIP\n\nYour CSS rules must be imported / declared AFTER the default CSS file.\n\nFor example, in the src/index.jsx file:\n\nsrc/index.jsx\nimport '@razorlabs/wallet-kit/style.css';\nimport './razorlabs-wallet-kit-custom.css'; // You css file here\n\nPrevious\nBasic\nNext\nDark Mode\nCSS Variables\nOverride (Not recommended)\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/styling/basic/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nBasic\nCSS Customize & Theme\nDark Mode\nTutorials\nTypes\nStylingBasic\nBasic\nBEM Naming Rule​\n\nThe BEM naming rule is used to name CSS classes. It is a convention for naming CSS classes in a consistent and predictable way. It helps to achieve reusable components and code sharing in front-end development.\n\n.wkit-[block]__[element]--[modifier]\n\n<div className={'wkit-button'}>...</div>\n\nImport default CSS​\n\nYou need to import the default CSS file to use the default styles.\n\nTIP\n\nYou may need a proper CSS loader to import CSS files. See Webpack or Vite for more information.\n\nFor example, import the default css file in the src/index.jsx file:\n\nsrc/index.jsx\nimport * as React from 'react';\nimport '@razorlabs/wallet-kit/style.css'; // Add this line to your code\n\n// Your Application code below\nfunction App() {\n  return <div>...</div>;\n}\n\nPrevious\nStyling\nNext\nCSS Customize & Theme\nBEM Naming Rule\nImport default CSS\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/usesuiwallet/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseSuiWallet\nuseSuiWallet\nDescription​\n\nuseSuiWallet is the most useful React Hook to play with. For details of React Hook, check the React doc.\n\nIt retrieves all the properties and functions from WalletProvider, with which you can get properties and call functions of a connected wallet.\n\nTIP\n\nMake sure it runs in a React component under WalletProvider\n\nExamples​\nBasic Usage​\n\nWe start with a simple senario like getting information from the connected wallet .\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useSuiWallet();\n  console.log('wallet status', wallet.status);\n  console.log('connected wallet name', wallet.name);\n  console.log('connected account info', wallet.account);\n}\n\nSign and Execute Transactions​\n\nHere we define a moveCall transaction to implement a simple nft minting example.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useSuiWallet();\n\n  async function handleSignAndExecuteTxBlock() {\n    if (!wallet.connected) return;\n\n    // define a programmable transaction\n    const tx = new TransactionBlock();\n    const packageObjectId = '0xXXX';\n    tx.moveCall({\n      target: `${packageObjectId}::nft::mint`,\n      arguments: [tx.pure('Example NFT')],\n    });\n\n    try {\n      // execute the programmable transaction\n      const resData = await wallet.signAndExecuteTransactionBlock({\n        transactionBlock: tx,\n      });\n      console.log('nft minted successfully!', resData);\n      alert('Congrats! your nft is minted!');\n    } catch (e) {\n      console.error('nft mint failed', e);\n    }\n  }\n\n  return <button onClick={handleSignAndExecuteTx}> Mint Your NFT !</button>;\n}\n\nSign Message​\n\nMessage signing is an important action to verify whether an approval is confirmed by the owner of an account.\n\nIt is useful for DApp to ask user's approval for scenarios like approving Terms of Service and Privacy Policy (Below is an example of message signing in OpenSea, the NFT marketplace in Ethereum)\n\nHere is an example for signing a simple message \"Hello World\".\n\nNotice that all the params are Uint8Array (i.e. bytes) type. For browser app, you can use TextEncoder to encode and decode.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\nimport * as tweetnacl from 'tweetnacl';\n\nfunction App() {\n  const wallet = useSuiWallet();\n\n  async function handleSignMsg() {\n    try {\n      const msg = 'Hello world!';\n      // convert string to Uint8Array\n      const msgBytes = new TextEncoder().encode(msg);\n\n      const result = await wallet.signPersonalMessage({\n        message: msgBytes,\n      });\n      // verify signature with publicKey and SignedMessage (params are all included in result)\n      const verifyResult = await wallet.verifySignedMessage(\n        result,\n        wallet.account.publicKey\n      );\n      if (!verifyResult) {\n        console.log(\n          'signPersonalMessage succeed, but verify signedMessage failed'\n        );\n      } else {\n        console.log(\n          'signPersonalMessage succeed, and verify signedMessage succeed!'\n        );\n      }\n    } catch (e) {\n      console.error('signPersonalMessage failed', e);\n    }\n  }\n\n  return <button onClick={handleSignMsg}> Sign Message </button>;\n}\n\nGet the connected chain (network) of wallet​\nCAUTION\n\nSince this is not a standard feature, not all the wallet has implemented. Check Can I Use for further information.\n\nYour dapp can get the current connected chain of wallet.\n\nINFO\n\nFor most wallets, if user switches network inside the wallet, the value WOULD NOT get updated. (Except for Razor Wallet, we implemented this network change notification for a better development experience)\n\nThis is because Sui team suggests each dapp should separate the environments for each chain (sui:devnet, sui:testnet, sui:mainnet). And the active chain returned by the connected wallet could be used to match the dapp's environment.\n\nIn a nutshell, eliminating the need to switch network for dapp is a better user experience for a long term.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\nimport * as tweetnacl from 'tweetnacl';\n\nfunction App() {\n  const wallet = useSuiWallet();\n\n  useEffect(() => {\n    if (!wallet.connected) return;\n    console.log('current connected chain (network)', wallet.chain?.name); // example output: \"movement:m2:devnet\", \"movement:m2:testnet\" or \"movement:m2:mainnet\"\n  }, [wallet.connected]);\n}\n\nAPI References​\nname​\n\nThe name of connected wallet.\n\nType\tDefault\nstring | undefined\tundefined\nconnection status​\n\nThe connection status of wallet.\n\nProperties\tType\tDefault\nconnecting\tboolean\tfalse\nconnected\tboolean\tfalse\nstatus\t'disconnected' | 'connecting' | 'connected'\t'disconnected'\nconst { status, connected, connecting } = useSuiWallet();\n\n// the assert expressions are equally the same\nassert(status === 'disconnected', !connecting && !connected); // not connect to wallet\nassert(status === 'connecting', connecting); // now connecting to the wallet\nassert(status === 'connected', connected); // connected to the wallet\n\naccount​\n\nThe account info in the connected wallet, including address, publicKey etc.\n\nType\tDefault\nWalletAccount\tundefined\nconst { connected, account } = useSuiWallet();\n\nfunction printAccountInfo() {\n  if (!connected) return;\n  console.log(account?.address);\n  console.log(account?.publicKey);\n}\n\naddress​\n\nAlias for account.address\n\nselect​\nType\tDefault\n(WalletName: string) => void\t\ngetAccounts​\n\nGet all the accessible accounts returned by wallet.\n\nType\tDefault\n() => Promise<string[]>\t\n\nThe getAccounts will get the current wallet's account address. Now one wallet only have one account.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\n\nfunction YourComponent() {\n  const wallet = useSuiWallet();\n\n  function handleGetAccounts() {\n    if (!wallet.connected) return;\n    getAccounts().then((accounts) => {\n      console.log(accounts);\n    });\n  }\n}\n\nchains​\n\nConfiguration of supported chains from WalletProvider\n\nType\tDefault\nChain[]\tDefaultChains\nchain​\n\nCurrent connected chain of wallet.\n\nMight not be synced with the wallet if the wallet doesn't support wallet-standard \"change\" event.\n\nType\tDefault\nstring\tthe first value of configured chains or UnknownChain\nadapter​\n\nThe adapter normalized from the raw adapter of the connected wallet. You can call all the properties and functions on it, which is followed the @mysten/wallet-standard\n\n| Type | Default | | -------------------------------------------- | --------- | --------- | | IWalletAdapter | undefined | undefined |\n\nsignAndExecuteTransactionBlock​\n\nThe universal function to send and execute transactions via connected wallet.\n\nType\tDefault\n({transactionBlock: TransactionBlock, requestType?: ExecuteTransactionRequestType, options?: SuiTransactionBlockResponseOptions}) => Promise<SuiSignAndExecuteTransactionBlockOutput>\t\nsignPersonalMessage​\n\nThe function is for message signing.\n\nType\tDefault\n(input: {message: Uint8Array}) => Promise<{signature: string; bytes: string}>\t\nverifySignedMessage​\n\nThis function is for verifying the output of signPersonalMessage following the Sui standard. Returns true if the returned signature matches the message to be signed and the signer's publicKey.\n\nFor details please check here\n\nType\tDefault\n(input: {signature: string; messageBytes: string}) => Promise<boolean>\t\non​\n\nThe function for wallet event listening. Returns the off function to remove listener.\n\nType\tDefault\n<E extends WalletEvent>(event: E, listener: WalletEventListeners[E], ) => () => void;\t\n\nAll the wallet events:\n\nEvent\tListener\tDescription\naccountChange\t(params: { account: WalletAccount; }) => void;\tEmit when wallet app changes its account\nfeatureChange\t(params: { features: string[]; }) => void;\tEmit when wallet app changes its wallet-standard features\nchange\t(params: { chain?: string, account?: WalletAccount; features?: string[]; }) => void;\tRaw change event defined by wallet-standard\nDeprecated API​\nsignAndExecuteTransaction​\n\nDeprecated, use signAndExecuteTransactionBlock instead.\n\nexecuteMoveCall and executeSerializedMoveCall​\n\nDeprecated, use signAndExecuteTransactionBlock instead.\n\nwallet​\n\nDeprecated, use adapter instead.\n\nconst wallet = useSuiWallet();\n- console.log(wallet.wallet.name);\n+ console.log(wallet.adapter.name);\n\ngetPublicKey​\n\nDeprecated, use account.publicKey instead.\n\nconst wallet = useSuiWallet();\n- console.log(wallet.getPublicKey());\n+ console.log(wallet.account.publicKey);\n\nsignMessage​\n\nDeprecated, use signPersonalMessage instead.\n\nType\tDefault\n(input: {message: Uint8Array}) => Promise<{signature: string; messageBytes: string}>\t\nPrevious\nuseSuiProvider\nNext\nStyling\nDescription\nExamples\nBasic Usage\nSign and Execute Transactions\nSign Message\nGet the connected chain (network) of wallet\nAPI References\nname\nconnection status\naccount\naddress\nselect\ngetAccounts\nchains\nchain\nadapter\nsignAndExecuteTransactionBlock\nsignPersonalMessage\nverifySignedMessage\non\nDeprecated API\nsignAndExecuteTransaction\nexecuteMoveCall and executeSerializedMoveCall\nwallet\ngetPublicKey\nsignMessage\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/usesuiprovider/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseSuiProvider\nuseSuiProvider\nIntroduction​\n\nThis hook is used to provide the Sui SuiClient interface in React Hooks style.\n\nSee @mysten/sui.js package on npm or SuiClient for more information.\n\nTIP\n\nThis hook is internally JUST importing the SuiClient interface and implemention from @mysten/sui.js package. What we do is caring about versioning, state management, and other stuffs for you.\n\nimport { useSuiProvider } from '@razorlabs/wallet';\nconst endpoint = 'https://sui.devnet.m2.movementlabs.xyz'\nfunction YourComponent() {\n  const {\n    getObject,\n    getOwnedObjects,\n    getBalance,\n    // ... other methods\n  } = useSuiProvider(endpoint);\n\n  return <>...</>;\n}\n\nUsing the SuiClient interface​\n\nBut if you use the SuiClient provided by useSuiProvider, you can call the sui_executeTransaction RPC endpoint in a more convenient way:\n\nfunction YourComponent() {\n  const endpoint = 'https://sui.devnet.m2.movementlabs.xyz'\n  const { executeTransactionBlock } = useSuiProvider(endpoint);\n\n  return (\n    <div\n      onClick={async () => {\n        // ... some code to get the tx_bytes, signature, and pub_key\n        const resp = await executeTransactionBlock({\n          transactionBlock: tx,\n          signature: signature,\n        });\n        // resp is the response from the Client, and has detailed typings defination\n      }}\n    >...</>\n  );\n}\n\nPrevious\nuseSuiAccountBalance\nNext\nuseSuiWallet\nIntroduction\nUsing the SuiClient interface\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "useSuiAccountBalance | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/usesuiaccountbalance/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseSuiAccountBalance\nuseSuiAccountBalance\nIntroduction​\n\nYou can get the balance of the current account under the selected network. The useSuiAccountBalance will return the current account's balance, loading status, error object. When fetching the banlance data, loading will set to true, otherwise false. If fetch failed, error will be an Error object instance and shows why fetch failed.\n\nTIP\n\nIf error is not null, it means fetch balance failed. In this case, the balance will set to be 0.\n\nAPI​\nProperties\tDescription\tType\tDefault\nerror\terror or null\tError | null\tnull\nloading\tfetch status\tboolean\tfalse\nbalance\tthe balance of current account, converted from BigInt\tstring\t'0'\nerror​\n\nThe error object tells why get balance failed. If error is not null, it may means network error or other problems of you app.\n\nloading​\n\nThe loading can be used to add loading when fetching acount balance.\n\nimport { useSuiAccountBalance } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const { error, loading, balance } = useSuiAccountBalance();\n\n  return (\n    <div>{loading && <Spin />}</div>\n    <div>{balance}</div>\n  )\n}\n\nbalance​\n\nThe balance's type is string. If you want to use balance to calculate, you should convert it to bigint or number.\n\nIn some case, the balance can be bigger than Number.MAX_SAFE_INTEGER(2^53 - 1). If your project support Bigint(https://caniuse.com/?search=Bigint), you can derectly use BigInt method to convert, otherwise, use some lib to calculation bigint.\n\nExample​\nimport { useEffect } from 'react';\n\ninterface AccountBalanceResponse {\n  error: Error | null;\n  loading: boolean;\n  balance: string;\n}\n\nimport { useSuiAccountBalance } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const { error, loading, balance } = useSuiAccountBalance();\n\n  useEffect(() => {\n    // if you want to do comparison or calculation with balance,\n    // use Number or BigInt to convert the balance string\n    if (Number(balance) > 1000000) {\n      console.log('You are a millionare!');\n    }\n  }, [balance]);\n\n  return (\n    <div>\n      <div>fetch balance loading status: {loading}</div>\n      <div>account balance: {balance}</div>\n    </div>\n  );\n}\n\nPrevious\nuseAptosWallet\nNext\nuseSuiProvider\nIntroduction\nAPI\nerror\nloading\nbalance\nExample\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/useaptoswallet/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseAptosWallet\nuseAptosWallet\nDescription​\n\nuseAptosWallet is the most useful React Hook to play with. For details of React Hook, check the React doc.\n\nIt retrieves all the properties and functions from AptosWalletProvider, with which you can get properties and call functions of a connected wallet.\n\nTIP\n\nMake sure it runs in a React component under AptosWalletProvider\n\nExamples​\nBasic Usage​\n\nWe start with a simple senario like getting information from the connected wallet .\n\nimport { useAptosWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useAptosWallet();\n  console.log('wallet status', wallet.status);\n  console.log('connected wallet name', wallet.name);\n  console.log('connected account info', wallet.account);\n}\n\nSign Message​\n\nMessage signing is an important action to verify whether an approval is confirmed by the owner of an account.\n\nIt is useful for DApp to ask user's approval for scenarios like approving Terms of Service and Privacy Policy (Below is an example of message signing in OpenSea, the NFT marketplace in Ethereum)\n\nHere is an example for signing a simple message \"Hello World\".\n\nimport { useAptosWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useAptosWallet();\n\n  async function handleSignMsg() {\n    try {\n      const msg = 'Hello world!';\n\n      const result = await wallet.signMessage({\n        message: msg,\n      });\n      // verify signature with publicKey and SignedMessage (params are all included in result)\n      if (!result) {\n        console.log(\n          'signMessage succeed, but verify signedMessage failed'\n        );\n      } else {\n        console.log(\n          'signMessage succeed, and verify signedMessage succeed!'\n        );\n      }\n    } catch (e) {\n      console.error('signMessage failed', e);\n    }\n  }\n\n  return <button onClick={handleSignMsg}> Sign Message </button>;\n}\n\nGet the connected chain (network) of wallet​\nCAUTION\n\nSince this is not a standard feature, not all the wallet has implemented. Check Can I Use for further information.\n\nYour dapp can get the current connected chain of wallet.\n\nINFO\n\nFor most wallets, if user switches network inside the wallet, the value WOULD NOT get updated. (Except for Razor Wallet, we implemented this network change notification for a better development experience)\n\nimport { useAptosWallet } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const wallet = useAptosWallet();\n\n  useEffect(() => {\n    if (!wallet.connected) return;\n    console.log('current connected chain (network)', wallet.chain?.name); // example \n  }, [wallet.connected]);\n}\n\nAPI References​\nname​\n\nThe name of connected wallet.\n\nType\tDefault\nstring | undefined\tundefined\nconnection status​\n\nThe connection status of wallet.\n\nProperties\tType\tDefault\nconnecting\tboolean\tfalse\nconnected\tboolean\tfalse\nstatus\t'disconnected' | 'connecting' | 'connected'\t'disconnected'\nconst { status, connected, connecting } = useAptosWallet();\n\n// the assert expressions are equally the same\nassert(status === 'disconnected', !connecting && !connected); // not connect to wallet\nassert(status === 'connecting', connecting); // now connecting to the wallet\nassert(status === 'connected', connected); // connected to the wallet\n\naccount​\n\nThe account info in the connected wallet, including address, publicKey etc.\n\nType\tDefault\nWalletAccount\tundefined\nconst { connected, account } = useAptosWallet();\n\nfunction printAccountInfo() {\n  if (!connected) return;\n  console.log(account?.address);\n  console.log(account?.publicKey);\n}\n\naddress​\n\nAlias for account.address\n\nselect​\nType\tDefault\n(WalletName: string) => void\t\ngetAccounts​\n\nGet all the accessible accounts returned by wallet.\n\nType\tDefault\n() => Promise<string[]>\t\n\nThe getAccounts will get the current wallet's account address. Now one wallet only have one account.\n\nimport { useAptosWallet } from '@razorlabs/wallet-kit';\n\nfunction YourComponent() {\n  const wallet = useAptosWallet();\n\n  function handleGetAccounts() {\n    if (!wallet.connected) return;\n    getAccounts().then((accounts) => {\n      console.log(accounts);\n    });\n  }\n}\n\nchains​\n\nConfiguration of supported chains from WalletProvider\n\nType\tDefault\nChain[]\tDefaultChains\nchain​\n\nCurrent connected chain of wallet.\n\nMight not be synced with the wallet if the wallet doesn't support wallet-standard \"change\" event.\n\nType\tDefault\nstring\tthe first value of configured chains or UnknownChain\nadapter​\n\nThe adapter normalized from the raw adapter of the connected wallet. You can call all the properties and functions on it, which is followed the @razorlabs/wallet-standard\n\n| Type | Default | | -------------------------------------------- | --------- | --------- | | IWalletAdapter | undefined | undefined |\n\nPrevious\nuseAptosProvider\nNext\nuseSuiAccountBalance\nDescription\nExamples\nBasic Usage\nSign Message\nGet the connected chain (network) of wallet\nAPI References\nname\nconnection status\naccount\naddress\nselect\ngetAccounts\nchains\nchain\nadapter\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/useaptosprovider/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseAptosProvider\nuseAptosProvider\nIntroduction​\n\nThis hook is used to provide the Aptos Aptos interface in React Hooks style.\n\nSee aptos package on npm for more information.\n\nTIP\n\nThis hook is internally JUST importing the Aptos interface and implemention from @aptos-labs/ts-sdk package. What we do is caring about versioning, state management, and other stuffs for you.\n\nimport { useAptosProvider } from '@razorlabs/wallet-kit';\nfunction YourComponent() {\n  const endpoint = 'https://aptos.devnet.m1.movementlabs.xyz';\n  const provider = useAptosProvider(endpoint);\n\n  return <>...</>;\n}\n\nUsing the Aptos interface​\n\nBut if you use the Aptos provided by useAptosProvider, you can call the signAndSubmitTransaction endpoint in a more convenient way:\n\nfunction YourComponent() {\n  const endpoint = 'https://aptos.devnet.m1.movementlabs.xyz';\n  const { signAndSubmitTransaction } = useAptosProvider(endpoint);\n\n  return (\n    <div\n      onClick={async () => {\n        // ... some code to get the raw transaction\n        const resp = await signAndSubmitTransaction(rawTx);\n        // resp is the response from the Client, and has detailed typings defination\n      }}\n    >...</>\n  );\n}\n\nPrevious\nuseAptosAccountBalance\nNext\nuseAptosWallet\nIntroduction\nUsing the Aptos interface\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "useAptosAccountBalance | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/hooks/useaptosaccountbalance/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooksuseAptosAccountBalance\nuseAptosAccountBalance\nIntroduction​\n\nYou can get the balance of the current account under the selected network. The useAptosAccountBalance will return the current account's balance, loading status, error object. When fetching the banlance data, loading will set to true, otherwise false. If fetch failed, error will be an Error object instance and shows why fetch failed.\n\nTIP\n\nIf error is not null, it means fetch balance failed. In this case, the balance will set to be 0.\n\nAPI​\nProperties\tDescription\tType\tDefault\nerror\terror or null\tError | null\tnull\nloading\tfetch status\tboolean\tfalse\nbalance\tthe balance of current account, converted from BigInt\tstring\t'0'\nerror​\n\nThe error object tells why get balance failed. If error is not null, it may means network error or other problems of you app.\n\nloading​\n\nThe loading can be used to add loading when fetching acount balance.\n\nimport { useAptosAccountBalance } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const { error, loading, balance } = useAptosAccountBalance();\n\n  return (\n    <div>{loading && <Spin />}</div>\n    <div>{balance}</div>\n  )\n}\n\nbalance​\n\nThe balance's type is string. If you want to use balance to calculate, you should convert it to bigint or number.\n\nIn some case, the balance can be bigger than Number.MAX_SAFE_INTEGER(2^53 - 1). If your project support Bigint(https://caniuse.com/?search=Bigint), you can derectly use BigInt method to convert, otherwise, use some lib to calculation bigint.\n\nExample​\nimport { useEffect } from 'react';\n\ninterface AptosAccountBalanceResponse {\n  error: Error | null;\n  loading: boolean;\n  balance: string;\n}\n\nimport { useAptosAccountBalance } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const { error, loading, balance } = useAptosAccountBalance();\n\n  useEffect(() => {\n    // if you want to do comparison or calculation with balance,\n    // use Number or BigInt to convert the balance string\n    if (Number(balance) > 1000000) {\n      console.log('You are a millionare!');\n    }\n  }, [balance]);\n\n  return (\n    <div>\n      <div>fetch balance loading status: {loading}</div>\n      <div>account balance: {balance}</div>\n    </div>\n  );\n}\n\nPrevious\nHooks\nNext\nuseAptosProvider\nIntroduction\nAPI\nerror\nloading\nbalance\nExample\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "SuiWalletProvider | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/suiwalletprovider/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsSuiWalletProvider\nSuiWalletProvider\nDescription​\n\nThe SuiWalletProvider provides the essential data and functions for our kit. And it is the entrypoint for customized configurations.\n\nTIP\n\nSo you need to wrap all the kit hooks and components under SuiWalletProvider before you start to use them.\n\nExamples​\nBasic Usage​\nimport ReactDOM from 'react-dom';\nimport { SuiWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction Root() {\n  // wrap your app component\n  <SuiWalletProvider>\n    <App />\n  </SuiWalletProvider>;\n}\n\nReactDOM.render(<Root />, docoument.getElementById('root'));\n\nCustomize your wallet list on modal​\n\nCheck #Tutorial/Customize Wallet List for details.\n\nConfigure supported chains (networks)​\n\nCheck #Tutorial/Configure supported chains (networks) for details.\n\nAPI​\nProps​\nProp\tType\tDefault\tDescription\ndefaultWallets\tIDefaultWallet\t[...AllPresetWallets]\tConfigure wallet list for dapp, by default we load all the preset wallets\nchains\tChain[]\tDefaultChains\tConfigure supported chains (networks) for dapp\nautoConnect\tboolean\ttrue\tAuto connect to the last connected wallet when launched\nPrevious\nSuiConnectButton\nNext\nHooks\nDescription\nExamples\nBasic Usage\nCustomize your wallet list on modal\nConfigure supported chains (networks)\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "SuiConnectButton | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/suiconnectbutton/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsSuiConnectButton\nSuiConnectButton\nDescription​\n\nSuiConnectButton is the entry for users to connect their wallet.\n\nIt manages the cycle of wallet connection, such as launching the wallet-select modal, displaying info of the account and showing the disconnect button when connected.\n\nWe recommend using SuiConnectButton component to integrate Razor wallet kit 🥳 But you can customize your own SuiConnectButton with our api, check #Use Hooks Only for details.\n\nExamples​\nBasic Usage​\nimport { SuiConnectButton, SuiWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  return (\n    <SuiWalletProvider>\n      <SuiConnectButton>Connect Wallet</SuiConnectButton>\n    </SuiWalletProvider>\n  );\n}\n\nHandle Connection Events​\n\nSometimes you may want to hook in the connection events and do something with those. For example, provide friendly an error tip when the wallet connection fails. You can do it by passing a handle function to the property onConnectError of SuiConnectButton. The full APIs are listed below.\n\nIf you are using hooks only, then simply wrap a try-catch block for the async select method!\n\nimport {SuiWalletProvider, SuiConnectButton, ErrorCode, BaseError} from \"@razorlabs/wallet-kit\";\n\nfunction App() {\n  return (\n    <SuiWalletProvider>\n      <SuiConnectButton\n        // The BaseError instance has properties like {code, message, details}\n        // for developers to further customize their error handling.\n        onConnectError={(error: BaseError) => {\n           if (err.code === ErrorCode.WALLET__CONNECT_ERROR__USER_REJECTED) {\n             console.warn('user rejected the connection to ' + err.details?.wallet);\n           } else {\n             console.warn('unknown connect error: ', err);\n           }\n        }}\n      >Connect Wallet</SuiConnectButton>\n    </SuiWalletProvider>\n  );\n}\n\nTIP\n\nThe error type is customized by wallet kit. You may want to check Error Types for details.\n\nAPI​\nProps​\nProperties\tDescription\tType\tDefault\nchildren\t--\tReactNode\t'Connect Wallet'\nstyle\t--\tReact.CSSProperties\t\nclassName\t--\tstring\t\nonConnectSuccess\tCallback for successful connection\t(walletName: string) => void\t\nonConnectError\tCallback for failed connection\t(error: BaseError) => void\t\nonDisconnectSuccess\tCallback for successful disconnection\t(walletName: string) => void\t\nonDisconnectError\tCallback for failed disconnection\t(error: BaseError) => void\t\nPrevious\nConnectModal\nNext\nSuiWalletProvider\nDescription\nExamples\nBasic Usage\nHandle Connection Events\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/connectmodal/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsConnectModal\nConnectModal\nDescription​\n\nConnectModal is a nicely designed wallet-select modal for wallet selection.\n\nTIP\n\nUsually you won't need to import it because we hide it inside our ConnectButton. Unless you want to customize your own ConnectButton along with our connect modal.\n\nExamples​\n\nHere is an example for you to use with your own connect button.\n\nimport { useSuiWallet, ConnectModal } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  const {connected} = useSuiWallet()\n  const [showModal, setShowModal] = useState(false)\n\n  if (connected) {\n    return <YourComponent />\n  }\n  return (\n    // wrap your own button as the trigger of the modal\n    <ConnectModal\n      open={showModal}\n      onOpenChange={(open) => setShowModal(open)}\n    >\n      <YourOwnButton />\n    </ConnectModal>;\n  )\n}\n\n\nAPI​\nProps​\nProperties\tDescription\tType\tDefault\nchildren\ttrigger element for the modal\tReactNode\tnull\nopen\tIndicator for opening the modal\tboolean\tfalse\nonOpenChange\tvisibility change event\t(open: boolean) => void\t--\nonConnectSuccess\tCallback for successful connection\t(walletName: string) => void\t\nonConnectError\tCallback for failed connection\t(error: BaseError) => void\t\nPrevious\nAptosWalletProvider\nNext\nSuiConnectButton\nDescription\nExamples\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/aptoswalletprovider/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsAptosWalletProvider\nAptosWalletProvider\nDescription​\n\nThe AptosWalletProvider provides the essential data and functions for our kit. And it is the entrypoint for customized configurations.\n\nTIP\n\nSo you need to wrap all the kit hooks and components under AptosWalletProvider before you start to use them.\n\nExamples​\nBasic Usage​\nimport ReactDOM from 'react-dom';\nimport { AptosWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction Root() {\n  // wrap your app component\n  <AptosWalletProvider>\n    <App />\n  </AptosWalletProvider>;\n}\n\nReactDOM.render(<Root />, docoument.getElementById('root'));\n\nCustomize your wallet list on modal​\n\nCheck #Tutorial/Customize Wallet List for details.\n\nConfigure supported chains (networks)​\n\nCheck #Tutorial/Configure supported chains (networks) for details.\n\nAPI​\nProps​\nProp\tType\tDefault\tDescription\ndefaultWallets\tIDefaultWallet\t[...AllPresetWallets]\tConfigure wallet list for dapp, by default we load all the preset wallets\nchains\tChain[]\tDefaultChains\tConfigure supported chains (networks) for dapp\nautoConnect\tboolean\ttrue\tAuto connect to the last connected wallet when launched\nPrevious\nAptosConnectButton\nNext\nConnectModal\nDescription\nExamples\nBasic Usage\nCustomize your wallet list on modal\nConfigure supported chains (networks)\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "AptosConnectButton | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/components/aptosconnectbutton/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponentsAptosConnectButton\nAptosConnectButton\nDescription​\n\nAptosConnectButton is the entry for users to connect their wallet.\n\nIt manages the cycle of wallet connection, such as launching the wallet-select modal, displaying info of the account and showing the disconnect button when connected.\n\nWe recommend using AptosConnectButton component to integrate Razor wallet kit 🥳 But you can customize your own AptosConnectButton with our api, check #Use Hooks Only for details.\n\nExamples​\nBasic Usage​\nimport { AptosConnectButton, AptosWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction App() {\n  return (\n    <AptosWalletProvider>\n      <AptosConnectButton>Connect Wallet</AptosConnectButton>\n    </AptosWalletProvider>\n  );\n}\n\nHandle Connection Events​\n\nSometimes you may want to hook in the connection events and do something with those. For example, provide friendly an error tip when the wallet connection fails. You can do it by passing a handle function to the property onConnectError of AptosConnectButton. The full APIs are listed below.\n\nIf you are using hooks only, then simply wrap a try-catch block for the async select method!\n\nimport {AptosWalletProvider, AptosConnectButton, ErrorCode, BaseError} from \"@razorlabs/wallet-kit\";\n\nfunction App() {\n  return (\n    <AptosWalletProvider>\n      <AptosConnectButton\n        // The BaseError instance has properties like {code, message, details}\n        // for developers to further customize their error handling.\n        onConnectError={(error: BaseError) => {\n           if (err.code === ErrorCode.WALLET__CONNECT_ERROR__USER_REJECTED) {\n             console.warn('user rejected the connection to ' + err.details?.wallet);\n           } else {\n             console.warn('unknown connect error: ', err);\n           }\n        }}\n      >Connect Wallet</AptosConnectButton>\n    </AptosWalletProvider>\n  );\n}\n\nTIP\nAPI​\nProps​\nProperties\tDescription\tType\tDefault\nchildren\t--\tReactNode\t'Connect Wallet'\nstyle\t--\tReact.CSSProperties\t\nclassName\t--\tstring\t\nonConnectSuccess\tCallback for successful connection\t(walletName: string) => void\t\nonConnectError\tCallback for failed connection\t(error: BaseError) => void\t\nonDisconnectSuccess\tCallback for successful disconnection\t(walletName: string) => void\t\nonDisconnectError\tCallback for failed disconnection\t(error: BaseError) => void\t\nPrevious\nComponents\nNext\nAptosWalletProvider\nDescription\nExamples\nBasic Usage\nHandle Connection Events\nAPI\nProps\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/tutorial/hooks-only/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nConfigure supported chains (networks)\nConnect your DApp with wallets on Movement\nCustomize Wallet List\nUse Hooks Only (without UI)\nTypes\nTutorialsUse Hooks Only (without UI)\nUse Hooks Only (without UI)\n\nThis section will introduce how to only use the provided hooks.\n\nIt could be useful when you want to customize your UI components together with our hooks.\n\nCustomize your UI components with Kit Hooks​\n\nFirstly, add SuiWalletProvider to wrap your App. The SuiWalletProvider component provides the context of data and functions.\n\nFor customizing the default wallet list, check SuiWalletProvider\n\nimport { SuiWalletProvider } from '@razorlabs/wallet-kit';\n\nfunction RootComponent() {\n  return (\n    <SuiWalletProvider>\n      <App />\n    </SuiWalletProvider>\n  );\n}\n\n\nNext, you are supposed to have a connect button for wallet connection and a display area for account info after connection.\n\nIn this case, you can manage these two components by connected status from useSuiWallet hook. And get active account address after connected.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const wallet = useSuiWallet();\n\n  return (\n    <div>\n      {wallet.connected ? (\n        <AccountInfo address={wallet?.address} />\n      ) : (\n        <ConnectButton />\n      )}\n    </div>\n  );\n}\n\n\nFor your wallet-select modal component, let's just call it WalletSelector.\n\nYou can use select method from useSuiWallet hook to connect the one of the SUI wallets.\n\nimport { useSuiWallet } from '@razorlabs/wallet-kit';\n\nfunction WalletSelector() {\n  const {\n    select, // select\n    configuredWallets, // default wallets\n    detectedWallets, // Movement-standard wallets detected from browser env\n    allAvailableWallets, // all the installed Movement-standard wallets\n  } = useSuiWallet();\n\n  return [...configuredWallets, ...detectedWallets].map((wallet) => (\n    <button\n      key={wallet.name}\n      onClick={() => {\n        // check if user installed the wallet\n        if (!wallet.installed) {\n          // do something like guiding users to install\n          return;\n        }\n        select(wallet.name);\n      }}\n    >\n      Connect to {wallet.name}\n    </button>\n  ));\n}\n\n\nT\n\nPrevious\nCustomize Wallet List\nNext\nTypes\nCustomize your UI components with Kit Hooks\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/caniuse/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nTypes\nCan I Use - Adapter Capabilities\nCan I Use - Adapter Capabilities\nPreset Wallets​\n\nThese preset wallets will be displayed as Popular on our kit modal by default.\n\nIf you are a wallet developer and want to list your wallet below, feel free to contact our team 🥳 Twitter@RazorDAO\n\nRazor Wallet\nSui Wallet\nEthos Wallet\nFor Dapp Developers​\nCan I Use with xxx Wallet?​\n\nDue to the adapter difference of each wallet, we present a function comparison table among wallet adapters.\n\nTIP\n\nRemember to handle exceptional cases if some wallet adapters do not support certain features.\n\nHook useWallet​\nwallet\tsignAndExecuteTransactionBlock\tsignPersonalMessage\tchain\taccount.publicKey\nRazor Wallet\t✅\t✅\t✅\t✅\nSui Wallet\t✅\t✅\t✅\t❌\nEthos Wallet\t✅\t✅\t❌\t❌\nHow to list my wallet on Razor Wallet Kit?​\n\nYou can contact our team via Twitter@RazorDAO to list your wallet on Razor Wallet Kit.\n\nOr submit a PR to our repo, modify the following files:\n\n// packages/kit/src/wallet/preset-wallets/presets.ts\nexport enum PresetWallet {\n  // ... resgisted wallet enum\n  // note that this name should match with your wallet adapter's name\n  // for auto detection and display purposes\n  YOUR_WALLET = 'Your Wallet',\n}\n\nexport const YourWallet = defineWallet({\n  name: PresetWallet.YOUR_WALLET,\n  iconUrl:\n    'base64 encoded image (recommended, optimize the size!!) / external url',\n  downloadUrl: {\n    browserExtension: 'chrome extension installation url',\n  },\n});\n\n// packages/kit/src/wallet/preset-wallets/index.ts\nexport const AllDefaultWallets = [\n  ...[\n    // ... registed wallets\n    presets.YourWallet,\n  ].sort((a, b) => (a.name < b.name ? -1 : 1)),\n];\n\nPrevious\nQuick Start\nNext\nComponents\nPreset Wallets\nFor Dapp Developers\nCan I Use with xxx Wallet?\nHook useWallet\nHow to list my wallet on Razor Wallet Kit?\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Types | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/types/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nTypes\nTypes\nTypes\nIDefaultWallet​\nexport interface IDefaultWallet {\n  name: string; // wallet name\n  iconUrl: string; // wallet icon url (external url or data url)\n  downloadUrl: {\n    browserExtension?: string; // provide download link if this wallet is not installed\n  };\n}\n\n\nexample for customized defaultWallet item:\n\nimport IDefaultWallet from '@razorlabs/wallet-kit';\n\nconst myWallet: IDefaultWallet = {\n  name: 'myWallet',\n  iconUrl: 'external url or data url',\n  downloadUrl: {\n    browserExtension: 'chrome extension store url...',\n  },\n};\n\nWalletAccount​\nexport interface WalletAccount {\n  /** Address of the account, corresponding with the public key. */\n  readonly address: string;\n\n  /** Public key of the account, corresponding with the secret key to sign, encrypt, or decrypt using. */\n  readonly publicKey: Uint8Array;\n\n  /** Chains supported by the account. */\n  readonly chains: IdentifierArray;\n\n  /** Features supported by the account. */\n  readonly features: IdentifierArray;\n\n  /** Optional user-friendly descriptive label or name for the account, to be displayed by apps. */\n  readonly label?: string;\n\n  /** Optional user-friendly icon for the account, to be displayed by apps. */\n  readonly icon?: WalletIcon;\n}\n\nIWalletAdapter​\n\nhttps://github.com/razorlabsorg/razor-wallet-kit/blob/main/src/types/wallet.ts#L39\n\nChain​\n\nDefinition of chain's structure (aka Network for Razor Wallet)\n\nexport type Chain = {\n  id: string | number; // string for m2, number for m1\n  name: string;\n  rpcUrl: string;\n};\n\n\nDefault constants:\n\nexport const SuiDevnetChain: Chain = {\n  id: 'sui:devnet',\n  name: 'M2 Devnet',\n  rpcUrl: 'https://sui.devnet.m2.movementlabs.xyz',\n};\n\nexport const UnknownChain: Chain = {\n  id: 'unknown:unknown',\n  name: 'Unknown Network',\n  rpcUrl: '',\n};\n\nexport const DefaultChains = [M2DevnetChain];\n\nError Types​\ntype BaseError = {\n  message: string;\n  code: ErrorCode;\n  details?: Record<String, any>;\n};\ntype KitError = BaseError; // errors from kit internal logics\ntype WalletError = BaseError; // erros from third-party wallets\n\nError Codes​\nenum ErrorCode {\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n  KIT__UNKNOWN_ERROR = 'KIT.UNKNOWN_ERROR',\n  WALLET__UNKNOWN_ERROR = 'WALLET.UNKNOWN_ERROR',\n  WALLET__CONNECT_ERROR = 'WALLET.CONNECT_ERROR',\n  WALLET__DISCONNECT_ERROR = 'WALLET.DISCONNECT_ERROR',\n  WALLET__SIGN_TX_ERROR = 'WALLET.SIGN_TX_ERROR',\n  WALLET__SIGN_MSG_ERROR = 'WALLET.SIGN_MSG_ERROR',\n  WALLET__LISTEN_TO_EVENT_ERROR = 'WALLET.LISTEN_TO_EVENT_ERROR',\n  WALLET__METHOD_NOT_IMPLEMENTED_ERROR = 'WALLET.METHOD_NOT_IMPLEMENTED_ERROR',\n}\n\nPrevious\nUse Hooks Only (without UI)\nIDefaultWallet\nWalletAccount\nIWalletAdapter\nChain\nError Types\nError Codes\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/category/tutorials/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nConfigure supported chains (networks)\nConnect your DApp with wallets on Movement\nCustomize Wallet List\nUse Hooks Only (without UI)\nTypes\nTutorials\nTutorials\n📄️ Configure supported chains (networks)\n\nYou can configure the supported chains (networks) for your dapp.\n\n📄️ Connect your DApp with wallets on Movement\n\nWhen do we consider a web application a DApp? It's when the web app leverages smart contracts to provide services for users. Wallet plays an important role in this interaction where it connects users with DApps. So before you start to build something amazing, you need to connect your dapp with wallets.\n\n📄️ Customize Wallet List\n\nYou can configure your wallet list on the select modal by passing defaultWallets throught ``.\n\n📄️ Use Hooks Only (without UI)\n\nThis section will introduce how to only use the provided hooks.\n\nPrevious\nDark Mode\nNext\nConfigure supported chains (networks)\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Styling | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/category/styling/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nBasic\nCSS Customize & Theme\nDark Mode\nTutorials\nTypes\nStyling\nStyling\n📄️ Basic\n\nBEM Naming Rule\n\n📄️ CSS Customize & Theme\n\nCSS Variables\n\n📄️ Dark Mode\n\nWith the help of CSS variables, you can easily customize the theme of the components to support dark mode.\n\nPrevious\nuseSuiWallet\nNext\nBasic\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/category/hooks/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nuseAptosAccountBalance\nuseAptosProvider\nuseAptosWallet\nuseSuiAccountBalance\nuseSuiProvider\nuseSuiWallet\nStyling\nTutorials\nTypes\nHooks\nHooks\n\nHooks\n\n📄️ useAptosAccountBalance\n\nIntroduction\n\n📄️ useAptosProvider\n\nIntroduction\n\n📄️ useAptosWallet\n\nDescription\n\n📄️ useSuiAccountBalance\n\nIntroduction\n\n📄️ useSuiProvider\n\nIntroduction\n\n📄️ useSuiWallet\n\nDescription\n\nPrevious\nSuiWalletProvider\nNext\nuseAptosAccountBalance\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/category/components/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nAptosConnectButton\nAptosWalletProvider\nConnectModal\nSuiConnectButton\nSuiWalletProvider\nHooks\nStyling\nTutorials\nTypes\nComponents\nComponents\n\nComponents\n\n📄️ AptosConnectButton\n\nDescription\n\n📄️ AptosWalletProvider\n\nDescription\n\n📄️ ConnectModal\n\nDescription\n\n📄️ SuiConnectButton\n\nDescription\n\n📄️ SuiWalletProvider\n\nDescription\n\nPrevious\nCan I Use - Adapter Capabilities\nNext\nAptosConnectButton\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/caniuse/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nTypes\nCan I Use - Adapter Capabilities\nCan I Use - Adapter Capabilities\nPreset Wallets​\n\nThese preset wallets will be displayed as Popular on our kit modal by default.\n\nIf you are a wallet developer and want to list your wallet below, feel free to contact our team 🥳 Twitter@RazorDAO\n\nRazor Wallet\nSui Wallet\nEthos Wallet\nFor Dapp Developers​\nCan I Use with xxx Wallet?​\n\nDue to the adapter difference of each wallet, we present a function comparison table among wallet adapters.\n\nTIP\n\nRemember to handle exceptional cases if some wallet adapters do not support certain features.\n\nHook useWallet​\nwallet\tsignAndExecuteTransactionBlock\tsignPersonalMessage\tchain\taccount.publicKey\nRazor Wallet\t✅\t✅\t✅\t✅\nSui Wallet\t✅\t✅\t✅\t❌\nEthos Wallet\t✅\t✅\t❌\t❌\nHow to list my wallet on Razor Wallet Kit?​\n\nYou can contact our team via Twitter@RazorDAO to list your wallet on Razor Wallet Kit.\n\nOr submit a PR to our repo, modify the following files:\n\n// packages/kit/src/wallet/preset-wallets/presets.ts\nexport enum PresetWallet {\n  // ... resgisted wallet enum\n  // note that this name should match with your wallet adapter's name\n  // for auto detection and display purposes\n  YOUR_WALLET = 'Your Wallet',\n}\n\nexport const YourWallet = defineWallet({\n  name: PresetWallet.YOUR_WALLET,\n  iconUrl:\n    'base64 encoded image (recommended, optimize the size!!) / external url',\n  downloadUrl: {\n    browserExtension: 'chrome extension installation url',\n  },\n});\n\n// packages/kit/src/wallet/preset-wallets/index.ts\nexport const AllDefaultWallets = [\n  ...[\n    // ... registed wallets\n    presets.YourWallet,\n  ].sort((a, b) => (a.name < b.name ? -1 : 1)),\n];\n\nPrevious\nQuick Start\nNext\nComponents\nPreset Wallets\nFor Dapp Developers\nCan I Use with xxx Wallet?\nHook useWallet\nHow to list my wallet on Razor Wallet Kit?\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Quick Start | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/quickstart/#__docusaurus_skipToContent_fallback",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nTypes\nQuick Start\nQuick Start\n\nHello frens 👋 Welcome onboard 🛳\n\nRazor wallet kit is a wallet aggregator for DApps to interact with all the wallets in Movement ecosystem easily. 🥳\n\nTry out our kit and connect your dapp in just few seconds. 🪄\n\n⭐️ Have fun with Demo Playground\n\nExample repo\n🔨 Setup​\n\nFirst of all, let's install the npm package @razorlabs/wallet-kit to your project.\n\nnpm package: https://www.npmjs.com/package/@razorlabs/wallet-kit\n\nnpm install @razorlabs/wallet-kit\n# or\nyarn add @razorlabs/wallet-kit\n# or\npnpm install @razorlabs/wallet-kit\n\n\nNext, make sure @mysten/sui.js is installed in your project if your app is built on Sui Move. For Aptos Move apps, make sure you have @aptos-labs/ts-sdk installed. If not, install either one of them depending on the chain you're building on.\n\nnpm install @mysten/sui.js\n# or\nyarn add @mysten/sui.js\n# or\npnpm install @mysten/sui.js\n\nnpm install aptos\n# or\nyarn add aptos\n# or\npnpm install aptos\n\n\nThen wrap your <App /> within one of our context providers, so that our hooks can work nicely inside your dapp. If your app is M1 based you should use <AptosWalletProvider>. If your App is M2 based you should use <SuiWalletProvider>. If your app supports both networks you can use both context providers. When using both providers, order of nesting doesn't matter.\n\nOh don't forget to import our css to enable default styles 🎨\n\nimport { SuiWalletProvider } from '@razorlabs/wallet-kit';\nimport '@razorlabs/wallet-kit/style.css';\n\n// take react@18 project as an example\nReactDOM.createRoot(document.getElementById('root')).render(\n  <SuiWalletProvider>\n    <App />\n  </SuiWalletProvider>\n);\n\nor\nimport { AptosWalletProvider } from '@razorlabs/wallet-kit';\nimport '@razorlabs/wallet-kit/style.css';\n\n// take react@18 project as an example\nReactDOM.createRoot(document.getElementById('root')).render(\n  <AptosWalletProvider>\n    <App />\n  </AptosWalletProvider>\n);\n\n\nBy default, razor wallet kit will load all the preset wallets to the list💡\n\n🕹 Place ConnectButton​\nTIP\n\nWe recommend to use hooks together with our components. But if you want to use our hooks only with your customized UI components, follow the instruction #Use Hooks Only\n\nJust import our <SuiConnectButton /> or <AptosConnectButton /> and place it to wherever you like, such as Header.\n\nimport { SuiConnectButton } from '@razorlabs/wallet-kit';\n\n\nconst App = () => {\n  return (\n    <>\n      <header>\n        <SuiConnectButton/>\n      </header>\n      <\n      ... />\n    </>\n  )\n};\n\nor\nimport { AptosConnectButton } from '@razorlabs/wallet-kit';\n\nconst App = () => {\n  return (\n    <>\n      <header>\n        <AptosConnectButton/>\n      </header>\n      <\n      ... />\n    </>\n  )\n};\n\n🪝 Use Wallet Capabilities​\n\nAfter your dapp connects to a wallet that is supported your dapp is already empowered and able to call wallet capabilities.🎉\n\nPlease explore the docs for further usage information 💡\n\nimport {useSuiWallet} from '@razorlabs/wallet-kit';\nimport {TransactionBlock} from \"@mysten/sui.js\";\n\nconst App = () => {\n  const wallet = useSuiWallet()\n\n  useEffect(() => {\n    if (!wallet.connected) return;\n    console.log('connected wallet name: ', wallet.name)\n    console.log('account address: ', wallet.account?.address)\n    console.log('account publicKey: ', wallet.account?.publicKey)\n  }, [wallet.connected])\n\n  // launch a move call for the connected account via wallet\n  async function handleMoveCall() {\n    const tx = new TransactionBlock();\n    const packageObjectId = \"0x1\";\n    tx.moveCall({\n      target: `${packageObjectId}::nft::mint`,\n      arguments: [tx.pure(\"Example NFT\")],\n    });\n    await wallet.signAndExecuteTransactionBlock({\n      transactionBlock: tx,\n    });\n  }\n\n  // launch a move call for the connected account via wallet\n  async function handleSignMessage() {\n    await wallet.signPersonalMessage({\n      message: new TextEncoder().encode(\"Hello World\"),\n    });\n  }\n\n  return (<.../>)\n};\n\nor\nimport {useAptosWallet} from '@razorlabs/wallet-kit';\n\nconst App = () => {\n  const wallet = useAptosWallet()\n\n  useEffect(() => {\n    if (!wallet.connected) return;\n    console.log('connected wallet name: ', wallet.name)\n    console.log('account address: ', wallet.account?.address)\n    console.log('account publicKey: ', wallet.account?.publicKey)\n  }, [wallet.connected])\n\n  // launch a move call for the connected account via wallet\n  async function handleSignMessage() {\n    await wallet.signMessage({\n      message: \"Hello World\",\n    });\n  }\n\n  return (<.../>)\n};\n\n\nContinue to BUIDL your amazing dapp and join the ongoing Movement!\n\n📚 More Tutorials​\n\nCheck out this section: #Tutorials\n\n💧 Demo Playground​\n\nFeel free to play with our Demo Playground 🔗 (Github repo)\n\nNext\nCan I Use - Adapter Capabilities\n🔨 Setup\n🕹 Place ConnectButton\n🪝 Use Wallet Capabilities\n📚 More Tutorials\n💧 Demo Playground\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Quick Start | Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/quickstart/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nQuick Start\nCan I Use - Adapter Capabilities\nComponents\nHooks\nStyling\nTutorials\nTypes\nQuick Start\nQuick Start\n\nHello frens 👋 Welcome onboard 🛳\n\nRazor wallet kit is a wallet aggregator for DApps to interact with all the wallets in Movement ecosystem easily. 🥳\n\nTry out our kit and connect your dapp in just few seconds. 🪄\n\n⭐️ Have fun with Demo Playground\n\nExample repo\n🔨 Setup​\n\nFirst of all, let's install the npm package @razorlabs/wallet-kit to your project.\n\nnpm package: https://www.npmjs.com/package/@razorlabs/wallet-kit\n\nnpm install @razorlabs/wallet-kit\n# or\nyarn add @razorlabs/wallet-kit\n# or\npnpm install @razorlabs/wallet-kit\n\n\nNext, make sure @mysten/sui.js is installed in your project if your app is built on Sui Move. For Aptos Move apps, make sure you have @aptos-labs/ts-sdk installed. If not, install either one of them depending on the chain you're building on.\n\nnpm install @mysten/sui.js\n# or\nyarn add @mysten/sui.js\n# or\npnpm install @mysten/sui.js\n\nnpm install aptos\n# or\nyarn add aptos\n# or\npnpm install aptos\n\n\nThen wrap your <App /> within one of our context providers, so that our hooks can work nicely inside your dapp. If your app is M1 based you should use <AptosWalletProvider>. If your App is M2 based you should use <SuiWalletProvider>. If your app supports both networks you can use both context providers. When using both providers, order of nesting doesn't matter.\n\nOh don't forget to import our css to enable default styles 🎨\n\nimport { SuiWalletProvider } from '@razorlabs/wallet-kit';\nimport '@razorlabs/wallet-kit/style.css';\n\n// take react@18 project as an example\nReactDOM.createRoot(document.getElementById('root')).render(\n  <SuiWalletProvider>\n    <App />\n  </SuiWalletProvider>\n);\n\nor\nimport { AptosWalletProvider } from '@razorlabs/wallet-kit';\nimport '@razorlabs/wallet-kit/style.css';\n\n// take react@18 project as an example\nReactDOM.createRoot(document.getElementById('root')).render(\n  <AptosWalletProvider>\n    <App />\n  </AptosWalletProvider>\n);\n\n\nBy default, razor wallet kit will load all the preset wallets to the list💡\n\n🕹 Place ConnectButton​\nTIP\n\nWe recommend to use hooks together with our components. But if you want to use our hooks only with your customized UI components, follow the instruction #Use Hooks Only\n\nJust import our <SuiConnectButton /> or <AptosConnectButton /> and place it to wherever you like, such as Header.\n\nimport { SuiConnectButton } from '@razorlabs/wallet-kit';\n\n\nconst App = () => {\n  return (\n    <>\n      <header>\n        <SuiConnectButton/>\n      </header>\n      <\n      ... />\n    </>\n  )\n};\n\nor\nimport { AptosConnectButton } from '@razorlabs/wallet-kit';\n\nconst App = () => {\n  return (\n    <>\n      <header>\n        <AptosConnectButton/>\n      </header>\n      <\n      ... />\n    </>\n  )\n};\n\n🪝 Use Wallet Capabilities​\n\nAfter your dapp connects to a wallet that is supported your dapp is already empowered and able to call wallet capabilities.🎉\n\nPlease explore the docs for further usage information 💡\n\nimport {useSuiWallet} from '@razorlabs/wallet-kit';\nimport {TransactionBlock} from \"@mysten/sui.js\";\n\nconst App = () => {\n  const wallet = useSuiWallet()\n\n  useEffect(() => {\n    if (!wallet.connected) return;\n    console.log('connected wallet name: ', wallet.name)\n    console.log('account address: ', wallet.account?.address)\n    console.log('account publicKey: ', wallet.account?.publicKey)\n  }, [wallet.connected])\n\n  // launch a move call for the connected account via wallet\n  async function handleMoveCall() {\n    const tx = new TransactionBlock();\n    const packageObjectId = \"0x1\";\n    tx.moveCall({\n      target: `${packageObjectId}::nft::mint`,\n      arguments: [tx.pure(\"Example NFT\")],\n    });\n    await wallet.signAndExecuteTransactionBlock({\n      transactionBlock: tx,\n    });\n  }\n\n  // launch a move call for the connected account via wallet\n  async function handleSignMessage() {\n    await wallet.signPersonalMessage({\n      message: new TextEncoder().encode(\"Hello World\"),\n    });\n  }\n\n  return (<.../>)\n};\n\nor\nimport {useAptosWallet} from '@razorlabs/wallet-kit';\n\nconst App = () => {\n  const wallet = useAptosWallet()\n\n  useEffect(() => {\n    if (!wallet.connected) return;\n    console.log('connected wallet name: ', wallet.name)\n    console.log('account address: ', wallet.account?.address)\n    console.log('account publicKey: ', wallet.account?.publicKey)\n  }, [wallet.connected])\n\n  // launch a move call for the connected account via wallet\n  async function handleSignMessage() {\n    await wallet.signMessage({\n      message: \"Hello World\",\n    });\n  }\n\n  return (<.../>)\n};\n\n\nContinue to BUIDL your amazing dapp and join the ongoing Movement!\n\n📚 More Tutorials​\n\nCheck out this section: #Tutorials\n\n💧 Demo Playground​\n\nFeel free to play with our Demo Playground 🔗 (Github repo)\n\nNext\nCan I Use - Adapter Capabilities\n🔨 Setup\n🕹 Place ConnectButton\n🪝 Use Wallet Capabilities\n📚 More Tutorials\n💧 Demo Playground\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  },
  {
    "title": "Razor Wallet Kit",
    "url": "https://kit.razorwallet.xyz/docs/",
    "html": "Skip to main content\nRazor WalletKit\nDocs (v0.0.0)\nGitHub\nPage Not Found\n\nWe could not find what you were looking for.\n\nPlease contact the owner of the site that linked you to the original URL and let them know their link is broken.\n\nCommunity\nDiscord\nTwitter\nMore\nGitHub\nCopyright © 2024 Razor Labs, Inc. Built with Docusaurus."
  }
]