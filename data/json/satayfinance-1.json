[
  {
    "title": "Borrow Optimization | Satay Finance",
    "url": "https://docs.satay.finance/strategy-implementations/borrow-optimization",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nBorrow Optimization\n\nThe borrow optimiation strategy allocates stablecoins to the lending platform with the highest yield. This product operates similarly to Yearn's Earn product, eliminating the need for users to continuously monitor the lending rates of the various borrow/lend markets.\n\nCreate Position\n\nExtract X Stablecoin from Stablecoin Vault\n\nDeposit X Stablecoin to highest-yield lending market\n\nHarvest\n\nDetermine leading lending market by APY\n\nWithdraw Stablecoin from each trailing lending market\n\nReallocate withdrawn Stablecoin to leading market\n\n \n\nPrevious\nLiquid Staking + LP Farming\n\nLast updated 2 months ago\n\nCreate Position\nHarvest"
  },
  {
    "title": "Liquid Staking + LP Farming | Satay Finance",
    "url": "https://docs.satay.finance/strategy-implementations/liquid-staking-+-lp-farming",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nLiquid Staking + LP Farming\n\n​The Liquid Staking + LP Farming strategy enables users to earn emission rewards, trading fees, and LP farming rewards in one.\n\nCreate Position\n\nExtract X MOVE\n\nStake Y MOVE, returning Z staked MOVE\n\nDeposit X-Y MOVE and Z staked MOVE, returning W LP<MOVE, staked MOVE>\n\nDeposit W LP<MOVE, staked MOVE> into a rewards module\n\nHarvest\n\nPeriodically claim emissions\n\nSwap emissions for MOVE.\n\nExecute steps in Create Position on harvested MOVE\n\nPrevious\nLeveraged Liquid Staking\nNext\nBorrow Optimization\n\nLast updated 2 months ago\n\nCreate Position\nHarvest"
  },
  {
    "title": "Leveraged Liquid Staking | Satay Finance",
    "url": "https://docs.satay.finance/strategy-implementations/leveraged-liquid-staking",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nLeveraged Liquid Staking\n\nLeveraged liquid staking enables users to earn boosted emission rewards. The base emission of MOVE plus the APY from leveraging these positions can boost this MOVE APY.\n\nCreate Position\n\nExtract X MOVE from MOVE Vault\n\nStake X MOVE, returning Y staked MOVE\n\nDeposit Y staked MOVE into a borrow/lend market\n\nBorrow Z MOVE\n\nRepeat steps 2-4 until the desired lever ratio reached\n\nPrevious\nSpecialized Strategy Modules\nNext\nLiquid Staking + LP Farming\n\nLast updated 2 months ago"
  },
  {
    "title": "Specialized Strategy Modules | Satay Finance",
    "url": "https://docs.satay.finance/technical-overview/specialized-strategy-modules",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nSpecialized Strategy Modules\nOverview\n\nA strategy must define a set of functions and structs to operate on a vault. It interacts with satay::base_strategy and Structured Prodocts.\n\nIdentifier\n\nStrategyType is used to identify a strategy and verify its authenticity in function calls via the witnessing pattern.\n\nCopy\nstruct StrategyType has drop {}\nInitialize\n\nInitialize the Vault referenced by vault_id with debt_ratio by calling base_strategy::initialize function with the StrategyType identifier.\n\nCopy\npublic fun initialize(\n\n    manager: &signer, \n\n    vault_id: u64, \n\n    debt_ratio: u64\n\n)\nHarvest\n\nCalls structured_product::reinvest_returns and deposits StrategyCoin to vault. Rebalances the debt position given the strategy's balance and debt_ratio. Only called if harvest_trigger returns true.\n\nCopy\npublic entry fun harvest(    \n\n    manager: &signer,    \n\n    vault_id: u64\n\n)\nHarvest Trigger\n\nReturns a boolean regarding whether or not the vault manager should call harvest for StrategyType.\n\nCopy\npublic entry fun harvest_trigger(    \n\n    manager: &signer,    \n\n    vault_id: u64\n\n): bool\nTend\n\nCalls structured_product::reinvest_returns and deposits farmed StrategyCoin to the Vault\n\nCopy\npublic entry fun harvest(    \n\n    manager: &signer,    \n\n    vault_id: u64\n\n)\nWithdraw for User\n\nCalled by user when there is not enough BaseCoin in the vault, and the user wants to liquidate the respective amount of StrategyCoin for a given share_amount of VaultCoin<BaseCoin>.\n\nCopy\npublic entry fun withdraw_for_user(    \n\n    user: &signer,    \n\n    manager_addr: address,    \n\n    vault_id: u64,    \n\n    share_amount: u64\n\n)\nAdmin Functions\n\nImplement all of the Admin Functions of the Base Strategy Module using the specialized strategy Identifier.\n\nPrevious\nBase Strategy Module\nNext\nLeveraged Liquid Staking\n\nLast updated 2 months ago\n\nOverview\nIdentifier\nInitialize\nHarvest\nHarvest Trigger\nTend\nWithdraw for User\nAdmin Functions"
  },
  {
    "title": "Base Strategy Module | Satay Finance",
    "url": "https://docs.satay.finance/technical-overview/base-strategy-module",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nBase Strategy Module\nOverview\n\nThe satay::base_strategy module acts as the entry point for strategies to interact with vaults. The base_strategy module is a friend module of satay::vault, and thus can access its mutating functions. base_strategy is stateless, acting as a proxy for strategies to operate on vaults.\n\nInitialize\n\ninitialize calls the approve_strategy function on the vault referenced by the (manager, vault_id) with debt_ratio and type_of(StrategyCoin) and registers CoinStore<StrategyCoin> on vault. witness is required to ensure calling module defines StrategyType. \n\nCopy\npublic fun initialize<StrategyType: drop, StrategyCoin>(\n\n    manager: &signer,\n\n    vault_id: u64, \n\n    debt_ratio: u64, \n\n    witness: StrategyType\n\n)\nWithdraw Strategy Coin\n\nWithdraw amount of StrategyCoin from the Vault accessed by vault_cap. Assert that type_of<StrategyCoin> == strategy.strategy_coin_type of VaultStrategy<StrategyType>. Use StrategyType witness to authenticate the caller.  \n\nCopy\npublic fun withdraw_strategy_coin<StrategyType: drop, StrategyCoin>(\n\n    vault_cap: &VaultCapability,\n\n    amount: u64,\n\n    _witness: StrategyType\n\n): Coin<StrategyCoin>\nHarvest\n\nOpens the Vault for harvest. Must be followed by a closing call to close_vault_for_harvest.\n\nCopy\npublic fun open_vault_for_harvest<StrategyType: drop, BaseCoin>(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    witness: StrategyType\n\n) : (VaultCapability, VaultCapLock)\n\nCalculates and reports the profit, loss, and required debt_payment forStrategyType given its debt_ratio and strategy_balance. Calls assess_fees on any profits generated by the strategy. Returns Coin<BaseCoin> to deploy to StrategyType if it has not utilized its entire credit line and amount_needed if the strategy has more debt than is allowed.\n\nCopy\npublic fun process_harvest<StrategyType: drop, BaseCoin, StrategyCoin>(    \n\n    vault_cap: &mut VaultCapability,    \n\n    strategy_balance: u64,    \n\n    witness: StrategyType\n\n) : (Coin<BaseCoin>, u64)\n\nDeposit Coin<StrategyCoin> into the Vault referenced by vault_cap. Called between calls to open_vault_for_harvest and close_vault_for_harvest.\n\nCopy\npublic fun deposit_strategy_coin<StrategyCoin>(    \n\n    vault_cap: &VaultCapability,    \n\n    strategy_coins: Coin<StrategyCoin>\n\n)\n\nCloses the Vault after harvest, depositing base_coins and strategy_coins back to the Vault.\n\nCopy\npublic fun close_vault_for_harvest<StrategyType: drop, BaseCoin, StrategyCoin>(    \n\n    manager_addr: address,    \n\n    vault_cap: VaultCapability,    \n\n    stop_handle: VaultCapLock,    \n\n    base_coins: Coin<BaseCoin>,    \n\n    strategy_coins: Coin<StrategyCoin>\n\n)\nHarvest Trigger\n\nCalled by vault manager to check if harvest should be called. Returns true if strategy.force_harvest_trigger, (timestamp::now_seconds() - strategy.last_report) >= strategy.max_report_delay, or credit_available >= credit_threshold. false otherwise.\n\nCopy\npublic fun process_harvest_trigger<StrategyType: drop, BaseCoin>(\n\n    vault_cap: &VaultCapability\n\n): bool\n\nCloses vault without passing any coins.\n\nCopy\npublic fun close_vault_for_harvest_trigger<StrategyType: drop>(    \n\n    manager_addr: address,    \n\n    vault_cap: VaultCapability,    \n\n    stop_handle: VaultCapLock\n\n)\nTend\n\nTend operations claim rewards from a strategy and reinvest them to accrue more Coin<StrategyCoin> in the vault.\n\nOpen the Vault for a tend operation. Returns VaultCapability, VaultCapLock, and the debt_out standing for StrategyType.\n\nCopy\npublic fun open_vault_for_tend<StrategyType: drop, BaseCoin>(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    witness: StrategyType\n\n): (VaultCapability, VaultCapLock, u64)\n\nClose the Vault for a tend operation. Deposits strategy_coins into the vault.\n\nCopy\npublic fun close_vault_for_tend<StrategyType: drop, StrategyCoin>(    \n\n    manager_addr: address,    \n\n    vault_cap: VaultCapability,    \n\n    stop_handle: VaultCapLock,    \n\n    strategy_coins: Coin<StrategyCoin>\n\n)\nUser Withdraw\n\nOpens vault for user to reclaim BaseCoin from StrategyType to the Vault. Asserts that user holds share_amount of VaultCoin<BaseCoin> and that the Vault does not hold enough BaseCoin to satisfy the withdrawl amount. Returns amount_neededof BaseCoi, and VaultCapability, and VaultCap lock for a subsequent call to close_vault_for_user_withdraw.\n\nCopy\npublic fun open_vault_for_user_withdraw<StrategyType: drop, BaseCoin, StrategyCoin>(\n\n    user: &signer,\n\n    manager_addr: address,\n\n    vault_id: u64,\n\n    share_amount: u64,\n\n    witness: StrategyType\n\n) : (u64, VaultCapability, VaultCapLock)\n\nCloses the Vault after liquidation of Coin<StrategyCoin> back into Coin<BaseCoin>.\n\nCopy\npublic fun close_vault_for_user_withdraw<StrategyType: drop, BaseCoin>(    \n\n    manager_addr: address,    \n\n    vault_cap: VaultCapability,    \n\n    stop_handle: VaultCapLock,    \n\n    coins: Coin<BaseCoin>\n\n)\nAdmin Functions\n\nUpdates strategy.debt_ratio on VaultStrategy<StrategyType> for Vault referenced by (manager, vault_id).\n\nCopy\npublic entry fun update_debt_ratio<StrategyType: drop>(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    debt_ratio: u64\n\n)\n\nUpdates strategy.max_report_delay on VaultStrategy<StrategyType> for Vault referenced by (manager, vault_id).\n\nCopy\npublic entry fun update_max_report_delay<StrategyType: drop>(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    max_report_delay: u64\n\n)\n\nUpdates strategy.max_report_delay on VaultStrategy<StrategyType> for Vault referenced by (manager, vault_id).\n\nCopy\npublic entry fun update_credit_threshold<StrategyType: drop>(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    credit_threshold: u64\n\n)\n\nSet strategy.force_harvest_trigger_once to true on VaultStrategy<StrategyType> for Vault referenced by (manager, vault_id).\n\nCopy\npublic entry fun set_force_harvest_trigger_once<StrategyType: drop>(    \n\n    manager: &signer,    \n\n    vault_id: u64\n\n)\n\nSets strategy.debt_ratio to 0 on VaultStrategy<StrategyType> for Vault referenced by (manager, vault_id).\n\nCopy\npublic entry fun revoke<StrategyType: drop>(\n\n    manager: &signer, \n\n    vault_id: u64\n\n)\n\nSets strategy.debt_ratio to 0 on VaultStrategy<OldStrategy> and calls initialize<NewStrategy, NewStrategyCoin> with old_strategy_debt_ratio for Vault referenced by (manager, vault_id).\n\nCopy\npublic entry fun migrate_from<OldStrategy: drop, NewStrategy: drop, NewStrategyCoin>(    \n\n    manager: &signer,     \n\n    vault_id: u64,     \n\n    witness: NewStrategy\n\n)\nPrevious\nSatay Module\nNext\nSpecialized Strategy Modules\n\nLast updated 2 months ago\n\nOverview\nInitialize\nWithdraw Strategy Coin\nHarvest\nHarvest Trigger\nTend\nUser Withdraw\nAdmin Functions"
  },
  {
    "title": "Satay Module | Satay Finance",
    "url": "https://docs.satay.finance/technical-overview/satay-module",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nSatay Module\nOverview\n\nThe satay::satay module acts as the entry point for users to interact with vaults. The satay module is a friend module of satay::vault, and thus can access its mutating functions.\n\nThe ManagerAccount struct holds a manager's VaultInfo structs in a table keyed by vault_id, and controls the vault_id of the next vault.\n\nCopy\nstruct ManagerAccount has key {    \n\n    next_vault_id: u64,    \n\n    vaults: Table<u64, VaultInfo>\n\n}\n\nThe VaultInfo struct holds a vault's VaultCapability, providing access to mutating functions. The field is an Option such that the VaultCapability can be lent to strategies for operations.\n\nCopy\nstruct VaultInfo has store {    \n\n    // VaultCapability of the vault    \n\n    // `Option` here is required to allow lending the capability object to strategies    \n\n    vault_cap: Option<VaultCapability>\n\n}\nManager Functions\n\ninitialize creates a new ManagerAccount for the signer. Access is restricted to only the Satay DAO address.\n\nCopy\npublic entry fun initialize(\n\n    manager: &signer\n\n)\n\nnew_vault creates a new Vault for BaseCoin under the signer's ManagerAccount. Initializes management_fee and performance_fee.\n\nCopy\npublic entry fun new_vault<BaseCoin>(\n\n    manager: &signer, \n\n    seed: vector<u8>,\n\n    management_fee: u64,\n\n    performance_fee: u64\n\n)\n\nupdate_vault_fee sets vault.management_fee and vault.performance_fee for the vault referenced by (manager, vault_id).\n\nCopy\npublic entry fun update_vault_fee(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    management_fee: u64,    \n\n    performance_fee: u64\n\n)\nUser Functions\n\ndeposit allows user to deposit amount of BaseCoin into the Vault referenced by the (manager_addr, vault_id) pair.\n\nCopy\npublic entry fun deposit<BaseCoin>(\n\n    user: &signer,\n\n    manager_addr: address,\n\n    vault_id: u64,\n\n    amount: u64\n\n)\n\nwithdraw allows user to withdraw amount of BaseCoin into the Vault referenced by the (manager_addr, vault_id) pair.\n\nCopy\npublic entry fun withdraw<BaseCoin>(\n\n    user: &signer,\n\n    manager_addr: address,\n\n    vault_id: u64,\n\n    amount: u64\n\n)\nStrategy Functions\n\napprove_strategy creates a VaultStrategy<StrategyType> resource on to operate on the Vault referenced by the (manager, vault_id) pair. debt_ratio indicates the percentage of BaseCoin the StrategyType can allocate at any given time.\n\nCopy\npublic fun approve_strategy<StrategyType: drop>(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    position_coin_type: TypeInfo,    \n\n    debt_ratio: u64\n\n)\n\nReturns the VaultCapability and VaultCapLock for StrategyType to perform operations on the Vault referenced by the (manager_addr, vault_id) pair. _witness guarantees that the caller is the module that defines StrategyType. VaultStrategy<StrategyType> must exist in the vault. Paired with a subsequent unlock_vault.\n\nCopy\npublic fun lock_vault<StrategyType: drop>(    \n\n    manager_addr: address,    \n\n    vault_id: u64,    \n\n    _witness: StrategyType\n\n): (VaultCapability, VaultCapLock)\n\nUnlocks the Vault referenced by the (manager_addr, vault_id) pair. Must be preceded by a call to lock_vault.\n\nCopy\npublic fun unlock_vault<StrategyType: drop>(    \n\n    manager_addr: address,    \n\n    vault_capability: VaultCapability,    \n\n    stop_handle: VaultCapLock\n\n)\n\nupdate_strategy_debt_ratio updates the the strategy.debt_ratio value of VaultStrategy<StrategyType> for the Vault referenced by (manager_addr, vault_id) .\n\nCopy\npublic fun update_strategy_debt_ratio<StrategyType: drop>(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    debt_ratio: u64\n\n): u64\n\nupdate_strategy_max_report updates the the strategy.max_report_delay value of VaultStrategy<StrategyType> for the Vault referenced by (manager_addr, vault_id) .\n\nCopy\npublic fun update_strategy_max_report_delay<StrategyType: drop>(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    max_report_delay: u64\n\n)\n\nupdate_strategy_credit_threshold updates the the strategy.credit_threshold value of VaultStrategy<StrategyType> for the Vault referenced by (manager_addr, vault_id) .\n\nCopy\npublic fun update_strategy_credit_threshold<StrategyType: drop>(    \n\n    manager: &signer,    \n\n    vault_id: u64,    \n\n    credit_threshold: u64\n\n)\n\nset_strategy_force_harvest_trigger_once sets the strategy.force_harvest_once to true on VaultStrategy<StrategyType> for the Vault referenced by (manager_addr, vault_id) .\n\nCopy\npublic fun set_strategy_force_harvest_trigger_once<StrategyType: drop>(    \n\n    manager: &signer,    \n\n    vault_id: u64\n\n)\nPrevious\nVault Module\nNext\nBase Strategy Module\n\nLast updated 2 months ago\n\nOverview\nManager Functions\nUser Functions\nStrategy Functions"
  },
  {
    "title": "Vault Module | Satay Finance",
    "url": "https://docs.satay.finance/technical-overview/vault-module",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nVault Module\nOverview\n\nThe satay::vault module holds the code for vault logic.\n\nVaults are represented by the Vault struct, which holds the base_coin_type, base_coin_decimals, management_fee, performance_fee, debt_ratio, and total_debt of the vault.\n\nThe debt_ratio of a vault determines the total percentage of vault funds that can be deployed to strategies. In most cases, debt_ratio will be 10000, meaning all of the funds are available for strategies. The management_fee and performance_fee values are used to assess fees for the vault.\n\nCopy\nstruct Vault has key {\n\n    base_coin_type: TypeInfo,\n\n    base_coin_decimals: u8,\n\n    management_fee: u64,\n\n    performance_fee: u64,\n\n    debt_ratio: u64,\n\n    total_debt: u64,\n\n}\n\nThe VaultCapability struct holds a SignerCapability for a vault's resource account, unique vault_id, and the resource account's vault_addr.\n\nCopy\nstruct VaultCapability has store, drop {    \n\n    storage_cap: SignerCapability,    \n\n    vault_id: u64,    \n\n    vault_addr: address\n\n}\n\nThe VaultCoin struct represents a share of a vault's holdings and is burned to claim a share of the pooled capital. There is a unique VaultCoin for each BaseCoin.\n\nCopy\nstruct VaultCoin<phantom BaseCoin> has key {}\n\nThe MintCapability, BurnCapability, and FreezeCapability are stored in of a VaultCoin are stored in the vault's resource account.\n\nCopy\nstruct VaultCoinCaps<phantom BaseCoin> has key {    \n\n    mint_cap: MintCapability<VaultCoin<BaseCoin>>,    \n\n    freeze_cap: FreezeCapability<VaultCoin<BaseCoin>>,    \n\n    burn_cap: BurnCapability<VaultCoin<BaseCoin>>\n\n}\n\nThe VaultStrategy resource stores information about a Vault's approved strategies, including its strategy_coin_type, debt_ratio, total_debt, information about its performance to date, and information used in harvest_trigger.\n\nCopy\nstruct VaultStrategy<phantom StrategyType> has key, store {\n\n    strategy_coin_type: TypeInfo,\n\n    debt_ratio: u64,\n\n    total_debt: u64,\n\n    total_gain: u64,\n\n    total_loss: u64,\n\n    last_report: u64,\n\n    max_report_delay: u64,\n\n    force_harvest_trigger_once: bool,\n\n    credit_threshold: u64\n\n}\nAccess Control\n\nAll mutating functions for the vault are restricted to friend modules satay::satay and satay::base_strategy.\n\nSatay Functions\nCreate Vault\n\nnew creates a new vault for BaseCoin managed by vault_owner with a unique vault_id. The function also initializes the management and performance fee amounts. This function is called by the satay::satay module. management_fee must not exceed MAX_MANAGEMENT_FEE_BPS and performance_fee must not exceed MAX_PERFORMANCE_FEE_BPS.\n\nCopy\npublic(friend) fun new<BaseCoin>(\n\n    vault_owner: &signer, \n\n    seed: vector<u8>, \n\n    vault_id: u64,\n\n    management_fee: u64,\n\n    performance_fee: u64\n\n): VaultCapability\nUser Functions\n\ndeposit_as_user deposits base_coin of Coin<BaseCoin>into the vault, minting a calculated amount of Coin<VaultCoin<BaseCoin>> to user. This function is called by the satay::satay module.\n\nCopy\npublic(friend) fun deposit_as_user<BaseCoin>(    \n\n    user: &signer,    \n\n    vault_cap: &VaultCapability,    \n\n    base_coin: Coin<BaseCoin>\n\n)\n\nwithdraw_as_user burns amount of Coin<VaultCoin<BaseCoin>>, returning a calculated amount of Coin<BaseCoin> to user. This function is called by the satay::satay module.\n\nCopy\npublic(friend) fun withdraw_as_user<BaseCoin>(    \n\n    user: &signer,    \n\n    vault_cap: &VaultCapability,    \n\n    amount: u64\n\n): Coin<BaseCoin>\nAdmin Functions\n\napprove_strategy creates a VaultStrategy<StrategyType> resource and moves it to the vault resource account referenced by vault_cap. vault.debt_ratio + debt_ratio must not exceed MAX_DEBT_RATIO_BPS.\n\nCopy\npublic(friend) fun approve_strategy<StrategyType: drop>(    \n\n    vault_cap: &VaultCapability,    \n\n    strategy_coin_type: TypeInfo,    \n\n    debt_ratio: u64\n\n)\n\nupdate_fee updates the fee vault.management_fee and vault.performance_fee for the vault referenced by vault_cap. management_fee must not exceed MAX_MANAGEMENT_FEE_BPS and performance_fee must not exceed MAX_PERFORMANCE_FEE_BPS.\n\nCopy\npublic(friend) fun update_fee(    \n\n    vault_cap: &VaultCapability,    \n\n    management_fee: u64,    \n\n    performance_fee: u64\n\n)\n\nupdate_strategy_debt_ratio updates the debt_ratio of StrategyType. vault.debt_ratio - old_debt_ratio + debt_ratio must not exceed MAX_DEBT_RATIO_BPS.\n\nCopy\npublic(friend) fun update_strategy_debt_ratio<StrategyType: drop>(    \n\n    vault_cap: &VaultCapability,    \n\n    debt_ratio: u64\n\n): u64\n\nupdate_strategy_max_report_delay updates the strategy.max_report_delay value for VaultStrategy<StrategyType>.\n\nCopy\npublic(friend) fun update_strategy_max_report_delay<StrategyType: drop>(    \n\n    vault_cap: &VaultCapability,    \n\n    max_report_delay: u64\n\n)\n\nupdate_strategy_credit_threshold updates the strategy.credit_threshold value for VaultStrategy<StrategyType>.\n\nCopy\npublic(friend) fun update_strategy_credit_threshold<StrategyType: drop>(    \n\n    vault_cap: &VaultCapability,    \n\n    credit_threshold: u64\n\n)\n\nset_strategy_force_harvest_trigger_once updates the strategy.force_harvest_trigger value for VaultStrategy<StrategyType> to true.\n\nCopy\npublic(friend) fun set_strategy_force_harvest_trigger_once<StrategyType: drop>(    \n\n    vault_cap: &VaultCapability\n\n)\nBase Strategy Functions\nAdd Coin\n\nadd_coin<CoinType> creates a CoinStore<CoinType> resource for the vault, allowing it to accept Coin<CoinType> deposits.\n\nCopy\npublic(friend) fun add_coin<CoinType>(    \n\n    vault_cap: &VaultCapability\n\n)\nDeposit/Withdraw\n\ndeposit sends coin to the vault without minting VaultCoin<CoinType>\n\nCopy\npublic(friend) fun deposit<CoinType>(\n\n    vault_cap: &VaultCapability, \n\n    coin: Coin<CoinType>\n\n)\n\nwithdraw extracts amount of Coin<CoinType> from the vault without burning Coin<VaultCoin<CoinType>>.\n\nCopy\npublic(friend) fun withdraw<CoinType>(\n\n    vault_cap: &VaultCapability, \n\n    amount: u64\n\n): Coin<CoinType>\nFees\n\nassess_fees charges the management and performance fees on a reported gain from StrategyType.\n\nCopy\npublic(friend) fun assess_fees<StrategyType: drop, BaseCoin>(    \n\n    gain: u64,    \n\n    delegated_assets: u64,    \n\n    vault_cap: &VaultCapability,   \n\n    _witness: StrategyType\n\n )\nReporting\n\nupdate_total_debt incrementstotal_debt of VaultStrategy<StrategyType> and Vault by credit - debt_payment.\n\nCopy\npublic(friend) fun update_total_debt<StrategyType: drop>(\n\n    vault_cap: &mut VaultCapability, \n\n    credit: u64, \n\n    debt_payment: u64\n\n)\n\nreport_timestamp updates the last_report value of VaultStrategy<StrategyType> to the current timestamp.\n\nCopy\npublic(friend) fun report_timestamp<StrategyType: drop>(\n\n    vault_cap: &mut VaultCapability\n\n)\n\nreport_gain increments total_gain value of VaultStrategy<StrategyType>.\n\nCopy\npublic(friend) fun report_gain<StrategyType: drop>(\n\n    vault_cap: &mut VaultCapability, \n\n    profit: u64\n\n)\n\nreport_loss decrements total_debt, debt_ratio and increments total_loss on VaultStrategy<StrategyType>. Decrements total_debt and debt_ratio on Vault.\n\nCopy\npublic(friend) fun report_loss<StrategyType: drop>(\n\n    vault_cap: &mut VaultCapability, \n\n    loss: u64\n\n)\nGetter Functions\n\nGets the total assets of the vault, including liquid and deployed CoinType.\n\nCopy\npublic fun total_assets<CoinType>(\n\n    vault_cap: &VaultCapability\n\n): u64\n\nGets the amount of remaining BaseCoin credit StrategyType can withdraw.\n\nCopy\npublic fun credit_available<StrategyType: drop, CoinType>(\n\n    vault_cap: &VaultCapability\n\n): u64\n\nDetermines if StrategyType is past its debt limit. If StrategyType is above its limit, return the amount over the limit.\n\nCopy\npublic fun debt_out_standing<StrategyType: drop, CoinType>(\n\n    vault_cap: &VaultCapability\n\n): u64\n\nCalculates the amount of BaseCoin to return given an amount of VaultCoin<BaseCoin> to burn.\n\nCopy\npublic fun calculate_base_coin_amount_from_share<BaseCoin>(\n\n    vault_cap: &VaultCapability, \n\n    share: u64\n\n): u64\n\nGets the vault address of a vault, given its VaultCapability resource.\n\nCopy\npublic fun get_vault_addr(\n\n    vault_cap: &VaultCapability\n\n): address\n\nGets the strategy.strategy_coin_type from VaultStrategy<StrategyType> of Vault accessed by vault_cap.\n\nCopy\npublic fun get_strategy_coin_type<StrategyType: drop>(\n\n    vault_cap: &VaultCapability\n\n): TypeInfo\nPrevious\nGlobal Configuration\nNext\nSatay Module\n\nLast updated 2 months ago\n\nOverview\nAccess Control\nSatay Functions\nCreate Vault\nUser Functions\nAdmin Functions\nBase Strategy Functions\nAdd Coin\nDeposit/Withdraw\nFees\nReporting\nGetter Functions"
  },
  {
    "title": "Vaults | Satay Finance",
    "url": "https://docs.satay.finance/our-three-pillars/vaults",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nVaults\nOverview\n\nSatay vaults are capital pools that securely store and maximize returns on digital assets. Vaults accept BaseCoin deposits, which are then utilized in strategies.\n\nVaultCoin\n\nA VaultCoin represents a user's share of a Vault's underlying assets. When a user deposits BaseCoin into a Vault, the Vault mints VaultCoin<BaseCoin> to the user. \n\nDeposit Token Flow\n\nThe amount of VaultCoin<BaseCoin> minted is as follows:\n\n𝑉\n𝑎\n𝑢\n𝑙\n𝑡\n𝐶\n𝑜\n𝑖\n𝑛\n \n𝑎\n𝑚\n𝑜\n𝑢\n𝑛\n𝑡\n=\n𝐵\n𝑎\n𝑠\n𝑒\n𝐶\n𝑜\n𝑖\n𝑛\n \n𝑎\n𝑚\n𝑜\n𝑢\n𝑛\n𝑡\n∗\n𝑉\n𝑎\n𝑢\n𝑙\n𝑡\n𝐶\n𝑜\n𝑖\n𝑛\n \n𝑠\n𝑢\n𝑝\n𝑝\n𝑙\n𝑦\n𝑣\n𝑎\n𝑢\n𝑙\n𝑡\n \n𝐵\n𝑎\n𝑠\n𝑒\n𝐶\n𝑜\n𝑖\n𝑛\n \n𝑎\n𝑠\n𝑠\n𝑒\n𝑡\n𝑠\n\nVaultCoin<BaseCoin> can be traded as any other movement_framework::coin, and can be burned in exchange for a respective amount of BaseCoin.\n\nStrategies\n\nStrategies are Move modules that withdraw BaseCoin from vaults and deploy capital to Structured Products. In order for a strategy to withdraw from a vault, it must be approved by the vault's manager.\n\nConceptually, strategies are a bridge between BaseCoin held in vaults and structured products which deploy BaseCoin to third-party protocols in exchange for ProductCoin representations of positions.\n\nStrategy Approval\n\nA manager is able to approve any number of strategies for a vault. During the approval process, managers must indicate the debt_ratio for the strategy, which represents the proportion of a vault's holdings that the strategy can withdraw.\n\nThe manager account is the only account capable of approving strategies. At launch, the vault manager role will be limited to a multi-sig account operated by the Satay team. As the platform matures, vault management privileges will be transferred to the Satay DAO for decentralized strategy selection.\n\nDebt Ratio\n\nEach approved strategy has a debt_ratio attribute that limits the amount of debt the strategy can hold at any given time. The sum of all debt_ratio attributes for a vault cannot exceed 100%.\n\nFees\n\nVaults charge a performance fee and a management fee. The performance fee is applied to realized gains for a vault, and the management fee is charged annually on a vaults AUM. Fees are distributed to the dao_storage module.\n\nBase Strategy\n\nAll strategies interact with vaults indirectly through the base_strategy module, which restricts vault interactions to harvest transactions, withdraw_for_user transactions, and tend transactions. \n\nPrevious\nStrategies\nNext\nStructured Product Module\n\nLast updated 2 months ago\n\nOverview\nVaultCoin\nStrategies\nStrategy Approval\nDebt Ratio\nFees\nBase Strategy"
  },
  {
    "title": "Global Configuration | Satay Finance",
    "url": "https://docs.satay.finance/technical-overview/global-configuration",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nGlobal Configuration\nOverview\n\nThe global_config module handles access control for vaults and strategies.\n\nsatay is a friend of global_config, and can access its friend-only functions.\n\nGlobal Config\n\nThe GlobalConfig struct stores information about the dao_admin and governor accounts. \n\nCopy\nstruct GlobalConfig has key {\n\n    dao_admin_address: address,\n\n    governance_address: address,\n\n    new_dao_admin_address: address,\n\n    new_governance_address: address,\n\n}\n\nThe initialize function is called by satay::initialize and creates the GlobalConfig object with @satay as dao_admin_address and new_governance_address. The function asserts that signer::address_of(satay_admin) == @satay.\n\nCopy\npublic(friend) fun initialize(satay_admin: &signer)\n\n The governance_address account - the governor - has the ability to call initialize_vault, initialize_strategy, and set_governance on the global_config module. On the satay module, the governor can call new_vault, update_vault_fee, and approve_strategy. Additionally, the governor has access to all of the functions of the vault_manager, strategist, and the keeper detailed later.\n\nThe dao_admin_address account - the dao_admin - has the ability to withdraw CoinType from satay::dao_storage::Storage<CoinType> storage and update the dao_admin_address.\n\nVault Config\n\nThe VaultConfig struct stores information about the vault_manager of Vault<BaseCoin>\n\nCopy\nstruct VaultConfig<phantom BaseCoin> has key {    \n\n    vault_manager_address: address,    \n\n    new_vault_manager_address: address\n\n}\n\nThe initialize_vault<BaseCoin> function is called by satay::new_vault<BaseCoin> to create the VaultConfig<BaseCoin> resource, which can only be called by the governor.\n\nCopy\npublic(friend) fun initialize_vault<BaseCoin>(governance: &signer)\n\nThe vault_manager can call set_vault_manager function on the global_config module, as well as base_strategy:update_debt_ratio, base_strategy::update_credit_threshold, and base_strategy::force_harvest_trigger_once. Additionally, the vault_manager has access to all of the functions of the strategist and keeper.\n\nStrategyConfig\n\nThe StrategyConfig struct stores information about the strategist and  keeper for StrategyType on Vault<BaseCoin>. The BaseCoin type is required as multiple vaults with a different BaseCoin may utilize the same strategy.\n\nCopy\nstruct StrategyConfig<phantom StrategyType, BaseCoin phantom> has key {\n\n    strategist_address: address,\n\n    keeper_address: address,\n\n    new_strategist_address: address,\n\n    new_keeper_address: address,\n\n}\n\nThe initialize_strategy<StrategyType, BaseCoin> function is called by satay::approve_strategy<StrategyType, BaseCoin> to create the StrategyConfig<StrategyType, BaseCoin> resource, and can only be called by the governor.\n\nCopy\npublic(friend) fun initialize_strategy<StrategyType: drop, BaseCoin>(\n\n    governance: &signer\n\n)\n\nThe strategist can call set_strategist on the global_config module, as well as base_strategy::update_max_report_delay. Additionally, the strategies has access to all of the functions of the keeper.\n\nThe keeper function can call the set_keeper function on the global_config module, as well as harvest and tend on strategies.\n\nAssertions\n\nassert_dao_admin passes if the signer is dao_admin, aborts otherwise. Called by dao_storage::withdraw.\n\nCopy\npublic fun assert_dao_admin(dao_admin: &signer)\n\nassert_governance passes if the signer is the governor, aborts otherwise.\n\nCopy\npublic fun assert_governance(governance: &signer)\n\nassert_vault_manager passes if the signer is the governor or vault_manager of the Vault for BaseCoin, aborts otherwise.\n\nCopy\npublic fun assert_vault_manager<BaseCoin>(vault_manager: &signer)\n\nassert_strategist passes if the signer is the governor, vault_manager, or strategist, aborts otherwise.\n\nCopy\npublic fun assert_strategist<StrategyType: drop, BaseCoin>(strategist: &signer)\n\nassert_keeper passes if the signer is the governor, vault_manager, strategist, or keeper, aborts otherwise.\n\nCopy\npublic fun assert_keeper<StrategyType: drop, BaseCoin>(keeper: &signer)\nPrevious\nStructured Product Module\nNext\nVault Module\n\nLast updated 2 months ago\n\nOverview\nGlobal Config\nVault Config\nStrategyConfig\nAssertions"
  },
  {
    "title": "Structured Product Module | Satay Finance",
    "url": "https://docs.satay.finance/technical-overview/structured-product-module",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nStructured Product Module\n\nGeneralized Interface\n\nOverview\n\nEach structured product is a standalone Move module that accepts a BaseCoin, creates yield-bearing positions with partner protocols and issues a ProductCoin representing a share of the product's holdings. Structured products interact directly with third-party protocols.\n\nStructured products hold coins in a resource account whose SignerCapability is stored in a ProductAccountCapability struct.\n\nCopy\nstruct ProductAccountCapability has key {    \n\n    signer_cap: SignerCapability\n\n}\n\nEach product operates a Coin<ProductCoin> that is minted through apply_position and burned through liquidate_position. This coin represents a share of the product's underlying holdings.\n\nCopy\nstruct ProductCoin {}\n\nThe MintCapability, BurnCapability, and FreezeCapability, of the Coin<ProductCoin> are stored in the product's resource account.\n\nCopy\nstruct ProductCoinCaps has key {    \n\n    mint_cap: MintCapability<ProductCoin>,    \n\n    burn_cap: BurnCapability<ProductCoin>,    \n\n    freeze_cap: FreezeCapability<ProductCoin>\n\n}\nInitialize\n\nThe initialize function is called once by the module deployer to create the product resource account, store the ProductAccountCapability in the deployer's account, initialize the Coin<ProductCoin>, and store the ProductCoinCaps in the resource account. The function must assert! that signer::address_of(manager) == deployer_address.\n\nCopy\npublic entry fun initialize(manager: &signer)\nUser Entry Functions\nDeposit\n\nThe deposit function withdraws amount of  Coin<BaseCoin> from user, calls apply_position on the withdrawn coins, and deposits the resultant Coin<ProductCoin> to user. \n\nCopy\npublic entry fun deposit(    \n\n    user: &signer,    \n\n    amount: u64\n\n)\nWithdraw\n\nThe withdraw function withdraws amount of Coin<ProductCoin> from user, calls liquidate_position on the withdraw coins, and deposits the resultant Coin<BaseCoin> to user.\n\nCopy\npublic entry fun withdraw(    \n\n    user: &signer,    \n\n    amount: u64\n\n)\nTend\n\nThe tend function calls reinvest_returns for user, reinvesting farmed rewards for additional Coin<ProductCoin>.\n\nCopy\npublic entry fun tend(user: &signer)\nOperators\nApply Position\n\nThe apply_position function converts Coin<BaseCoin> input into the product's Coin<ProductCoin> and returns any residual Coin<BaseCoin> that is not utilized by the product. This function is called by deposit and reinvest_returns, and by strategies during a harvest.\n\nCopy\npublic fun apply_position(    \n\n    base_coins: Coin<BaseCoin>,    \n\n): (Coin<ProductCoin>, Coin<BaseCoin>)\nLiquidate Position\n\nThe liquidate_position function converts Coin<ProductCoin> input into Coin<BaseCoin>, operating the reverse of apply_position. This function is called by withdraw and by strategies during harvests and user withdraws.\n\nCopy\npublic fun liquidate_position(    \n\n    product_coins: Coin<ProductCoin>\n\n): Coin<BaseCoin>\nReinvest Returns\n\nThe reinvest_returns function claims accrued rewards for user, calling apply_position on the farmed Coin<BaseCoin>. This function is called by the tend function of the product and by the tend function of strategies.\n\nCopy\npublic fun reinvest_returns(\n\n    user: &signer\n\n): Coin<ProductCoin>\n\nConversion Functions\n\nThe get_base_coin_amount_for_product_coin_amount function calculates the amount of Coin<BaseCoin> returned from liquidating position_coin_amount of Coin<PositionCoin>. This function is called by strategies to get the total Coin<BaseCoin> balance of the strategy.\n\nCopy\npublic fun get_base_coin_amount_for_product_coin_amount(\n\n    position_coin_amount: u64\n\n): u64\n\nThe get_position_coin_amount_for_base_coin_amount the function calculates the amount of Coin<ProductCoin> needed to liquidate to return amount_base_coin of Coin<BaseCoin>. This function is called by strategies to get the liquidation amount during harvests and user withdrawals. \n\nCopy\npublic fun get_position_coin_amount_for_base_coin_amount(\n\n    amount_base_coin: u64\n\n): u64\nPrevious\nVaults\nNext\nGlobal Configuration\n\nLast updated 2 months ago\n\nOverview\nInitialize\nUser Entry Functions\nDeposit\nWithdraw\nTend\nOperators\nApply Position\nLiquidate Position\nReinvest Returns\nConversion Functions"
  },
  {
    "title": "Strategies | Satay Finance",
    "url": "https://docs.satay.finance/our-three-pillars/strategies",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nStrategies\n\nSeamless entry points to Movement DeFi\n\nStrategies allow users to enter multi-protocol strategies through shared liquidity vaults or individually. Each strategy is its own Move module, accepting BaseCoin deposits in exchange for the product's unique ProductCoin.\n\nDeposit Token Flow\n\nTo withdraw BaseCoin from a strategy, an account must provide ProductCoin to liquidate.\n\nWithdraw Token Flow\n\nEach strategy has a resource account that stores BaseCoin deposits, interacts with one or more partner protocols, and issues a unique ProductCoin that represents a share of the product's underlying asset. The general interface for strategy is available here.\n\nPrevious\nBlocks\nNext\nVaults\n\nLast updated 2 months ago"
  },
  {
    "title": "Blocks | Satay Finance",
    "url": "https://docs.satay.finance/our-three-pillars/blocks",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nBlocks\n\nBlocks are the fundamental building units of Satay Finance. They are DeFi operations, that when grouped together, create Strategies across multiple DeFi protocols.\n\nExamples of Blocks\n\n1. Liquid Staking\n\nLiquid staking enables users to stake their assets and earn rewards while maintaining liquidity. Users can stake MOVE tokens with liquid staking providers on Movement and receive liquid staking tokens.\n\n2. Borrow/Lend\n\nBorrow/lend markets facilitate lending assets for interest or borrowing assets to leverage positions. These markets provide opportunities for both low-risk yield (lending) and higher-risk, leveraged yield (borrowing).\n\n3. Liquidity Providing (LP)\n\nProviding liquidity to DEXs allows users to earn yield from trading fees and liquidity incentives. LP tokens can be further utilized in our strategies.\n\nPrevious\nIntroduction\nNext\nStrategies\n\nLast updated 2 months ago"
  },
  {
    "title": "Introduction | Satay Finance",
    "url": "https://docs.satay.finance/",
    "html": "Satay Finance\nSearch\nCtrl + K\nOVERVIEW\nIntroduction\nOUR THREE PILLARS\nBlocks\nStrategies\nVaults\nTECHNICAL OVERVIEW\nStructured Product Module\nGlobal Configuration\nVault Module\nSatay Module\nBase Strategy Module\nSpecialized Strategy Modules\nSTRATEGY IMPLEMENTATIONS\nLeveraged Liquid Staking\nLiquid Staking + LP Farming\nBorrow Optimization\nPowered by GitBook\nIntroduction\n\nSatay Finance, a yield aggregator on the Movement network.\n\nOur Core\n\nAt Satay Finance, our heart lies in Strategies—beautifully crafted compositions of DeFi operations called Blocks. These Strategies allow you to execute multi-protocol positions, leveraging the full potential of the Movement Ecosystem with just one click. This unification transforms a fragmented DeFi landscape into a cohesive, high-yield opportunity for users of all skill levels.\n\nFor a hands-off investment approach, our Automated Vaults are the perfect solution. These vaults continuously optimize fund allocations to strategies, maximizing yield while minimizing risk. By periodically rebalancing strategy debt ratios, Automated Vaults offer passive income in Movement, this is a way to grow their assets without active management.\n\nSatay Finance stands out by providing a unified, powerful, and user-friendly platform that leverages the best of what the Movement Ecosystem has to offer. Whether you're a seasoned DeFi veteran or a newcomer, Satay Finance offers the tools and opportunities to build and optimize your APY effortlessly.\n\nDive into the future of decentralized finance with Satay Finance. We connect DeFi protocols so you don't have to.\n\nNext\nBlocks\n\nLast updated 2 months ago"
  }
]